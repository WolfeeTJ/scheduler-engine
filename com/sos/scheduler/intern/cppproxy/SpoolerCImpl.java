// *** Generated by com.sos.cplusplus.generator ***
package com.sos.scheduler.intern.cppproxy;

class SpoolerCImpl extends com.sos.cplusplus.runtime.CppProxyImpl implements com.sos.scheduler.intern.cppproxy.SpoolerC {

private SpoolerCImpl() {}  // Nur für JNI

public java.lang.String http_url() {
    return http_url__native(cppReference());
}

private static native java.lang.String http_url__native(long cppReference);

public void set_id(java.lang.String p0) {
    set_id__native(cppReference(), p0);
}

private static native void set_id__native(long cppReference, java.lang.String p0);

public java.lang.String id_for_db() {
    return id_for_db__native(cppReference());
}

private static native java.lang.String id_for_db__native(long cppReference);

public int udp_port() {
    return udp_port__native(cppReference());
}

private static native int udp_port__native(long cppReference);

public int tcp_port() {
    return tcp_port__native(cppReference());
}

private static native int tcp_port__native(long cppReference);

public java.lang.String include_path() {
    return include_path__native(cppReference());
}

private static native java.lang.String include_path__native(long cppReference);

public java.lang.String temp_dir() {
    return temp_dir__native(cppReference());
}

private static native java.lang.String temp_dir__native(long cppReference);

public java.lang.String state_name() {
    return state_name__native(cppReference());
}

private static native java.lang.String state_name__native(long cppReference);

public java.lang.String log_directory() {
    return log_directory__native(cppReference());
}

private static native java.lang.String log_directory__native(long cppReference);

public boolean is_service() {
    return is_service__native(cppReference());
}

private static native boolean is_service__native(long cppReference);

public java.lang.String string_need_db() {
    return string_need_db__native(cppReference());
}

private static native java.lang.String string_need_db__native(long cppReference);

public void log_show_state() {
    log_show_state__native(cppReference());
}

private static native void log_show_state__native(long cppReference);

public void assign_stdout() {
    assign_stdout__native(cppReference());
}

private static native void assign_stdout__native(long cppReference);

public void cmd_pause() {
    cmd_pause__native(cppReference());
}

private static native void cmd_pause__native(long cppReference);

public void cmd_continue() {
    cmd_continue__native(cppReference());
}

private static native void cmd_continue__native(long cppReference);

public void cmd_terminate_after_error(java.lang.String p0, java.lang.String p1) {
    cmd_terminate_after_error__native(cppReference(), p0, p1);
}

private static native void cmd_terminate_after_error__native(long cppReference, java.lang.String p0, java.lang.String p1);

public void cmd_terminate(boolean p0, int p1) {
    cmd_terminate__native(cppReference(), p0, p1);
}

private static native void cmd_terminate__native(long cppReference, boolean p0, int p1);

public void cmd_terminate(boolean p0) {
    cmd_terminate__native(cppReference(), p0);
}

private static native void cmd_terminate__native(long cppReference, boolean p0);

public void cmd_terminate() {
    cmd_terminate__native(cppReference());
}

private static native void cmd_terminate__native(long cppReference);

public void cmd_terminate(boolean p0, int p1, java.lang.String p2) {
    cmd_terminate__native(cppReference(), p0, p1, p2);
}

private static native void cmd_terminate__native(long cppReference, boolean p0, int p1, java.lang.String p2);

public void cmd_terminate(boolean p0, int p1, java.lang.String p2, boolean p3) {
    cmd_terminate__native(cppReference(), p0, p1, p2, p3);
}

private static native void cmd_terminate__native(long cppReference, boolean p0, int p1, java.lang.String p2, boolean p3);

public void cmd_terminate_and_restart(int p0) {
    cmd_terminate_and_restart__native(cppReference(), p0);
}

private static native void cmd_terminate_and_restart__native(long cppReference, int p0);

public void cmd_let_run_terminate_and_restart() {
    cmd_let_run_terminate_and_restart__native(cppReference());
}

private static native void cmd_let_run_terminate_and_restart__native(long cppReference);

public void abort_immediately_after_distribution_error(java.lang.String p0) {
    abort_immediately_after_distribution_error__native(cppReference(), p0);
}

private static native void abort_immediately_after_distribution_error__native(long cppReference, java.lang.String p0);

public void abort_immediately(boolean p0, java.lang.String p1) {
    abort_immediately__native(cppReference(), p0, p1);
}

private static native void abort_immediately__native(long cppReference, boolean p0, java.lang.String p1);

public void abort_now(boolean p0) {
    abort_now__native(cppReference(), p0);
}

private static native void abort_now__native(long cppReference, boolean p0);

public void execute_state_cmd() {
    execute_state_cmd__native(cppReference());
}

private static native void execute_state_cmd__native(long cppReference);

public boolean is_termination_state_cmd() {
    return is_termination_state_cmd__native(cppReference());
}

private static native boolean is_termination_state_cmd__native(long cppReference);

public void load_arg() {
    load_arg__native(cppReference());
}

private static native void load_arg__native(long cppReference);

public void self_check() {
    self_check__native(cppReference());
}

private static native void self_check__native(long cppReference);

public void update_console_title(int p0) {
    update_console_title__native(cppReference(), p0);
}

private static native void update_console_title__native(long cppReference, int p0);

public void execute_config_commands() {
    execute_config_commands__native(cppReference());
}

private static native void execute_config_commands__native(long cppReference);

public void run_check_ctrl_c() {
    run_check_ctrl_c__native(cppReference());
}

private static native void run_check_ctrl_c__native(long cppReference);

public void end_waiting_tasks() {
    end_waiting_tasks__native(cppReference());
}

private static native void end_waiting_tasks__native(long cppReference);

public void nichts_getan(int p0, java.lang.String p1) {
    nichts_getan__native(cppReference(), p0, p1);
}

private static native void nichts_getan__native(long cppReference, int p0, java.lang.String p1);

public boolean name_is_valid(java.lang.String p0) {
    return name_is_valid__native(cppReference(), p0);
}

private static native boolean name_is_valid__native(long cppReference, java.lang.String p0);

public void check_name(java.lang.String p0) {
    check_name__native(cppReference(), p0);
}

private static native void check_name__native(long cppReference, java.lang.String p0);

public void check_cluster() {
    check_cluster__native(cppReference());
}

private static native void check_cluster__native(long cppReference);

public void assert_is_activated(java.lang.String p0) {
    assert_is_activated__native(cppReference(), p0);
}

private static native void assert_is_activated__native(long cppReference, java.lang.String p0);

public boolean is_cluster() {
    return is_cluster__native(cppReference());
}

private static native boolean is_cluster__native(long cppReference);

public boolean cluster_is_active() {
    return cluster_is_active__native(cppReference());
}

private static native boolean cluster_is_active__native(long cppReference);

public boolean has_exclusiveness() {
    return has_exclusiveness__native(cppReference());
}

private static native boolean has_exclusiveness__native(long cppReference);

public boolean orders_are_distributed() {
    return orders_are_distributed__native(cppReference());
}

private static native boolean orders_are_distributed__native(long cppReference);

public void assert_are_orders_distributed(java.lang.String p0) {
    assert_are_orders_distributed__native(cppReference(), p0);
}

private static native void assert_are_orders_distributed__native(long cppReference, java.lang.String p0);

public java.lang.String cluster_member_id() {
    return cluster_member_id__native(cppReference());
}

private static native java.lang.String cluster_member_id__native(long cppReference);

public java.lang.String distributed_member_id() {
    return distributed_member_id__native(cppReference());
}

private static native java.lang.String distributed_member_id__native(long cppReference);

public java.lang.String db_cluster_member_id() {
    return db_cluster_member_id__native(cppReference());
}

private static native java.lang.String db_cluster_member_id__native(long cppReference);

public java.lang.String db_distributed_member_id() {
    return db_distributed_member_id__native(cppReference());
}

private static native java.lang.String db_distributed_member_id__native(long cppReference);

public boolean signaled() {
    return signaled__native(cppReference());
}

private static native boolean signaled__native(long cppReference);

public void send_cmd() {
    send_cmd__native(cppReference());
}

private static native void send_cmd__native(long cppReference);

public void register_pid(int p0) {
    register_pid__native(cppReference(), p0);
}

private static native void register_pid__native(long cppReference, int p0);

public void register_pid(int p0, boolean p1) {
    register_pid__native(cppReference(), p0, p1);
}

private static native void register_pid__native(long cppReference, int p0, boolean p1);

public void unregister_pid(int p0) {
    unregister_pid__native(cppReference(), p0);
}

private static native void unregister_pid__native(long cppReference, int p0);

public boolean is_machine_suspendable() {
    return is_machine_suspendable__native(cppReference());
}

private static native boolean is_machine_suspendable__native(long cppReference);

public void begin_dont_suspend_machine() {
    begin_dont_suspend_machine__native(cppReference());
}

private static native void begin_dont_suspend_machine__native(long cppReference);

public void end_dont_suspend_machine() {
    end_dont_suspend_machine__native(cppReference());
}

private static native void end_dont_suspend_machine__native(long cppReference);

public void suspend_machine() {
    suspend_machine__native(cppReference());
}

private static native void suspend_machine__native(long cppReference);

public java.lang.String java_work_dir() {
    return java_work_dir__native(cppReference());
}

private static native java.lang.String java_work_dir__native(long cppReference);

public boolean has_any_task() {
    return has_any_task__native(cppReference());
}

private static native boolean has_any_task__native(long cppReference);

public void detect_warning_and_send_mail() {
    detect_warning_and_send_mail__native(cppReference());
}

private static native void detect_warning_and_send_mail__native(long cppReference);

public java.lang.String name() {
    return name__native(cppReference());
}

private static native java.lang.String name__native(long cppReference);

public void run() {
    run__native(cppReference());
}

private static native void run__native(long cppReference);

public void load() {
    load__native(cppReference());
}

private static native void load__native(long cppReference);

public void start() {
    start__native(cppReference());
}

private static native void start__native(long cppReference);

public void stop() {
    stop__native(cppReference());
}

private static native void stop__native(long cppReference);

public java.lang.String directory() {
    return directory__native(cppReference());
}

private static native java.lang.String directory__native(long cppReference);

public java.lang.String id() {
    return id__native(cppReference());
}

private static native java.lang.String id__native(long cppReference);

public void signal(java.lang.String p0) {
    signal__native(cppReference(), p0);
}

private static native void signal__native(long cppReference, java.lang.String p0);

public void activate() {
    activate__native(cppReference());
}

private static native void activate__native(long cppReference);

public java.lang.String param() {
    return param__native(cppReference());
}

private static native java.lang.String param__native(long cppReference);

}
