// *** Generated by com.sos.scheduler.kernel.cplusplus.generator ***

#include "spooler.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Proxy_class> has_proxy< ::sos::scheduler::Job_subsystem >::proxy_class_factory("com.sos.scheduler.kernel.core.cppproxy.Job_subsystemCImpl");

}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace kernel { namespace core { namespace cppproxy { 

static jobject JNICALL job_1by_1string__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Job_subsystem* o_ = has_proxy< ::sos::scheduler::Job_subsystem >::of_cpp_reference(cppReference,"::sos::scheduler::Job_subsystem::job_by_string()");
        return Has_proxy::jobject_of(o_->job_by_string(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jobject();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace kernel { namespace core { namespace cppproxy { 

static jobject JNICALL job_1by_1string_1or_1null__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Job_subsystem* o_ = has_proxy< ::sos::scheduler::Job_subsystem >::of_cpp_reference(cppReference,"::sos::scheduler::Job_subsystem::job_by_string_or_null()");
        return Has_proxy::jobject_of(o_->job_by_string_or_null(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jobject();
    }
}

}}}}}}}

const static JNINativeMethod native_methods[] = {
    { (char*)"job_by_string__native", (char*)"(JLjava/lang/String;)Lcom/sos/scheduler/kernel/core/cppproxy/JobC;", (void*)::javaproxy::com::sos::scheduler::kernel::core::cppproxy::job_1by_1string__Ljava_lang_String_2 },
    { (char*)"job_by_string_or_null__native", (char*)"(JLjava/lang/String;)Lcom/sos/scheduler/kernel/core/cppproxy/JobC;", (void*)::javaproxy::com::sos::scheduler::kernel::core::cppproxy::job_1by_1string_1or_1null__Ljava_lang_String_2 }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_proxy< ::sos::scheduler::Job_subsystem >::register_cpp_proxy_class_in_java() {
        Env env;
        Class* cls = has_proxy< ::sos::scheduler::Job_subsystem >::proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, 2);
        if (ret < 0)  env.throw_java("RegisterNatives");
    }

}}
