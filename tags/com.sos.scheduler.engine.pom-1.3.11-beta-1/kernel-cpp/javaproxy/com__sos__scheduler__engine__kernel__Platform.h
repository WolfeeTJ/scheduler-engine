// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#ifndef _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_PLATFORM_H_
#define _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_PLATFORM_H_

#include "java__lang__Object.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace cplusplus { namespace runtime { struct Sister; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace log { struct PrefixLog; }}}}}}}
namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}


namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { 


struct Platform__class;

struct Platform : ::zschimmer::javabridge::proxy_jobject< Platform >, ::javaproxy::java::lang::Object {
    static Platform new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::log::PrefixLog >& p0);

    Platform(jobject = NULL);

    Platform(const Platform&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Platform(Platform&&);
    #endif

    ~Platform();

    Platform& operator=(jobject jo) { assign_(jo); return *this; }
    Platform& operator=(const Platform& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Platform& operator=(Platform&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< Platform >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< Platform >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    ::javaproxy::com::sos::scheduler::engine::kernel::log::PrefixLog log();
    static ::javaproxy::com::sos::scheduler::engine::kernel::Platform of(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::cplusplus::runtime::Sister >& p0);

    ::zschimmer::javabridge::Class* java_object_class_();

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<Platform__class*> {
        void initialize();
    };

    Lazy_class _class;
};


}}}}}}

#endif
