// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__scripting__ScriptInstance.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace scripting { 

struct ScriptInstance__class : ::zschimmer::javabridge::Class
{
    ScriptInstance__class(const string& class_name);
   ~ScriptInstance__class();

    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _addObject__Ljava_lang_Object_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _call____method;
    ::zschimmer::javabridge::Method const _call__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _callBoolean__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _callDouble__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _callString__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _getLanguageId____method;
    ::zschimmer::javabridge::Method const _getObject__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _getSourcecode____method;
    ::zschimmer::javabridge::Method const _setSourceCode__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _setSourceFile__Ljava_lang_String_2__method;

    static const ::zschimmer::javabridge::class_factory< ScriptInstance__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< ScriptInstance__class > ScriptInstance__class::class_factory ("com.sos.scheduler.engine.kernel.scripting.ScriptInstance");

ScriptInstance__class::ScriptInstance__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor__Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;)V")
    ,_addObject__Ljava_lang_Object_2Ljava_lang_String_2__method(this, "addObject", "(Ljava/lang/Object;Ljava/lang/String;)V")
    ,_call____method(this, "call", "()Ljava/lang/Object;")
    ,_call__Ljava_lang_String_2__method(this, "call", "(Ljava/lang/String;)Ljava/lang/Object;")
    ,_callBoolean__Ljava_lang_String_2__method(this, "callBoolean", "(Ljava/lang/String;)Z")
    ,_callDouble__Ljava_lang_String_2__method(this, "callDouble", "(Ljava/lang/String;)D")
    ,_callString__Ljava_lang_String_2__method(this, "callString", "(Ljava/lang/String;)Ljava/lang/String;")
    ,_getLanguageId____method(this, "getLanguageId", "()Ljava/lang/String;")
    ,_getObject__Ljava_lang_String_2__method(this, "getObject", "(Ljava/lang/String;)Ljava/lang/Object;")
    ,_getSourcecode____method(this, "getSourcecode", "()Ljava/lang/String;")
    ,_setSourceCode__Ljava_lang_String_2__method(this, "setSourceCode", "(Ljava/lang/String;)V")
    ,_setSourceFile__Ljava_lang_String_2__method(this, "setSourceFile", "(Ljava/lang/String;)V"){}

ScriptInstance__class::~ScriptInstance__class() {}



ScriptInstance ScriptInstance::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ScriptInstance result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ScriptInstance__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}


ScriptInstance::ScriptInstance(jobject jo) { if (jo) assign_(jo); }

ScriptInstance::ScriptInstance(const ScriptInstance& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    ScriptInstance::ScriptInstance(ScriptInstance&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

ScriptInstance::~ScriptInstance() { assign_(NULL); }




void ScriptInstance::addObject(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    ScriptInstance__class* cls = _class.get();
    cls->_addObject__Ljava_lang_Object_2Ljava_lang_String_2__method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object ScriptInstance::call() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ScriptInstance__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_call____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object ScriptInstance::call(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ScriptInstance__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_call__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool ScriptInstance::callBoolean(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ScriptInstance__class* cls = _class.get();
    return 0 != cls->_callBoolean__Ljava_lang_String_2__method.bool_call(get_jobject(), parameter_list);
}

jdouble ScriptInstance::callDouble(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ScriptInstance__class* cls = _class.get();
    return cls->_callDouble__Ljava_lang_String_2__method.double_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String ScriptInstance::callString(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ScriptInstance__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_callString__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String ScriptInstance::getLanguageId() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ScriptInstance__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getLanguageId____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object ScriptInstance::getObject(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ScriptInstance__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_getObject__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String ScriptInstance::getSourcecode() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ScriptInstance__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getSourcecode____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

void ScriptInstance::setSourceCode(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ScriptInstance__class* cls = _class.get();
    cls->_setSourceCode__Ljava_lang_String_2__method.call(get_jobject(), parameter_list);
}

void ScriptInstance::setSourceFile(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ScriptInstance__class* cls = _class.get();
    cls->_setSourceFile__Ljava_lang_String_2__method.call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* ScriptInstance::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* ScriptInstance::java_class_() { return ScriptInstance__class::class_factory.clas(); }


void ScriptInstance::Lazy_class::initialize() {
    _value = ScriptInstance__class::class_factory.clas();
}


}}}}}}}
