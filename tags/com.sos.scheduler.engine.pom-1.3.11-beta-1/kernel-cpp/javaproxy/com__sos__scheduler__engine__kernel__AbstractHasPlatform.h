// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#ifndef _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_ABSTRACTHASPLATFORM_H_
#define _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_ABSTRACTHASPLATFORM_H_

#include "java__lang__Object.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace log { struct PrefixLog; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { struct Platform; }}}}}}
namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}


namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { 


struct AbstractHasPlatform__class;

struct AbstractHasPlatform : ::zschimmer::javabridge::proxy_jobject< AbstractHasPlatform >, ::javaproxy::java::lang::Object {
  private:
    static AbstractHasPlatform new_instance();  // Not implemented
  public:

    AbstractHasPlatform(jobject = NULL);

    AbstractHasPlatform(const AbstractHasPlatform&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        AbstractHasPlatform(AbstractHasPlatform&&);
    #endif

    ~AbstractHasPlatform();

    AbstractHasPlatform& operator=(jobject jo) { assign_(jo); return *this; }
    AbstractHasPlatform& operator=(const AbstractHasPlatform& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        AbstractHasPlatform& operator=(AbstractHasPlatform&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< AbstractHasPlatform >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< AbstractHasPlatform >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    ::javaproxy::com::sos::scheduler::engine::kernel::Platform getPlatform();
    ::javaproxy::com::sos::scheduler::engine::kernel::log::PrefixLog log();

    ::zschimmer::javabridge::Class* java_object_class_();

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<AbstractHasPlatform__class*> {
        void initialize();
    };

    Lazy_class _class;
};


}}}}}}

#endif
