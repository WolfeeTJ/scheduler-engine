// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#ifndef _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_UTIL_STRINGVALUE_H_
#define _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_UTIL_STRINGVALUE_H_

#include "java__lang__Object.h"

namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}


namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace util { 


struct StringValue__class;

struct StringValue : ::zschimmer::javabridge::proxy_jobject< StringValue >, ::javaproxy::java::lang::Object {
  private:
    static StringValue new_instance();  // Not implemented
  public:

    StringValue(jobject = NULL);

    StringValue(const StringValue&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        StringValue(StringValue&&);
    #endif

    ~StringValue();

    StringValue& operator=(jobject jo) { assign_(jo); return *this; }
    StringValue& operator=(const StringValue& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        StringValue& operator=(StringValue&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< StringValue >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< StringValue >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    bool equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0);
    jint hashCode();
    bool isEmpty();
    ::javaproxy::java::lang::String string();
    ::javaproxy::java::lang::String toString();

    ::zschimmer::javabridge::Class* java_object_class_();

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<StringValue__class*> {
        void initialize();
    };

    Lazy_class _class;
};


}}}}}}}

#endif
