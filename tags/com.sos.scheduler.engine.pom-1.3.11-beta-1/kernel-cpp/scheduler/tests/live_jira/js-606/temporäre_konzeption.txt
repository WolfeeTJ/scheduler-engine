


[@ ALT

* Shell-Script-Jobs
** Auftragsparameter im Shell-Skript werden unter dem Namen SCHEDULER_PARAM_<Auftrags-Parametername> verfügbar gemacht.\\
[@ z. B. ORDER_PARAM1 als %SCHEDULER_PARAM_ORDER_PARAM1% (Windows) @]
** Order::set_params: Übertragen Parameter aus XML in die Order, Wird von Order::set_dom aufgerufen.
** Process_module_instance::fill_process_environment_with_params() + Process_module_instance::begin__end(): Liest Order-Parameter und überträgt diese in das Prozeß-Environment und zwar mit Präfix SCHEDULER_PARAM_
** Lesen: [@ echo value of order_param1: %SCHEDULER_PARAM_ORDER_PARAM1% @]
** Schreiben: [@ echo order_param1=4444 >> %SCHEDULER_RETURN_VALUES% @]
* API-Jobs
** [[ http://www.sos-berlin.com/doc/de/scheduler.doc/xml/params.xml ]]
** Lesen: spooler_task.order.params.value("param1")
** Schreiben: spooler_task.order.params.value("param1") = "x"

@]



!!!! Vor Skriptstart: Auftragsparameter knotenspezifisch initialisieren

Bei Zuordnung des Auftrags zur Task des ersten Knotens werden die original Auftragsparameter im Auftrag in einem zweiten Auftragsparametersatz (Auftragsparameter-Kopie) gemerkt.
Oder im Auftragsparametersatz ist die Kopie zu speichern, da die Variablen direkt geändert werden muß der Parametersatz sein Original (vollqualifizierte Parameter) kennen.
Bei jedem Knoten werden die Auftragsparameter entsprechend des aktuellen Knotens neu initialisiert.
Für alle Parameternamen aus Auftragsparameter-Kopie
1. Alle knotenunabhängigen Parameter aus Auftragsparameter übernehmen
2. Alle knotenspezifischen Parameter aus Auftragsparameter übernehmen, ggf. vorhandene ersetzen

Damit lesen API-Jobs und Shell-Script-Jobs knotenspezifische Auftragsparameter.

[@ Order* Task::fetch_and_occupy_order( const Time& now, const string& cause ) @]

!!!! Vor Skriptende: Änderungen der Parameterwerte durch Skript in Auftragsparameter aktualisieren

Beim ändern von Parameter wird der Auftragsparametersatz aktualisiert. 
Wenn der Parametername ohne "/", dann 1. Suchen Parametername in knotenspezifischen Auftragsparameter, 2. Suchen in knotenunabhängigen Auftragsparameter, 3. Neuer Auftragsparameter


[@         // PROZESSE FORTSETZEN
        something_done |= _process_class_subsystem->async_continue(); @]
[@ void Connection::execute_callback( Session* session, Input_message* in, Output_message* out ) @]
[@ STDMETHODIMP Com_variable_set::put_Value( VARIANT* name, VARIANT* value ) @]
[@ string Task::remote_process_step__end(), _order->params()->merge( p ); @]
[@ bool Task::do_something(), process_module_instance->fetch_parameters_from_process( _order->params() ); @]


!!! ALT Notwendige Änderungen für Script-Jobs

* Lesen (Order => Script-Environment)
** Process_module_instance::fill_process_environment_with_params()
*** Parameter aus dem Auftragsobjekt entsprechend des aktuellen Jobs lesen, Parameternamen umsetzen und Environment-Variablen setzen. Übernehme alle Parameter ohne "/" im Namen. Übernehme alle Parameter mit "/" im Namen und erster Teil = Jobname. Der Environmentname = 2 Teil des Parameters. Die Reihenfolge ist: 1. Namen ohne "/", 2. Namen mit "/". Gleichnamige Parameter werden ersetzt.
* Schreiben (Script scheuler_return_values => Order)
** void Process_module_instance::fetch_parameters_from_process( Com_variable_set* params )
*** Änderungen für das Script: Die Parameter sind vollqualifiziert zu bennen. 
Jobspezifische Parameter, die einen anderen Job der Jobkette betreffen sind entsprechend zu benennen. 
*** Programmänderung: Env-Parameter ohne "/" werden, wenn sie in den Jobspez. vorhanden sind dort zurückgeschrieben, ansonsten in die Job-unabhägigen Parameter.


