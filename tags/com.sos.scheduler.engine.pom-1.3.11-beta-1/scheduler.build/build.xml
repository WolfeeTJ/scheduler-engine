<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="com.sos.scheduler.build" basedir="." default="noop">

	<import file="../scheduler.ant/targets.global.xml" />
	<property file="info.${ant.project.name}" />

	<!-- TODO
	Dokumentation der Konzepte und der buildfiles
	Ausgabe der Loggings in Dateien
	compile-script auf wilma anpassen
-->

	<!--
	Kompilierung:
	javaproxy: Quelldateien fehlen
	sos.spooler.jar: ist ein java-Projekt und braucht hier nicht übersetzt werden
	-->

	<property name="jdk.home" value="${java.home}" />
	<property name="scheduler.src" value="${personal.scheduler.devel.root}" />
	<property name="visualc.dir" value="${personal.windows.compiler}" />
	<property name="scheduler.schema" value="scheduler.xsd" />
	<property name="workdir" value="${scheduler.src}/scheduler" />

	<target name="noop">
		<echo>using personal settings for ${user.name}</echo>
		<echo>nothing done - please choose the desired target ...</echo>
	</target>

	<!-- ==================================================================================== -->
	<!-- Erzeugen einer Release-Version auf Basis der HEAD-Revision                           -->
	<!-- Im Dialog können eingegeben werden  (dia.release):                                   -->
	<!-- - major-, minor- und subversion des Projektes                                        -->
	<!-- Voraussetzungen:                                                                     -->
	<!-- svn.user, svn.password, svn.url.release                                              -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
	<!-- Dieses target überschreibt das gleichnamige Traget aus targets.global, weil hier  -  -->
	<!-- der Name dees Entwiclungsprojektes (prod) nicht mit dem im release veröffentlichten  -->
	<!-- Namen (scheduler) übereinstimmt.                                                     -->
	<!-- ==================================================================================== -->
	<target name="_release.to.repository"
	        description="creates a release version of a repository based on the head revision"
	        depends="-dia.release, -svn.revision.head.set"
	>
		<antcall target="-svn.release.create">
			<param name="svn.url.devel" value="${global.svn.devel}/prod" />
			<param name="svn.revision.version" value="${dia.in.version}" />
			<param name="svn.revision.no" value="${svn.revision.head}" />
			<param name="svn.project" value="scheduler" />
		</antcall>

	</target>

	<!-- ==================================================================================== -->
	<!-- lokale Arbeitskopie der release-Version erzeugen                                     -->
	<!-- ==================================================================================== -->
	<target name="remote.deploy.localworkingcopy"
	        description="create a local copy of the members to deploy"
	        depends="-svn.revision.head.set"
	        if="info.release.version"
	>

		<copy file="${personal.scheduler.devel.root}/bind/scheduler.exe"
		      tofile="${personal.scheduler.devel.root}/bind/scheduler_dll.exe"
		/>
		<fileset id="release.fileset.bind"
		         dir="${personal.scheduler.devel.root}"
		>
			<include name="bind/scheduler.dll" />
			<include name="bind/scheduler_dll.exe" />
			<include name="bin/scheduler.exe" />
			<include name="_jar/sos.spooler.jar" />
			<include name="scheduler/scheduler.xsd" />
			<include name="scheduler/RELEASE.TXT" />
		</fileset>

		<property name="release.local" value="${global.tempdir}/release" />
		<delete dir="${release.local}" />
		<mkdir dir="${release.local}" />
		<copy todir="${release.local}" overwrite="true" flatten="true">
			<fileset refid="release.fileset.bind" />
		</copy>
		<copy todir="${release.local}/doc/javadoc" overwrite="true">
			<fileset dir="${personal.scheduler.devel.root}/scheduler/doc/javadoc"
			/>
		</copy>
		<copy todir="${release.local}/doc"
		      overwrite="true"
		      includeemptydirs="false"
		>
			<fileset includes="*"
			         dir="${personal.scheduler.devel.root}/scheduler/doc"
			/>
		</copy>

		<tstamp>
			<format property="deploy.timestamp" pattern="yyyy-MM-dd hhmmss" />
		</tstamp>
		<touch file="${release.local}/${info.release.version}.${svn.revision.head} (${deploy.timestamp})"
		/>

	</target>

	<target name="_deploy.last.scheduler.release.to.monk"
	        description="deploy the release binaries to monk"
	        depends="remote.deploy.localworkingcopy"
	>

		<antcall target="-deploy.last.release.to.monk">
			<param name="deploy.project" value="scheduler" />
		</antcall>

	</target>

	<target name="-deploy.last.release.to.monk"
	        depends="remote.deploy.localworkingcopy"
	>

		<property file="info.${ant.project.name}" />
		<echo>timestamp=${info.release.folder}</echo>
		<antcall target="-scp.transfer.password">
			<param name="remote.localdir" value="${release.local}" />
			<param name="remote.remotedir" value="${remote.remotedir}/${deploy.project}/${info.release.folder}" />
			<param name="remote.umask" value="766" />
		</antcall>

	</target>

	<target name="prebuild.javadoc.sos.spooler.jar" description="javadoc">
		<property name="src"
		          value="${personal.scheduler.devel.root}/scheduler/sos/spooler"
		/>
		<javadoc sourcepath="${personal.scheduler.devel.root}/scheduler"
		         splitindex="true"
		         stylesheetfile="${personal.scheduler.devel.root}/scheduler/javadoc.css"
		         use="true"
		         version="true"
		         access="public"
		         author="true"
		         classpath="${personal.scheduler.devel.root}/bin"
		         destdir="${personal.scheduler.devel.root}/scheduler/doc/javadoc"
		         nodeprecated="false"
		         nodeprecatedlist="false"
		         noindex="false"
		         nonavbar="false"
		         notree="false"
		         sourcefiles="${src}/Error.java,
                         ${src}/Job.java,
                         ${src}/Job_chain.java,
                         ${src}/Job_chain_node.java,
                         ${src}/Job_impl.java,
                         ${src}/Lock.java,
                         ${src}/Locks.java,
                         ${src}/Log.java,
                         ${src}/Mail.java,
                         ${src}/Monitor_impl.java,
                         ${src}/Order.java,
                         ${src}/Order_queue.java,
                         ${src}/Process_class.java,
                         ${src}/Process_classes.java,
                         ${src}/Run_time.java,
                         ${src}/Schedule.java,
                         ${src}/Supervisor_client.java,
                         ${src}/Spooler.java,
                         ${src}/Spooler_program.java,
                         ${src}/Subprocess.java,
                         ${src}/Task.java,
                         ${src}/Variable_set.java,                         
                         ${src}/Web_service.java,
                         ${src}/Web_service_operation.java,
                         ${src}/Web_service_request.java,
                         ${src}/Web_service_response.java,
                         ${src}/Xslt_stylesheet.java"
		/>
	</target>

	<!-- ============ Targets für die Generierung =========================================== -->

	<target name="_generate.compile.targets"
	        description="führt alle Generierungs-Schritte durch"
	        depends="java.jar, generate.projectmap.to.xml, generate.debug.buildfile, generate.release.buildfile"
	/>

	<!--
     * /brief myMethod - myTitle
     * /detail myDescription
     * @author Stefan Schädlich
     * @param
     * @return nothing
     * @throws 
     */
	=======================================================================
	Erzeugt aus der Projektmappe scheduler.sln eine xml-Repsäsentation
	der Projektmappe (scheduler.xml).
	Das Ergebnis wird im gleichen Ordner abgelegt wie scheduler.sln
	=======================================================================
	-->
	<target name="generate.projectmap.to.xml"
	        description="generiert scheduler.xml"
	        depends="java.jar"
	>
		<echo>${global.echoline}</echo>
		<echo>converting the project map ${personal.scheduler.devel.root}/scheduler.sln in xml-format ...</echo>
		<echo>${global.echoline}</echo>
		<java classname="ProjectMap">
			<classpath>
				<pathelement path="conf" />
				<pathelement location="build/lib/com.sos.scheduler.build.jar" />
				<pathelement location="../_jars/log4j-1.2.16.jar" />
			</classpath>
			<arg file="${personal.scheduler.devel.root}/scheduler.sln" />
		</java>
	</target>

	<!--
	=======================================================================
	Generiert das buildfile für die debug-version des schedulers
	=======================================================================
	-->
	<target name="generate.debug.buildfile"
	        description="generiert scheduler.xml"
	>
		<antcall target="-generate.buildfile">
			<param name="scheduler.configuration" value="Debug" />
		</antcall>
	</target>

	<!--
	=======================================================================
	Generiert das buildfile für die release-version des schedulers
	=======================================================================
	-->
	<target name="generate.release.buildfile"
	        description="generiert das buidlfile für die release-Version des schedulers"
	>
		<antcall target="-generate.buildfile">
			<param name="scheduler.configuration" value="Release" />
		</antcall>
	</target>

	<!-- ============ Tasks für interne Zwecke (kein direkter Aufruf ============================ -->

	<!--
	=======================================================================
	generiert ant build files für die compilierung des schedulers
	=======================================================================
	-->
	<target name="-generate.buildfile"
	        if="scheduler.configuration"
	        depends="generate.projectmap.to.xml"
	>
		<echo>${global.echoline}</echo>
		<echo>generating buildfiles for configuration ${scheduler.configuration} ...</echo>
		<echo>personal.scheduler.devel.root = ${personal.scheduler.devel.root}</echo>
		<echo>personal.scheduler.devel.windows.compiler = ${personal.scheduler.devel.windows.compiler}</echo>
		<echo>java.home = ${java.home}</echo>
		<echo>${global.echoline}</echo>
		<xslt in="${personal.scheduler.devel.root}/scheduler_projectmap.xml"
		      out="build-${scheduler.configuration}.xml"
		      style="conf/vcproj2ant.xslt"
		      force="true"
		>
			<param name="P_CONFIGURATION"
			       expression="${scheduler.configuration}"
			/>
			<param name="P_SCHEDULER_ROOT"
			       expression="${personal.scheduler.devel.root}"
			/>
			<param name="P_VC_INSTALL_DIR"
			       expression="${personal.scheduler.devel.windows.compiler}"
			/>
			<param name="P_JAVA_HOME" expression="${java.home}" />
			<classpath location="../scheduler.ant/ext/saxon9he.jar" />
		</xslt>
	</target>

	<!-- ============ prebuild-tasks ============================================================== -->

	<target name="_prebuild.steps.scheduler"
	        description="führt alle prebuild-Schritte durch"
	        depends="prebuild.embedded.files,prebuild.keywords.to.register_data.xml,prebuild.javaproxy.classes,prebuild.javadoc.sos.spooler.jar"
	/>

	<!--
	=======================================================================
	Generiert die C++ Klassen scheduler_embedded_files.cxx und scheduler_embedded_files_z.cxx
	scheduler_embedded_files.cxx:   Array-Repräsentation von scheduler.xsd und log_categories.xml
	scheduler_embedded_files_z.cxx: (Bildressourcen u.a.) - prebuild von scheduler
	=======================================================================
	-->
	<target name="prebuild.embedded.files"
	        description="generiert scheduler_embedded_files.cxx und scheduler_embedded_files_z.cxx"
	>

		<echo>${global.echoline}</echo>
		<echo>generating cpp-classes scheduler_embedded_files...</echo>
		<echo>${global.echoline}</echo>

		<property name="output" value="${workdir}/spooler_embedded_files.cxx" />
		<echo message="generating ${output} ..." />
		<exec executable="perl" dir="${workdir}" output="${output}">
			<arg value="${perl.script.embeddedfiles}" />
			<arg value="-trim" />
			<arg value="${scheduler.schema}" />
			<arg value="doc.en/log_categories.xml" />
		</exec>

		<property name="output.z"
		          value="${workdir}/spooler_embedded_files_z.cxx"
		/>
		<echo message="generating ${output.z} ..." />
		<exec executable="perl" dir="${workdir}" output="${output.z}">
			<arg value="${perl.script.embeddedfiles}" />
			<arg value="-name=embedded_files_z" />
			<arg value="-gzip" />
			<arg value="html/favicon.ico" />
			<arg value="html/z/*.html" />
			<arg value="html/z/*.js" />
			<arg value="html/z/*.xslt" />
			<arg value="html/z/*.css" />
			<arg value="html/z/*.gif" />
			<arg value="html/z/*.jpg" />
			<arg value="${scheduler.schema}" />
		</exec>

	</target>

	<target name="prebuild.keywords.to.register_data.xml"
	        description="generiert register_data.xml"
	>
		<echo message="copy ${workdir}/scheduler.xsd ..." />
		<copy file="${workdir}/scheduler.xsd" todir="${workdir}/doc/xml" />

		<echo>${global.echoline}</echo>
		<echo>generating register-data.xml ...</echo>
		<echo>${global.echoline}</echo>

		<exec executable="bash" dir="${workdir}/doc">
			<arg value="-c" />
			<arg value="&quot;" />
			<arg value="perl" />
			<arg value="${perl.script.keywordtoxml}" />
			<arg value="*.xml" />
			<arg value="xml/*.xml" />
			<arg value="xml/answer/*.xml" />
			<arg value="api/*.xml" />
			<arg value="&quot;" />
		</exec>

	</target>

	<!--
	=======================================================================
	Generiert C++ Klassen für die Java-Anbindung des schedulers
	=======================================================================
	-->
	<target name="prebuild.javaproxy.classes"
	        description="c++ Klasseb für java bridge generieren"
	>
		<echo>${global.echoline}</echo>
		<echo>library for cpp-generator: ${global.javaproxy.jarfile}</echo>
		<echo>${global.echoline}</echo>

		<!-- Klassen für das scripting -->
		<java classname="${global.javaproxy.mainclass}">
			<classpath>
				<path>
					<pathelement path="${global.javaproxy.jarfile}" />
					<pathelement path="../scheduler.ant/ext/sos.spooler.jar" />
					<pathelement path="../scheduler.core/build/lib/com.sos.scheduler.core.jar"
					/>
				</path>
			</classpath>
			<arg value="-cpp-output-directory=${global.javaproxy.output.folder}" />
			<arg value="-java-output-directory=${global.cppproxy.output.folder}" />
			<!-- fileliste auslagern in eigene Datei -->
			<arg value="com.sos.scheduler.scripting.Module" />
			<arg value="com.sos.scheduler.eventing.SchedulerEventListener" />
			<arg value="com.sos.scheduler.core.Scheduler" />
			<arg value="com.sos.scheduler.core.cppproxy.SpoolerC" />
			<arg value="com.sos.scheduler.core.cppproxy.Job_subsystemC" />
			<arg value="com.sos.scheduler.core.cppproxy.JobC" />
			<arg value="com.sos.scheduler.core.cppproxy.Prefix_logC" />
		</java>
	</target>

	<target name="compile.debug"
	        description="compiles the debug version of the scheduler"
	>
		<ant antfile="build-Debug.xml"
		     target="compile.fs.debug"
		     output="compile.scheduler.debug.log"
		/>
	</target>

	<target name="compile.release"
	        description="compiles the release version of the scheduler"
	>
		<ant antfile="build-Release.xml"
		     target="compile.fs.release"
		     output="compile.scheduler.debug.log"
		/>
	</target>

</project>