// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__lang__String.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace java { namespace lang { 

struct String__class : ::zschimmer::javabridge::Class
{
    String__class(const string& class_name);
   ~String__class();

    ::zschimmer::javabridge::Method const __constructor____method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _charAt__I__method;
    ::zschimmer::javabridge::Method const _codePointAt__I__method;
    ::zschimmer::javabridge::Method const _codePointBefore__I__method;
    ::zschimmer::javabridge::Method const _codePointCount__II__method;
    ::zschimmer::javabridge::Method const _compareTo__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _compareTo__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _compareToIgnoreCase__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _concat__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _endsWith__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _equalsIgnoreCase__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Method const _indexOf__I__method;
    ::zschimmer::javabridge::Method const _indexOf__II__method;
    ::zschimmer::javabridge::Method const _indexOf__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _indexOf__Ljava_lang_String_2I__method;
    ::zschimmer::javabridge::Method const _intern____method;
    ::zschimmer::javabridge::Method const _isEmpty____method;
    ::zschimmer::javabridge::Method const _lastIndexOf__I__method;
    ::zschimmer::javabridge::Method const _lastIndexOf__II__method;
    ::zschimmer::javabridge::Method const _lastIndexOf__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _lastIndexOf__Ljava_lang_String_2I__method;
    ::zschimmer::javabridge::Method const _length____method;
    ::zschimmer::javabridge::Method const _matches__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _offsetByCodePoints__II__method;
    ::zschimmer::javabridge::Method const _regionMatches__ZILjava_lang_String_2II__method;
    ::zschimmer::javabridge::Method const _regionMatches__ILjava_lang_String_2II__method;
    ::zschimmer::javabridge::Method const _replace__CC__method;
    ::zschimmer::javabridge::Method const _replaceAll__Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _replaceFirst__Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _startsWith__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _startsWith__Ljava_lang_String_2I__method;
    ::zschimmer::javabridge::Method const _substring__I__method;
    ::zschimmer::javabridge::Method const _substring__II__method;
    ::zschimmer::javabridge::Method const _toLowerCase____method;
    ::zschimmer::javabridge::Method const _toString____method;
    ::zschimmer::javabridge::Method const _toUpperCase____method;
    ::zschimmer::javabridge::Method const _trim____method;
    ::zschimmer::javabridge::Static_method const _valueOf__Z__method;
    ::zschimmer::javabridge::Static_method const _valueOf__C__method;
    ::zschimmer::javabridge::Static_method const _valueOf__D__method;
    ::zschimmer::javabridge::Static_method const _valueOf__F__method;
    ::zschimmer::javabridge::Static_method const _valueOf__I__method;
    ::zschimmer::javabridge::Static_method const _valueOf__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Static_method const _valueOf__J__method;

    static const ::zschimmer::javabridge::class_factory< String__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< String__class > String__class::class_factory ("java.lang.String");

String__class::String__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor____method(this, "<init>", "()V")
    ,__constructor__Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;)V")
    ,_charAt__I__method(this, "charAt", "(I)C")
    ,_codePointAt__I__method(this, "codePointAt", "(I)I")
    ,_codePointBefore__I__method(this, "codePointBefore", "(I)I")
    ,_codePointCount__II__method(this, "codePointCount", "(II)I")
    ,_compareTo__Ljava_lang_Object_2__method(this, "compareTo", "(Ljava/lang/Object;)I")
    ,_compareTo__Ljava_lang_String_2__method(this, "compareTo", "(Ljava/lang/String;)I")
    ,_compareToIgnoreCase__Ljava_lang_String_2__method(this, "compareToIgnoreCase", "(Ljava/lang/String;)I")
    ,_concat__Ljava_lang_String_2__method(this, "concat", "(Ljava/lang/String;)Ljava/lang/String;")
    ,_endsWith__Ljava_lang_String_2__method(this, "endsWith", "(Ljava/lang/String;)Z")
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_equalsIgnoreCase__Ljava_lang_String_2__method(this, "equalsIgnoreCase", "(Ljava/lang/String;)Z")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_indexOf__I__method(this, "indexOf", "(I)I")
    ,_indexOf__II__method(this, "indexOf", "(II)I")
    ,_indexOf__Ljava_lang_String_2__method(this, "indexOf", "(Ljava/lang/String;)I")
    ,_indexOf__Ljava_lang_String_2I__method(this, "indexOf", "(Ljava/lang/String;I)I")
    ,_intern____method(this, "intern", "()Ljava/lang/String;")
    ,_isEmpty____method(this, "isEmpty", "()Z")
    ,_lastIndexOf__I__method(this, "lastIndexOf", "(I)I")
    ,_lastIndexOf__II__method(this, "lastIndexOf", "(II)I")
    ,_lastIndexOf__Ljava_lang_String_2__method(this, "lastIndexOf", "(Ljava/lang/String;)I")
    ,_lastIndexOf__Ljava_lang_String_2I__method(this, "lastIndexOf", "(Ljava/lang/String;I)I")
    ,_length____method(this, "length", "()I")
    ,_matches__Ljava_lang_String_2__method(this, "matches", "(Ljava/lang/String;)Z")
    ,_offsetByCodePoints__II__method(this, "offsetByCodePoints", "(II)I")
    ,_regionMatches__ZILjava_lang_String_2II__method(this, "regionMatches", "(ZILjava/lang/String;II)Z")
    ,_regionMatches__ILjava_lang_String_2II__method(this, "regionMatches", "(ILjava/lang/String;II)Z")
    ,_replace__CC__method(this, "replace", "(CC)Ljava/lang/String;")
    ,_replaceAll__Ljava_lang_String_2Ljava_lang_String_2__method(this, "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")
    ,_replaceFirst__Ljava_lang_String_2Ljava_lang_String_2__method(this, "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")
    ,_startsWith__Ljava_lang_String_2__method(this, "startsWith", "(Ljava/lang/String;)Z")
    ,_startsWith__Ljava_lang_String_2I__method(this, "startsWith", "(Ljava/lang/String;I)Z")
    ,_substring__I__method(this, "substring", "(I)Ljava/lang/String;")
    ,_substring__II__method(this, "substring", "(II)Ljava/lang/String;")
    ,_toLowerCase____method(this, "toLowerCase", "()Ljava/lang/String;")
    ,_toString____method(this, "toString", "()Ljava/lang/String;")
    ,_toUpperCase____method(this, "toUpperCase", "()Ljava/lang/String;")
    ,_trim____method(this, "trim", "()Ljava/lang/String;")
    ,_valueOf__Z__method(this, "valueOf", "(Z)Ljava/lang/String;")
    ,_valueOf__C__method(this, "valueOf", "(C)Ljava/lang/String;")
    ,_valueOf__D__method(this, "valueOf", "(D)Ljava/lang/String;")
    ,_valueOf__F__method(this, "valueOf", "(F)Ljava/lang/String;")
    ,_valueOf__I__method(this, "valueOf", "(I)Ljava/lang/String;")
    ,_valueOf__Ljava_lang_Object_2__method(this, "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;")
    ,_valueOf__J__method(this, "valueOf", "(J)Ljava/lang/String;"){}

String__class::~String__class() {}



String String::new_instance() {
    String result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    String__class* cls = result._class.get();
    cls->__constructor____method.call(result.get_jobject(), parameter_list);
    return result;
}

String String::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    String result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}


String::String(jobject jo) { if (jo) assign_(jo); }

String::String(const char* s) { assign_(::zschimmer::javabridge::Env().jstring_from_string(s)); }
String::String(const string& s) { assign_(::zschimmer::javabridge::Env().jstring_from_string(s)); }

String::operator string() const { return ::zschimmer::javabridge::Env().string_from_jstring( (jstring)get_jobject() ); }

String::String(const String& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    String::String(String&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

String::~String() { assign_(NULL); }




wchar_t String::charAt(jint p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    String__class* cls = _class.get();
    return cls->_charAt__I__method.char_call(get_jobject(), parameter_list);
}

jint String::codePointAt(jint p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    String__class* cls = _class.get();
    return cls->_codePointAt__I__method.int_call(get_jobject(), parameter_list);
}

jint String::codePointBefore(jint p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    String__class* cls = _class.get();
    return cls->_codePointBefore__I__method.int_call(get_jobject(), parameter_list);
}

jint String::codePointCount(jint p0, jint p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    String__class* cls = _class.get();
    return cls->_codePointCount__II__method.int_call(get_jobject(), parameter_list);
}

jint String::compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = _class.get();
    return cls->_compareTo__Ljava_lang_Object_2__method.int_call(get_jobject(), parameter_list);
}

jint String::compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = _class.get();
    return cls->_compareTo__Ljava_lang_String_2__method.int_call(get_jobject(), parameter_list);
}

jint String::compareToIgnoreCase(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = _class.get();
    return cls->_compareToIgnoreCase__Ljava_lang_String_2__method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String String::concat(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_concat__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool String::endsWith(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = _class.get();
    return 0 != cls->_endsWith__Ljava_lang_String_2__method.bool_call(get_jobject(), parameter_list);
}

bool String::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

bool String::equalsIgnoreCase(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = _class.get();
    return 0 != cls->_equalsIgnoreCase__Ljava_lang_String_2__method.bool_call(get_jobject(), parameter_list);
}

jint String::hashCode() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    String__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

jint String::indexOf(jint p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    String__class* cls = _class.get();
    return cls->_indexOf__I__method.int_call(get_jobject(), parameter_list);
}

jint String::indexOf(jint p0, jint p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    String__class* cls = _class.get();
    return cls->_indexOf__II__method.int_call(get_jobject(), parameter_list);
}

jint String::indexOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = _class.get();
    return cls->_indexOf__Ljava_lang_String_2__method.int_call(get_jobject(), parameter_list);
}

jint String::indexOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, jint p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].i = p1;
    String__class* cls = _class.get();
    return cls->_indexOf__Ljava_lang_String_2I__method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String String::intern() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    String__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_intern____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool String::isEmpty() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    String__class* cls = _class.get();
    return 0 != cls->_isEmpty____method.bool_call(get_jobject(), parameter_list);
}

jint String::lastIndexOf(jint p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    String__class* cls = _class.get();
    return cls->_lastIndexOf__I__method.int_call(get_jobject(), parameter_list);
}

jint String::lastIndexOf(jint p0, jint p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    String__class* cls = _class.get();
    return cls->_lastIndexOf__II__method.int_call(get_jobject(), parameter_list);
}

jint String::lastIndexOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = _class.get();
    return cls->_lastIndexOf__Ljava_lang_String_2__method.int_call(get_jobject(), parameter_list);
}

jint String::lastIndexOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, jint p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].i = p1;
    String__class* cls = _class.get();
    return cls->_lastIndexOf__Ljava_lang_String_2I__method.int_call(get_jobject(), parameter_list);
}

jint String::length() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    String__class* cls = _class.get();
    return cls->_length____method.int_call(get_jobject(), parameter_list);
}

bool String::matches(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = _class.get();
    return 0 != cls->_matches__Ljava_lang_String_2__method.bool_call(get_jobject(), parameter_list);
}

jint String::offsetByCodePoints(jint p0, jint p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    String__class* cls = _class.get();
    return cls->_offsetByCodePoints__II__method.int_call(get_jobject(), parameter_list);
}

bool String::regionMatches(jboolean p0, jint p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2, jint p3, jint p4) {
    ::zschimmer::javabridge::raw_parameter_list<5> parameter_list;
    parameter_list._jvalues[0].z = p0;
    parameter_list._jvalues[1].i = p1;
    parameter_list._jvalues[2].l = p2.get_jobject();
    parameter_list._jvalues[3].i = p3;
    parameter_list._jvalues[4].i = p4;
    String__class* cls = _class.get();
    return 0 != cls->_regionMatches__ZILjava_lang_String_2II__method.bool_call(get_jobject(), parameter_list);
}

bool String::regionMatches(jint p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, jint p2, jint p3) {
    ::zschimmer::javabridge::raw_parameter_list<4> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].i = p2;
    parameter_list._jvalues[3].i = p3;
    String__class* cls = _class.get();
    return 0 != cls->_regionMatches__ILjava_lang_String_2II__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String String::replace(jchar p0, jchar p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].c = p0;
    parameter_list._jvalues[1].c = p1;
    String__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_replace__CC__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::replaceAll(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    String__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_replaceAll__Ljava_lang_String_2Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::replaceFirst(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    String__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_replaceFirst__Ljava_lang_String_2Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool String::startsWith(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = _class.get();
    return 0 != cls->_startsWith__Ljava_lang_String_2__method.bool_call(get_jobject(), parameter_list);
}

bool String::startsWith(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, jint p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].i = p1;
    String__class* cls = _class.get();
    return 0 != cls->_startsWith__Ljava_lang_String_2I__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String String::substring(jint p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    String__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_substring__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::substring(jint p0, jint p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    String__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_substring__II__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::toLowerCase() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    String__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toLowerCase____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::toString() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    String__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::toUpperCase() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    String__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toUpperCase____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::trim() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    String__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_trim____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::valueOf(jboolean p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].z = p0;
    String__class* cls = String__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_valueOf__Z__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::valueOf(jchar p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].c = p0;
    String__class* cls = String__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_valueOf__C__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::valueOf(jdouble p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].d = p0;
    String__class* cls = String__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_valueOf__D__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::valueOf(jfloat p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].f = p0;
    String__class* cls = String__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_valueOf__F__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::valueOf(jint p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    String__class* cls = String__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_valueOf__I__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::valueOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    String__class* cls = String__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_valueOf__Ljava_lang_Object_2__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::lang::String String::valueOf(jlong p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].j = p0;
    String__class* cls = String__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_valueOf__J__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* String::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* String::java_class_() { return String__class::class_factory.clas(); }


void String::Lazy_class::initialize() {
    _value = String__class::class_factory.clas();
}


}}}
