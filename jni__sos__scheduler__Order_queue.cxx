// *** Generated by com.sos.scheduler.kernel.cplusplus.generator ***
#include "spooler.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Proxy_class> has_proxy< ::sos::scheduler::Order_queue >::proxy_class_factory("com.sos.scheduler.kernel.core.cppproxy.Order_queueCImpl");

}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace kernel { namespace core { namespace cppproxy { 

static void JNICALL close(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_proxy< ::sos::scheduler::Order_queue >::of_proxys_cpp_reference(cppReference)->close());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace kernel { namespace core { namespace cppproxy { 

static jstring JNICALL obj_1name(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_proxy< ::sos::scheduler::Order_queue >::of_proxys_cpp_reference(cppReference)->obj_name());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace kernel { namespace core { namespace cppproxy { 

static jboolean JNICALL is_1distributed_1order_1requested__J(JNIEnv* jenv, jobject, jlong cppReference, jlong p0)
{
    Env env = jenv;
    try {
        return (has_proxy< ::sos::scheduler::Order_queue >::of_proxys_cpp_reference(cppReference)->is_distributed_order_requested(p0));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

}}}}}}}

const static JNINativeMethod native_methods[] = {
{ "close__native", "(J)V", (void*)::javaproxy::com::sos::scheduler::kernel::core::cppproxy::close },
{ "obj_name__native", "(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::kernel::core::cppproxy::obj_1name },
{ "is_distributed_order_requested__native", "(JJ)Z", (void*)::javaproxy::com::sos::scheduler::kernel::core::cppproxy::is_1distributed_1order_1requested__J }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_proxy< ::sos::scheduler::Order_queue>::register_cpp_proxy_class_in_java() {
        Env env;
        Class* cls = ::sos::scheduler::Order_queue::proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, NO_OF(native_methods));
        if (ret < 0)  env.throw_java("RegisterNatives");
    }

}}
