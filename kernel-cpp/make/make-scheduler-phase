#! /bin/bash

# Die Umgebungsvariable VISUAL_STUDIO_2008_HOME muss den Installationpfad von Visual Studio 2008 enthalten.
# set VISUAL_STUDIO_2008_HOME=c:\Program Files (x86)\Microsoft\Visual Studio 9.0
#
# Wenn Visual Studio 2010 verwendet werden soll (bis Ende 2011 nicht für offizielle Freigaben, weil Windows 2000 noch unterstützt werden soll),
# dann SCHEDULER_VISUAL_STUDIO_VERSION=10 und WINDOWS_NET_SDK_HOME auf das Installationsverzeichnis vom Windows-SDK (.Net-SDK) setzen, z.B.:
# set SCHEDULER_VISUAL_STUDIO_VERSION=10
# set WINDOWS_NET_SDK_HOME=%windir%\Microsoft.NET\Framework\v4.0.30319

cmd="$1"
if [ -z "$cmd" ]; then
    echo Missing command argument: clean or compile
    exit 1
fi

inWindows=$(if [ `uname -o` == "Cygwin" ]; then echo 1; else echo ""; fi)
vcbuild=""
msbuild=""

if [ "${PWD/ /_}" != "$PWD" ]; then echo "Der Verzeichnispfad darf kein Blank enthalten (vielleicht ist es ein Jenkins-Job mit Blank im Namen?)"; exit 1; fi


if [ -z "$MAKE_JOBS" ]; then :
    MAKE_JOBS=`cat /proc/cpuinfo | grep -w '^processor'|wc -l`
    [ $MAKE_JOBS -le 0 ]  &&  MAKE_JOBS=1
    [ $MAKE_JOBS -gt 8 ]  &&  MAKE_JOBS=8
    export MAKE_JOBS
fi

if [ $inWindows ]; then \
    if [ "$SCHEDULER_VISUAL_STUDIO_VERSION" == "9" ]; then :
        # Sobald wir nicht mehr für Windows 2000 compilieren müssen, können wir Visual Studio 2010 nutzen.
        if test -z "${VISUAL_STUDIO_2008_HOME}"; then :
            echo 'ERROR: Missing environment variable VISUAL_STUDIO_2008_HOME with installation directory of Visual Studio 2008 (for example "c:\Program Files\Microsoft\Visual Studio 9.0")'
            exit 1
        fi
        vcbuild=$(cygpath "${VISUAL_STUDIO_2008_HOME}")/VC/vcpackages/vcbuild.exe
        echo Using Visual Studio 2008
        if [ ! -f "$vcbuild" ]; then 
            echo "Missing vcbuild.exe: $vcbuild"
            exit 1
        fi
    else :
        if [ -z "${WINDOWS_NET_SDK_HOME}" ]; then :
            echo 'ERROR: Missing environment variable WINDOWS_NET_SDK_HOME with installation directory of Windows SDK and msbuild.exe (for example "%windir%\Microsoft.NET\Framework\v4.0.30319")'
            exit 1
        fi
        msbuild=$(cygpath "${WINDOWS_NET_SDK_HOME}")/msbuild.exe
        echo 'Using Visual Studio 2010 (not for release in 2011, Scheduler is not runnable on Windows 2000)'
        if [ ! -f "$msbuild" ]; then 
            echo "Missing msbuild.exe: $msbuild"
            exit 1
        fi
    fi
fi

#--------------------------------------------------------------------------------------------------

function main() {
    os=`uname -o`  || exit
    [ "$os" == 'Cygwin' ] && os="windows"
    [ "$os" == 'GNU/Linux' ] && os="linux"
    cmd_generic_${cmd}
    cmd_${os}_${cmd}   || exit
}

#-------------------------------------------------------------------------------------------Generic

function cmd_generic_clean() {
    :
}

function cmd_generic_compile() {
    :
}

#-------------------------------------------------------------------------------------------Windows

function cmd_windows_clean() {
    cmd_windows_cleanWithRm  || exit
    visualStudio_clean scheduler  || exit
    visualStudio_clean spidermonkey  || exit
}

function cmd_windows_cleanWithRm() {
    # Weil "vcbuild.exe /clean" nicht immer löschen kann (Fehlermeldung PRJ0008), siehe http://msdn.microsoft.com/en-us/library/hk8k8k4h%28v=vs.80%29.aspx
    searchAndDestroySubDirectory Release  || exit
    searchAndDestroySubDirectory Debug  || exit
    rm -rf {bin,bind,ipch}/*  || exit
}

function cmd_windows_compile() {
    visualStudio_compile scheduler  || exit
    visualStudio_compile spidermonkey  || exit
}

#function cmd_windows_generateSources() {
#    mkdir -p target/cpp  || exit
#    cat mavenSettings.h | sed /'${project.version}'/
#}

function visualStudio_clean() {
    package=$1
    if [ -n "$vcbuild" ]; then vcbuild /clean $package.sln  || exit; fi
    if [ -n "$msbuild" ]; then msbuild /target:clean $package-vs2010.sln  || exit; fi
}

function visualStudio_compile() {
    package=$1
    if [ -n "$vcbuild" ]; then  vcbuild $package.sln  || exit; fi
    if [ -n "$msbuild" ]; then  msbuild $package-vs2010.sln  || exit; fi
}

function msbuild() {
    # Zuerst Release bauen, weil Debug auf release/spooler.tlb zurückgreift. Sonst: spooler.rc(6): error RC2135: file not found: release\spooler.tlb [C:\sos\scheduler\engine\kernel-cpp\scheduler\scheduler_main.vcxproj]
    for c in Release Debug; do :
        "$msbuild" /m:$NUMBER_OF_PROCESSORS /property:Configuration=$c $* || exit
    done
}

function vcbuild() {
    # Zuerst Release bauen, weil Debug auf release/spooler.tlb zurückgreift. Sonst: spooler.rc(6): error RC2135: file not found: release\spooler.tlb [C:\sos\scheduler\engine\kernel-cpp\scheduler\scheduler_main.vcxproj]
    for c in "Release|Win32" "Debug|Win32"; do :
        "$vcbuild" /M$NUMBER_OF_PROCESSORS $* "$c" || exit
    done
}

#---------------------------------------------------------------------------------------------Linux

function cmd_linux_clean() {
    make clean  || exit
}

function cmd_linux_compile() {
    make scheduler spidermonkey  || exit
}

function searchAndDestroySubDirectory() {
    subDirName="$1"
    PATH=/bin find -type d -and -name "$subDirName" -execdir sh -c "rm -rf {}/*" \;
}

#--------------------------------------------------------------------------------------------------

main
