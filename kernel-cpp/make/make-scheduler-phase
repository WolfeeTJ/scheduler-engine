#! /bin/bash

# Die Umgebungsvariable VISUAL_STUDIO_2008_HOME muss den Installationpfad von Visual Studio 2008 enthalten.
# set VISUAL_STUDIO_2008_HOME=c:\Program Files (x86)\Microsoft\Visual Studio 9.0
#
# Wenn Visual Studio 2010 verwendet werden soll (bis Ende 2011 nicht für offizielle Freigaben, weil Windows 2000 noch unterstützt werden soll),
# dann SCHEDULER_VISUAL_STUDIO_VERSION=10 und WINDOWS_NET_SDK_HOME auf das Installationsverzeichnis vom Windows-SDK (.Net-SDK) setzen, z.B.:
# set SCHEDULER_VISUAL_STUDIO_VERSION=10
# set WINDOWS_NET_SDK_HOME=%windir%\Microsoft.NET\Framework\v4.0.30319

cmd="$1"
if [ -z "$cmd" ]; then
    echo Missing command argument: clean or compile
    exit 1
fi

inWindows=$(if [ `uname -o` == "Cygwin" ]; then echo 1; else echo ""; fi)
vcbuild=""
msbuild=""

if [ $inWindows ]; then \
    if [ "$SCHEDULER_VISUAL_STUDIO_VERSION" == "10" ]; then :
        if [ -z "${WINDOWS_NET_SDK_HOME}" ]; then :
            echo 'ERROR: Missing environment variable WINDOWS_NET_SDK_HOME with installation directory of Windows SDK and msbuild.exe (for example "%windir%\Microsoft.NET\Framework\v4.0.30319")'
            exit 1
        fi
        msbuild=$(cygpath "${WINDOWS_NET_SDK_HOME}")/msbuild.exe
        echo 'Compiling with Visual Studio 2010 (not for release in 2011, Scheduler is not runnable on Windows 2000)'
        if [ ! -f "$msbuild" ]; then 
            echo "Missing msbuild.exe: $msbuild"
            exit 1
        fi
    else :
        # Sobald wir nicht mehr für Windows 2000 compilieren müssen, können wir Visual Studio 2010 nutzen.
        if test -z "${VISUAL_STUDIO_2008_HOME}"; then :
            echo 'ERROR: Missing environment variable VISUAL_STUDIO_2008_HOME with installation directory of Visual Studio 2008 (for example "c:\Program Files\Microsoft\Visual Studio 9.0")'
            exit 1
        fi
        vcbuild=$(cygpath "${VISUAL_STUDIO_2008_HOME}")/VC/vcpackages/vcbuild.exe
        echo Compiling with Visual Studio 2008
        if [ ! -f "$vcbuild" ]; then 
            echo "Missing vcbuild.exe: $vcbuild"
            exit 1
        fi
    fi
fi

#--------------------------------------------------------------------------------------------------

function main() {
    os=`uname -o`  || exit
    [ "$os" == 'GNU/Linux' ] && os="Linux" 
    cmd_${os}_${cmd}   || exit
}

#-------------------------------------------------------------------------------------------Windows

function cmd_Cygwin_clean() {
    cmd_Cygwin_cleanWithRm
    visualStudio_clean
}

function cmd_Cygwin_cleanWithRm() {
    # Weil "vcbuild.exe /clean" nicht immer löschen kann (Fehlermeldung PRJ0008), siehe http://msdn.microsoft.com/en-us/library/hk8k8k4h%28v=vs.80%29.aspx
    searchAndDestroySubDirectory Release
    searchAndDestroySubDirectory Debug
    rm -rf {bin,bind,ipch}/*
}

function cmd_Cygwin_compile() {
    visualStudio_compile
}

function visualStudio_clean() {
    [ -n "$vcbuild" ]  &&  "$vcbuild" /clean scheduler.sln  &&  "$vcbuild" /clean scheduler.sln
    [ -n "$msbuild" ]  &&  msbuild /target:clean scheduler-vs2010.sln
}

function visualStudio_compile() {
    [ -n "$vcbuild" ]  &&  "$vcbuild" scheduler.sln
    [ -n "$msbuild" ]  &&  msbuild scheduler-vs2010.sln
}

function msbuild() {
    # Zuerst Release bauen, weil Debug auf release/spooler.tlb zurückgreift. Sonst: spooler.rc(6): error RC2135: file not found: release\spooler.tlb [C:\sos\scheduler\engine\kernel-cpp\prod\scheduler\scheduler_main.vcxproj]
    for c in Release Debug; do :
        "$msbuild" /property:Configuration=$c $*
    done
}

#---------------------------------------------------------------------------------------------Linux

function cmd_Linux_clean() {
    # Nicht getestet! Verwendet sos-release auch das Verzeichnis Release? Sollte nicht gelöscht werden.
    #searchAndDestroySubDirectory Release
    #searchAndDestroySubDirectory Debug
    #rm -rf bin/*
    #rm -rf bind/*
    make clean  || exit
}

function cmd_Linux_compile() {
    # Nicht getestet!
    make/generate-revision.h   || exit
    make scheduler
}

function searchAndDestroySubDirectory() {
    subDirName="$1"
    PATH=/bin find -type d -and -name "$subDirName" -execdir sh -c "rm -rf {}/*" \;
}

#--------------------------------------------------------------------------------------------------

main
