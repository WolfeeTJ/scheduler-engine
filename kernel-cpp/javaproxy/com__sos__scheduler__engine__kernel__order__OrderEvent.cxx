// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__order__OrderEvent.h"
#include "com__sos__scheduler__engine__kernel__order__GenericOrderEvent.h"
#include "com__sos__scheduler__engine__kernel__order__UnmodifiableOrder.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace order { 

struct OrderEvent__class : ::zschimmer::javabridge::Class
{
    OrderEvent__class(const string& class_name);
   ~OrderEvent__class();

    ::zschimmer::javabridge::Method const __constructor__Lcom_sos_scheduler_engine_kernel_order_UnmodifiableOrder_2__method;

    static const ::zschimmer::javabridge::class_factory< OrderEvent__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< OrderEvent__class > OrderEvent__class::class_factory ("com.sos.scheduler.engine.kernel.order.OrderEvent");

OrderEvent__class::OrderEvent__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor__Lcom_sos_scheduler_engine_kernel_order_UnmodifiableOrder_2__method(this, "<init>", "(Lcom/sos/scheduler/engine/kernel/order/UnmodifiableOrder;)V"){}

OrderEvent__class::~OrderEvent__class() {}



OrderEvent OrderEvent::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::order::UnmodifiableOrder >& p0) {
    OrderEvent result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    OrderEvent__class* cls = result._class.get();
    cls->__constructor__Lcom_sos_scheduler_engine_kernel_order_UnmodifiableOrder_2__method.call(result.get_jobject(), parameter_list);
    return result;
}


OrderEvent::OrderEvent(jobject jo) { if (jo) assign_(jo); }

OrderEvent::OrderEvent(const OrderEvent& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    OrderEvent::OrderEvent(OrderEvent&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

OrderEvent::~OrderEvent() { assign_(NULL); }





::zschimmer::javabridge::Class* OrderEvent::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* OrderEvent::java_class_() { return OrderEvent__class::class_factory.clas(); }


void OrderEvent::Lazy_class::initialize() {
    _value = OrderEvent__class::class_factory.clas();
}


}}}}}}}
