// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__net__URL.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "java__net__URI.h"

namespace javaproxy { namespace java { namespace net { 

struct URL__class : ::zschimmer::javabridge::Class
{
    URL__class(const string& class_name);
   ~URL__class();

    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2Ljava_lang_String_2ILjava_lang_String_2__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_net_URL_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _getAuthority____method;
    ::zschimmer::javabridge::Method const _getContent____method;
    ::zschimmer::javabridge::Method const _getDefaultPort____method;
    ::zschimmer::javabridge::Method const _getFile____method;
    ::zschimmer::javabridge::Method const _getHost____method;
    ::zschimmer::javabridge::Method const _getPath____method;
    ::zschimmer::javabridge::Method const _getPort____method;
    ::zschimmer::javabridge::Method const _getProtocol____method;
    ::zschimmer::javabridge::Method const _getQuery____method;
    ::zschimmer::javabridge::Method const _getRef____method;
    ::zschimmer::javabridge::Method const _getUserInfo____method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Method const _sameFile__Ljava_net_URL_2__method;
    ::zschimmer::javabridge::Method const _toExternalForm____method;
    ::zschimmer::javabridge::Method const _toString____method;
    ::zschimmer::javabridge::Method const _toURI____method;

    static const ::zschimmer::javabridge::class_factory< URL__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< URL__class > URL__class::class_factory ("java.net.URL");

URL__class::URL__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor__Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;)V")
    ,__constructor__Ljava_lang_String_2Ljava_lang_String_2ILjava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V")
    ,__constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V")
    ,__constructor__Ljava_net_URL_2Ljava_lang_String_2__method(this, "<init>", "(Ljava/net/URL;Ljava/lang/String;)V")
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_getAuthority____method(this, "getAuthority", "()Ljava/lang/String;")
    ,_getContent____method(this, "getContent", "()Ljava/lang/Object;")
    ,_getDefaultPort____method(this, "getDefaultPort", "()I")
    ,_getFile____method(this, "getFile", "()Ljava/lang/String;")
    ,_getHost____method(this, "getHost", "()Ljava/lang/String;")
    ,_getPath____method(this, "getPath", "()Ljava/lang/String;")
    ,_getPort____method(this, "getPort", "()I")
    ,_getProtocol____method(this, "getProtocol", "()Ljava/lang/String;")
    ,_getQuery____method(this, "getQuery", "()Ljava/lang/String;")
    ,_getRef____method(this, "getRef", "()Ljava/lang/String;")
    ,_getUserInfo____method(this, "getUserInfo", "()Ljava/lang/String;")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_sameFile__Ljava_net_URL_2__method(this, "sameFile", "(Ljava/net/URL;)Z")
    ,_toExternalForm____method(this, "toExternalForm", "()Ljava/lang/String;")
    ,_toString____method(this, "toString", "()Ljava/lang/String;")
    ,_toURI____method(this, "toURI", "()Ljava/net/URI;"){}

URL__class::~URL__class() {}



URL URL::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    URL result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    URL__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}

URL URL::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, jint p2, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p3) {
    URL result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<4> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].i = p2;
    parameter_list._jvalues[3].l = p3.get_jobject();
    URL__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2Ljava_lang_String_2ILjava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}

URL URL::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2) {
    URL result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<3> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].l = p2.get_jobject();
    URL__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}

URL URL::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URL >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) {
    URL result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    URL__class* cls = result._class.get();
    cls->__constructor__Ljava_net_URL_2Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}


URL::URL(jobject jo) { if (jo) assign_(jo); }

URL::URL(const URL& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    URL::URL(URL&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

URL::~URL() { assign_(NULL); }




bool URL::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    URL__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String URL::getAuthority() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getAuthority____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object URL::getContent() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_getContent____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint URL::getDefaultPort() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    return cls->_getDefaultPort____method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String URL::getFile() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getFile____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URL::getHost() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getHost____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URL::getPath() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getPath____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint URL::getPort() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    return cls->_getPort____method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String URL::getProtocol() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getProtocol____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URL::getQuery() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getQuery____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URL::getRef() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getRef____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URL::getUserInfo() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getUserInfo____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint URL::hashCode() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

bool URL::sameFile(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URL >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    URL__class* cls = _class.get();
    return 0 != cls->_sameFile__Ljava_net_URL_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String URL::toExternalForm() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toExternalForm____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URL::toString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::net::URI URL::toURI() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URL__class* cls = _class.get();
    ::javaproxy::java::net::URI result;
    result.steal_local_ref(cls->_toURI____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* URL::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* URL::java_class_() { return URL__class::class_factory.clas(); }


void URL::Lazy_class::initialize() const {
    _value = URL__class::class_factory.clas();
}


}}}
