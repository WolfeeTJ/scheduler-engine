// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__io__File.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "java__net__URI.h"
#include "java__net__URL.h"

namespace javaproxy { namespace java { namespace io { 

struct File__class : ::zschimmer::javabridge::Class
{
    File__class(const string& class_name);
   ~File__class();

    ::zschimmer::javabridge::Method const __constructor__Ljava_io_File_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_net_URI_2__method;
    ::zschimmer::javabridge::Method const _canExecute____method;
    ::zschimmer::javabridge::Method const _canRead____method;
    ::zschimmer::javabridge::Method const _canWrite____method;
    ::zschimmer::javabridge::Method const _compareTo__Ljava_io_File_2__method;
    ::zschimmer::javabridge::Method const _compareTo__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _createNewFile____method;
    ::zschimmer::javabridge::Static_method const _createTempFile__Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Static_method const _createTempFile__Ljava_lang_String_2Ljava_lang_String_2Ljava_io_File_2__method;
    ::zschimmer::javabridge::Method const _delete_1____method;
    ::zschimmer::javabridge::Method const _deleteOnExit____method;
    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _exists____method;
    ::zschimmer::javabridge::Method const _getAbsoluteFile____method;
    ::zschimmer::javabridge::Method const _getAbsolutePath____method;
    ::zschimmer::javabridge::Method const _getCanonicalFile____method;
    ::zschimmer::javabridge::Method const _getCanonicalPath____method;
    ::zschimmer::javabridge::Method const _getFreeSpace____method;
    ::zschimmer::javabridge::Method const _getName____method;
    ::zschimmer::javabridge::Method const _getParent____method;
    ::zschimmer::javabridge::Method const _getParentFile____method;
    ::zschimmer::javabridge::Method const _getPath____method;
    ::zschimmer::javabridge::Method const _getTotalSpace____method;
    ::zschimmer::javabridge::Method const _getUsableSpace____method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Method const _isAbsolute____method;
    ::zschimmer::javabridge::Method const _isDirectory____method;
    ::zschimmer::javabridge::Method const _isFile____method;
    ::zschimmer::javabridge::Method const _isHidden____method;
    ::zschimmer::javabridge::Method const _lastModified____method;
    ::zschimmer::javabridge::Method const _length____method;
    ::zschimmer::javabridge::Method const _mkdir____method;
    ::zschimmer::javabridge::Method const _mkdirs____method;
    ::zschimmer::javabridge::Method const _renameTo__Ljava_io_File_2__method;
    ::zschimmer::javabridge::Method const _setExecutable__Z__method;
    ::zschimmer::javabridge::Method const _setExecutable__ZZ__method;
    ::zschimmer::javabridge::Method const _setLastModified__J__method;
    ::zschimmer::javabridge::Method const _setReadOnly____method;
    ::zschimmer::javabridge::Method const _setReadable__Z__method;
    ::zschimmer::javabridge::Method const _setReadable__ZZ__method;
    ::zschimmer::javabridge::Method const _setWritable__Z__method;
    ::zschimmer::javabridge::Method const _setWritable__ZZ__method;
    ::zschimmer::javabridge::Method const _toString____method;
    ::zschimmer::javabridge::Method const _toURI____method;
    ::zschimmer::javabridge::Method const _toURL____method;

    static const ::zschimmer::javabridge::class_factory< File__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< File__class > File__class::class_factory ("java.io.File");

File__class::File__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor__Ljava_io_File_2Ljava_lang_String_2__method(this, "<init>", "(Ljava/io/File;Ljava/lang/String;)V")
    ,__constructor__Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;)V")
    ,__constructor__Ljava_lang_String_2Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V")
    ,__constructor__Ljava_net_URI_2__method(this, "<init>", "(Ljava/net/URI;)V")
    ,_canExecute____method(this, "canExecute", "()Z")
    ,_canRead____method(this, "canRead", "()Z")
    ,_canWrite____method(this, "canWrite", "()Z")
    ,_compareTo__Ljava_io_File_2__method(this, "compareTo", "(Ljava/io/File;)I")
    ,_compareTo__Ljava_lang_Object_2__method(this, "compareTo", "(Ljava/lang/Object;)I")
    ,_createNewFile____method(this, "createNewFile", "()Z")
    ,_createTempFile__Ljava_lang_String_2Ljava_lang_String_2__method(this, "createTempFile", "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;")
    ,_createTempFile__Ljava_lang_String_2Ljava_lang_String_2Ljava_io_File_2__method(this, "createTempFile", "(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;")
    ,_delete_1____method(this, "delete", "()Z")
    ,_deleteOnExit____method(this, "deleteOnExit", "()V")
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_exists____method(this, "exists", "()Z")
    ,_getAbsoluteFile____method(this, "getAbsoluteFile", "()Ljava/io/File;")
    ,_getAbsolutePath____method(this, "getAbsolutePath", "()Ljava/lang/String;")
    ,_getCanonicalFile____method(this, "getCanonicalFile", "()Ljava/io/File;")
    ,_getCanonicalPath____method(this, "getCanonicalPath", "()Ljava/lang/String;")
    ,_getFreeSpace____method(this, "getFreeSpace", "()J")
    ,_getName____method(this, "getName", "()Ljava/lang/String;")
    ,_getParent____method(this, "getParent", "()Ljava/lang/String;")
    ,_getParentFile____method(this, "getParentFile", "()Ljava/io/File;")
    ,_getPath____method(this, "getPath", "()Ljava/lang/String;")
    ,_getTotalSpace____method(this, "getTotalSpace", "()J")
    ,_getUsableSpace____method(this, "getUsableSpace", "()J")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_isAbsolute____method(this, "isAbsolute", "()Z")
    ,_isDirectory____method(this, "isDirectory", "()Z")
    ,_isFile____method(this, "isFile", "()Z")
    ,_isHidden____method(this, "isHidden", "()Z")
    ,_lastModified____method(this, "lastModified", "()J")
    ,_length____method(this, "length", "()J")
    ,_mkdir____method(this, "mkdir", "()Z")
    ,_mkdirs____method(this, "mkdirs", "()Z")
    ,_renameTo__Ljava_io_File_2__method(this, "renameTo", "(Ljava/io/File;)Z")
    ,_setExecutable__Z__method(this, "setExecutable", "(Z)Z")
    ,_setExecutable__ZZ__method(this, "setExecutable", "(ZZ)Z")
    ,_setLastModified__J__method(this, "setLastModified", "(J)Z")
    ,_setReadOnly____method(this, "setReadOnly", "()Z")
    ,_setReadable__Z__method(this, "setReadable", "(Z)Z")
    ,_setReadable__ZZ__method(this, "setReadable", "(ZZ)Z")
    ,_setWritable__Z__method(this, "setWritable", "(Z)Z")
    ,_setWritable__ZZ__method(this, "setWritable", "(ZZ)Z")
    ,_toString____method(this, "toString", "()Ljava/lang/String;")
    ,_toURI____method(this, "toURI", "()Ljava/net/URI;")
    ,_toURL____method(this, "toURL", "()Ljava/net/URL;"){}

File__class::~File__class() {}



File File::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::io::File >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) {
    File result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    File__class* cls = result._class.get();
    cls->__constructor__Ljava_io_File_2Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}

File File::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    File result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    File__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}

File File::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) {
    File result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    File__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}

File File::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URI >& p0) {
    File result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    File__class* cls = result._class.get();
    cls->__constructor__Ljava_net_URI_2__method.call(result.get_jobject(), parameter_list);
    return result;
}


File::File(jobject jo) { if (jo) assign_(jo); }

File::File(const File& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    File::File(File&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

File::~File() { assign_(NULL); }




bool File::canExecute() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_canExecute____method.bool_call(get_jobject(), parameter_list);
}

bool File::canRead() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_canRead____method.bool_call(get_jobject(), parameter_list);
}

bool File::canWrite() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_canWrite____method.bool_call(get_jobject(), parameter_list);
}

jint File::compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::io::File >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    File__class* cls = _class.get();
    return cls->_compareTo__Ljava_io_File_2__method.int_call(get_jobject(), parameter_list);
}

jint File::compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    File__class* cls = _class.get();
    return cls->_compareTo__Ljava_lang_Object_2__method.int_call(get_jobject(), parameter_list);
}

bool File::createNewFile() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_createNewFile____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::io::File File::createTempFile(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    File__class* cls = File__class::class_factory.clas();
    ::javaproxy::java::io::File result;
    result.steal_local_ref(cls->_createTempFile__Ljava_lang_String_2Ljava_lang_String_2__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::io::File File::createTempFile(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::io::File >& p2) {
    ::zschimmer::javabridge::raw_parameter_list<3> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].l = p2.get_jobject();
    File__class* cls = File__class::class_factory.clas();
    ::javaproxy::java::io::File result;
    result.steal_local_ref(cls->_createTempFile__Ljava_lang_String_2Ljava_lang_String_2Ljava_io_File_2__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

bool File::delete_() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_delete_1____method.bool_call(get_jobject(), parameter_list);
}

void File::deleteOnExit() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    cls->_deleteOnExit____method.call(get_jobject(), parameter_list);
}

bool File::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    File__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

bool File::exists() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_exists____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::io::File File::getAbsoluteFile() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    ::javaproxy::java::io::File result;
    result.steal_local_ref(cls->_getAbsoluteFile____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String File::getAbsolutePath() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getAbsolutePath____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::io::File File::getCanonicalFile() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    ::javaproxy::java::io::File result;
    result.steal_local_ref(cls->_getCanonicalFile____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String File::getCanonicalPath() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getCanonicalPath____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jlong File::getFreeSpace() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return cls->_getFreeSpace____method.long_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String File::getName() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getName____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String File::getParent() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getParent____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::io::File File::getParentFile() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    ::javaproxy::java::io::File result;
    result.steal_local_ref(cls->_getParentFile____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String File::getPath() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getPath____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jlong File::getTotalSpace() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return cls->_getTotalSpace____method.long_call(get_jobject(), parameter_list);
}

jlong File::getUsableSpace() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return cls->_getUsableSpace____method.long_call(get_jobject(), parameter_list);
}

jint File::hashCode() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

bool File::isAbsolute() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_isAbsolute____method.bool_call(get_jobject(), parameter_list);
}

bool File::isDirectory() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_isDirectory____method.bool_call(get_jobject(), parameter_list);
}

bool File::isFile() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_isFile____method.bool_call(get_jobject(), parameter_list);
}

bool File::isHidden() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_isHidden____method.bool_call(get_jobject(), parameter_list);
}

jlong File::lastModified() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return cls->_lastModified____method.long_call(get_jobject(), parameter_list);
}

jlong File::length() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return cls->_length____method.long_call(get_jobject(), parameter_list);
}

bool File::mkdir() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_mkdir____method.bool_call(get_jobject(), parameter_list);
}

bool File::mkdirs() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_mkdirs____method.bool_call(get_jobject(), parameter_list);
}

bool File::renameTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::io::File >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    File__class* cls = _class.get();
    return 0 != cls->_renameTo__Ljava_io_File_2__method.bool_call(get_jobject(), parameter_list);
}

bool File::setExecutable(jboolean p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].z = p0;
    File__class* cls = _class.get();
    return 0 != cls->_setExecutable__Z__method.bool_call(get_jobject(), parameter_list);
}

bool File::setExecutable(jboolean p0, jboolean p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].z = p0;
    parameter_list._jvalues[1].z = p1;
    File__class* cls = _class.get();
    return 0 != cls->_setExecutable__ZZ__method.bool_call(get_jobject(), parameter_list);
}

bool File::setLastModified(jlong p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].j = p0;
    File__class* cls = _class.get();
    return 0 != cls->_setLastModified__J__method.bool_call(get_jobject(), parameter_list);
}

bool File::setReadOnly() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    return 0 != cls->_setReadOnly____method.bool_call(get_jobject(), parameter_list);
}

bool File::setReadable(jboolean p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].z = p0;
    File__class* cls = _class.get();
    return 0 != cls->_setReadable__Z__method.bool_call(get_jobject(), parameter_list);
}

bool File::setReadable(jboolean p0, jboolean p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].z = p0;
    parameter_list._jvalues[1].z = p1;
    File__class* cls = _class.get();
    return 0 != cls->_setReadable__ZZ__method.bool_call(get_jobject(), parameter_list);
}

bool File::setWritable(jboolean p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].z = p0;
    File__class* cls = _class.get();
    return 0 != cls->_setWritable__Z__method.bool_call(get_jobject(), parameter_list);
}

bool File::setWritable(jboolean p0, jboolean p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].z = p0;
    parameter_list._jvalues[1].z = p1;
    File__class* cls = _class.get();
    return 0 != cls->_setWritable__ZZ__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String File::toString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::net::URI File::toURI() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    ::javaproxy::java::net::URI result;
    result.steal_local_ref(cls->_toURI____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::net::URL File::toURL() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    File__class* cls = _class.get();
    ::javaproxy::java::net::URL result;
    result.steal_local_ref(cls->_toURL____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* File::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* File::java_class_() { return File__class::class_factory.clas(); }


void File::Lazy_class::initialize() const {
    _value = File__class::class_factory.clas();
}


}}}
