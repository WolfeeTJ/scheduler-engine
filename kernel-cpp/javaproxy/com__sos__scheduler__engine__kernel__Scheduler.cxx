// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__Scheduler.h"
#include "com__sos__scheduler__engine__cplusplus__runtime__Sister.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__SpoolerC.h"
#include "com__sos__scheduler__engine__kernel__event__EventSubsystem.h"
#include "com__sos__scheduler__engine__kernel__main__SchedulerStateHandler.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { 

struct Scheduler__class : ::zschimmer::javabridge::Class
{
    Scheduler__class(const string& class_name);
   ~Scheduler__class();

    ::zschimmer::javabridge::Method const __constructor__Lcom_sos_scheduler_engine_kernel_cppproxy_SpoolerC_2Lcom_sos_scheduler_engine_kernel_main_SchedulerStateHandler_2__method;
    ::zschimmer::javabridge::Method const _getEventSubsystem____method;
    ::zschimmer::javabridge::Method const _javaExecuteXml__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _onActivate____method;
    ::zschimmer::javabridge::Method const _onActivated____method;
    ::zschimmer::javabridge::Method const _onClose____method;
    ::zschimmer::javabridge::Method const _onLoad__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _threadLock____method;
    ::zschimmer::javabridge::Method const _threadUnlock____method;

    static const ::zschimmer::javabridge::class_factory< Scheduler__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Scheduler__class > Scheduler__class::class_factory ("com.sos.scheduler.engine.kernel.Scheduler");

Scheduler__class::Scheduler__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor__Lcom_sos_scheduler_engine_kernel_cppproxy_SpoolerC_2Lcom_sos_scheduler_engine_kernel_main_SchedulerStateHandler_2__method(this, "<init>", "(Lcom/sos/scheduler/engine/kernel/cppproxy/SpoolerC;Lcom/sos/scheduler/engine/kernel/main/SchedulerStateHandler;)V")
    ,_getEventSubsystem____method(this, "getEventSubsystem", "()Lcom/sos/scheduler/engine/kernel/event/EventSubsystem;")
    ,_javaExecuteXml__Ljava_lang_String_2__method(this, "javaExecuteXml", "(Ljava/lang/String;)Ljava/lang/String;")
    ,_onActivate____method(this, "onActivate", "()V")
    ,_onActivated____method(this, "onActivated", "()V")
    ,_onClose____method(this, "onClose", "()V")
    ,_onLoad__Ljava_lang_String_2__method(this, "onLoad", "(Ljava/lang/String;)V")
    ,_threadLock____method(this, "threadLock", "()V")
    ,_threadUnlock____method(this, "threadUnlock", "()V"){}

Scheduler__class::~Scheduler__class() {}



Scheduler Scheduler::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::SpoolerC >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::main::SchedulerStateHandler >& p1) {
    Scheduler result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    Scheduler__class* cls = result._class.get();
    cls->__constructor__Lcom_sos_scheduler_engine_kernel_cppproxy_SpoolerC_2Lcom_sos_scheduler_engine_kernel_main_SchedulerStateHandler_2__method.call(result.get_jobject(), parameter_list);
    return result;
}


Scheduler::Scheduler(jobject jo) { if (jo) assign_(jo); }

Scheduler::Scheduler(const Scheduler& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Scheduler::Scheduler(Scheduler&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Scheduler::~Scheduler() { assign_(NULL); }




::javaproxy::com::sos::scheduler::engine::kernel::event::EventSubsystem Scheduler::getEventSubsystem() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    ::javaproxy::com::sos::scheduler::engine::kernel::event::EventSubsystem result;
    result.steal_local_ref(cls->_getEventSubsystem____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String Scheduler::javaExecuteXml(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Scheduler__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_javaExecuteXml__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

void Scheduler::onActivate() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_onActivate____method.call(get_jobject(), parameter_list);
}

void Scheduler::onActivated() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_onActivated____method.call(get_jobject(), parameter_list);
}

void Scheduler::onClose() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_onClose____method.call(get_jobject(), parameter_list);
}

void Scheduler::onLoad(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Scheduler__class* cls = _class.get();
    cls->_onLoad__Ljava_lang_String_2__method.call(get_jobject(), parameter_list);
}

void Scheduler::threadLock() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_threadLock____method.call(get_jobject(), parameter_list);
}

void Scheduler::threadUnlock() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Scheduler__class* cls = _class.get();
    cls->_threadUnlock____method.call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* Scheduler::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* Scheduler::java_class_() { return Scheduler__class::class_factory.clas(); }


void Scheduler::Lazy_class::initialize() {
    _value = Scheduler__class::class_factory.clas();
}


}}}}}}
