// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#ifndef _JAVAPROXY_SCALA_UTIL_TRY_H_
#define _JAVAPROXY_SCALA_UTIL_TRY_H_

#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"
#include "java__lang__Object.h"

namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}
namespace javaproxy { namespace scala { struct Option; }}


namespace javaproxy { namespace scala { namespace util { 


struct Try__class;

struct Try : ::zschimmer::javabridge::proxy_jobject< Try >, ::javaproxy::java::lang::Object {
    static Try new_instance();

    Try(jobject = NULL);

    Try(const Try&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Try(Try&&);
    #endif

    ~Try();

    Try& operator=(jobject jo) { assign_(jo); return *this; }
    Try& operator=(const Try& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Try& operator=(Try&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< Try >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< Try >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    ::javaproxy::scala::util::Try failed() const;
    ::javaproxy::java::lang::Object get() const;
    bool isFailure() const;
    bool isSuccess() const;
    ::javaproxy::scala::Option toOption() const;

    ::zschimmer::javabridge::Class* java_object_class_() const;

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<Try__class*> {
        void initialize() const;
    };

    Lazy_class _class;
};


}}}

#endif
