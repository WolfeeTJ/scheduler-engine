// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__event__ObjectEvent.h"
#include "com__sos__scheduler__engine__eventbus__AbstractEvent.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace event { 

struct ObjectEvent__class : ::zschimmer::javabridge::Class
{
    ObjectEvent__class(const string& class_name);
   ~ObjectEvent__class();

    ::zschimmer::javabridge::Method const __constructor____method;
    ::zschimmer::javabridge::Method const _toString____method;

    static const ::zschimmer::javabridge::class_factory< ObjectEvent__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< ObjectEvent__class > ObjectEvent__class::class_factory ("com.sos.scheduler.engine.kernel.event.ObjectEvent");

ObjectEvent__class::ObjectEvent__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor____method(this, "<init>", "()V")
    ,_toString____method(this, "toString", "()Ljava/lang/String;"){}

ObjectEvent__class::~ObjectEvent__class() {}



ObjectEvent ObjectEvent::new_instance() {
    ObjectEvent result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ObjectEvent__class* cls = result._class.get();
    cls->__constructor____method.call(result.get_jobject(), parameter_list);
    return result;
}


ObjectEvent::ObjectEvent(jobject jo) { if (jo) assign_(jo); }

ObjectEvent::ObjectEvent(const ObjectEvent& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    ObjectEvent::ObjectEvent(ObjectEvent&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

ObjectEvent::~ObjectEvent() { assign_(NULL); }




::javaproxy::java::lang::String ObjectEvent::toString() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ObjectEvent__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* ObjectEvent::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* ObjectEvent::java_class_() { return ObjectEvent__class::class_factory.clas(); }


void ObjectEvent::Lazy_class::initialize() {
    _value = ObjectEvent__class::class_factory.clas();
}


}}}}}}}
