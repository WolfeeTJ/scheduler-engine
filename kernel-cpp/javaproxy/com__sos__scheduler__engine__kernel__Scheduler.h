// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#ifndef _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_SCHEDULER_H_
#define _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_SCHEDULER_H_

#include "java__lang__Object.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace cplusplus { namespace runtime { struct Sister; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { struct SpoolerC; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace database { struct DatabaseSubsystem; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace event { struct EventSubsystem; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace log { struct PrefixLog; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace main { struct MainContext; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { struct Platform; }}}}}}
namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}


namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { 


struct Scheduler__class;

struct Scheduler : ::zschimmer::javabridge::proxy_jobject< Scheduler >, ::javaproxy::java::lang::Object {
    static Scheduler new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::SpoolerC >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::main::MainContext >& p1);

    Scheduler(jobject = NULL);

    Scheduler(const Scheduler&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Scheduler(Scheduler&&);
    #endif

    ~Scheduler();

    Scheduler& operator=(jobject jo) { assign_(jo); return *this; }
    Scheduler& operator=(const Scheduler& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Scheduler& operator=(Scheduler&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< Scheduler >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< Scheduler >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    void callCppAndDoNothing();
    ::javaproxy::java::lang::String executeXml(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0);
    ::javaproxy::java::lang::String getClusterMemberId();
    ::javaproxy::com::sos::scheduler::engine::kernel::database::DatabaseSubsystem getDatabaseSubsystem();
    ::javaproxy::com::sos::scheduler::engine::kernel::event::EventSubsystem getEventSubsystem();
    ::javaproxy::java::lang::String getHostname();
    ::javaproxy::java::lang::String getHostnameLong();
    ::javaproxy::java::lang::String getHttpUrl();
    ::javaproxy::java::lang::Object getMainContext();
    ::javaproxy::com::sos::scheduler::engine::kernel::Platform getPlatform();
    ::javaproxy::java::lang::String getSchedulerId();
    jint getTcpPort();
    ::javaproxy::java::lang::String getVersion();
    ::javaproxy::java::lang::String javaExecuteXml(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0);
    ::javaproxy::com::sos::scheduler::engine::kernel::log::PrefixLog log();
    void onActivate();
    void onClose();
    void onCppProxyInvalidated();
    void onLoad(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0);
    void terminate();
    void threadLock();
    void threadUnlock();

    ::zschimmer::javabridge::Class* java_object_class_();

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<Scheduler__class*> {
        void initialize();
    };

    Lazy_class _class;
};


}}}}}}

#endif
