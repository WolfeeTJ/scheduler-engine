// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#ifndef _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_MAIN_SCHEDULERSTATEHANDLER_H_
#define _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_MAIN_SCHEDULERSTATEHANDLER_H_

#include "java__lang__Object.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { struct Scheduler; }}}}}}
namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}


namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace main { 


struct SchedulerStateHandler__class;

struct SchedulerStateHandler : ::zschimmer::javabridge::proxy_jobject< SchedulerStateHandler >, ::javaproxy::java::lang::Object {
  private:
    static SchedulerStateHandler new_instance();  // Not implemented
  public:

    SchedulerStateHandler(jobject = NULL);

    SchedulerStateHandler(const SchedulerStateHandler&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        SchedulerStateHandler(SchedulerStateHandler&&);
    #endif

    ~SchedulerStateHandler();

    SchedulerStateHandler& operator=(jobject jo) { assign_(jo); return *this; }
    SchedulerStateHandler& operator=(const SchedulerStateHandler& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        SchedulerStateHandler& operator=(SchedulerStateHandler&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< SchedulerStateHandler >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< SchedulerStateHandler >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    void onSchedulerActivated();
    void onSchedulerStarted(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::Scheduler >& p0);

    ::zschimmer::javabridge::Class* java_object_class_();

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<SchedulerStateHandler__class*> {
        void initialize();
    };

    Lazy_class _class;
};


}}}}}}}

#endif
