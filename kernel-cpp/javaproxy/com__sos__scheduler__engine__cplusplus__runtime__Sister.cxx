// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__cplusplus__runtime__Sister.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace cplusplus { namespace runtime { 

struct Sister__class : ::zschimmer::javabridge::Class
{
    Sister__class(const string& class_name);
   ~Sister__class();

    ::zschimmer::javabridge::Method const _onCppProxyInvalidated____method;

    static const ::zschimmer::javabridge::class_factory< Sister__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Sister__class > Sister__class::class_factory ("com.sos.scheduler.engine.cplusplus.runtime.Sister");

Sister__class::Sister__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_onCppProxyInvalidated____method(this, "onCppProxyInvalidated", "()V"){}

Sister__class::~Sister__class() {}




Sister::Sister(jobject jo) { if (jo) assign_(jo); }

Sister::Sister(const Sister& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Sister::Sister(Sister&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Sister::~Sister() { assign_(NULL); }




void Sister::onCppProxyInvalidated() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Sister__class* cls = _class.get();
    cls->_onCppProxyInvalidated____method.call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* Sister::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Sister::java_class_() { return Sister__class::class_factory.clas(); }


void Sister::Lazy_class::initialize() const {
    _value = Sister__class::class_factory.clas();
}


}}}}}}}
