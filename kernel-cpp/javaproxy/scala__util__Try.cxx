// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "scala__util__Try.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "scala__Option.h"

namespace javaproxy { namespace scala { namespace util { 

struct Try__class : ::zschimmer::javabridge::Class
{
    Try__class(const string& class_name);
   ~Try__class();

    ::zschimmer::javabridge::Method const __constructor____method;
    ::zschimmer::javabridge::Method const _failed____method;
    ::zschimmer::javabridge::Method const _get____method;
    ::zschimmer::javabridge::Method const _isFailure____method;
    ::zschimmer::javabridge::Method const _isSuccess____method;
    ::zschimmer::javabridge::Method const _toOption____method;

    static const ::zschimmer::javabridge::class_factory< Try__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Try__class > Try__class::class_factory ("scala.util.Try");

Try__class::Try__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor____method(this, "<init>", "()V")
    ,_failed____method(this, "failed", "()Lscala/util/Try;")
    ,_get____method(this, "get", "()Ljava/lang/Object;")
    ,_isFailure____method(this, "isFailure", "()Z")
    ,_isSuccess____method(this, "isSuccess", "()Z")
    ,_toOption____method(this, "toOption", "()Lscala/Option;"){}

Try__class::~Try__class() {}



Try Try::new_instance() {
    Try result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Try__class* cls = result._class.get();
    cls->__constructor____method.call(result.get_jobject(), parameter_list);
    return result;
}


Try::Try(jobject jo) { if (jo) assign_(jo); }

Try::Try(const Try& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Try::Try(Try&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Try::~Try() { assign_(NULL); }




::javaproxy::scala::util::Try Try::failed() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Try__class* cls = _class.get();
    ::javaproxy::scala::util::Try result;
    result.steal_local_ref(cls->_failed____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object Try::get() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Try__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_get____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool Try::isFailure() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Try__class* cls = _class.get();
    return 0 != cls->_isFailure____method.bool_call(get_jobject(), parameter_list);
}

bool Try::isSuccess() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Try__class* cls = _class.get();
    return 0 != cls->_isSuccess____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::scala::Option Try::toOption() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Try__class* cls = _class.get();
    ::javaproxy::scala::Option result;
    result.steal_local_ref(cls->_toOption____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* Try::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Try::java_class_() { return Try__class::class_factory.clas(); }


void Try::Lazy_class::initialize() const {
    _value = Try__class::class_factory.clas();
}


}}}
