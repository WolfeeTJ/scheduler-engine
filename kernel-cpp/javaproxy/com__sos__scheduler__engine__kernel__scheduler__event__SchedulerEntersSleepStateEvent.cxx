// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__scheduler__event__SchedulerEntersSleepStateEvent.h"
#include "com__sos__scheduler__engine__kernel__event__Event.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace scheduler { namespace event { 

struct SchedulerEntersSleepStateEvent__class : ::zschimmer::javabridge::Class
{
    SchedulerEntersSleepStateEvent__class(const string& class_name);
   ~SchedulerEntersSleepStateEvent__class();

    ::zschimmer::javabridge::Method const __constructor____method;

    static const ::zschimmer::javabridge::class_factory< SchedulerEntersSleepStateEvent__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< SchedulerEntersSleepStateEvent__class > SchedulerEntersSleepStateEvent__class::class_factory ("com.sos.scheduler.engine.kernel.scheduler.event.SchedulerEntersSleepStateEvent");

SchedulerEntersSleepStateEvent__class::SchedulerEntersSleepStateEvent__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor____method(this, "<init>", "()V"){}

SchedulerEntersSleepStateEvent__class::~SchedulerEntersSleepStateEvent__class() {}



SchedulerEntersSleepStateEvent SchedulerEntersSleepStateEvent::new_instance() {
    SchedulerEntersSleepStateEvent result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    SchedulerEntersSleepStateEvent__class* cls = result._class.get();
    cls->__constructor____method.call(result.get_jobject(), parameter_list);
    return result;
}


SchedulerEntersSleepStateEvent::SchedulerEntersSleepStateEvent(jobject jo) { if (jo) assign_(jo); }

SchedulerEntersSleepStateEvent::SchedulerEntersSleepStateEvent(const SchedulerEntersSleepStateEvent& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    SchedulerEntersSleepStateEvent::SchedulerEntersSleepStateEvent(SchedulerEntersSleepStateEvent&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

SchedulerEntersSleepStateEvent::~SchedulerEntersSleepStateEvent() { assign_(NULL); }





::zschimmer::javabridge::Class* SchedulerEntersSleepStateEvent::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* SchedulerEntersSleepStateEvent::java_class_() { return SchedulerEntersSleepStateEvent__class::class_factory.clas(); }


void SchedulerEntersSleepStateEvent::Lazy_class::initialize() {
    _value = SchedulerEntersSleepStateEvent__class::class_factory.clas();
}


}}}}}}}}
