// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#ifndef _JAVAPROXY_JAVA_UTIL_ARRAYLIST_H_
#define _JAVAPROXY_JAVA_UTIL_ARRAYLIST_H_

#include "java__lang__Object.h"
#include "java__util__AbstractCollection.h"
#include "java__util__AbstractList.h"

namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}
namespace javaproxy { namespace java { namespace util { struct AbstractList; }}}
namespace javaproxy { namespace java { namespace util { struct List; }}}


namespace javaproxy { namespace java { namespace util { 


struct ArrayList__class;

struct ArrayList : ::zschimmer::javabridge::proxy_jobject< ArrayList >, ::javaproxy::java::util::AbstractList {
    static ArrayList new_instance();
    static ArrayList new_instance(jint p0);

    ArrayList(jobject = NULL);

    ArrayList(const ArrayList&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        ArrayList(ArrayList&&);
    #endif

    ~ArrayList();

    ArrayList& operator=(jobject jo) { assign_(jo); return *this; }
    ArrayList& operator=(const ArrayList& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        ArrayList& operator=(ArrayList&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< ArrayList >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< ArrayList >::set_jobject(jo);
        ::javaproxy::java::util::AbstractList::set_jobject(jo);
    }
  public:

    void add(jint p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1);
    bool add(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0);
    void clear();
    ::javaproxy::java::lang::Object clone();
    bool contains(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0);
    void ensureCapacity(jint p0);
    ::javaproxy::java::lang::Object get(jint p0);
    jint indexOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0);
    bool isEmpty();
    jint lastIndexOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0);
    ::javaproxy::java::lang::Object remove(jint p0);
    bool remove(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0);
    ::javaproxy::java::lang::Object set(jint p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1);
    jint size();
    void trimToSize();

    ::zschimmer::javabridge::Class* java_object_class_();

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<ArrayList__class*> {
        void initialize();
    };

    Lazy_class _class;
};


}}}

#endif
