// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__client__command__CppHttpSchedulerCommandClient.h"
#include "com__sos__scheduler__engine__kernel__async__CppCall.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace client { namespace command { 

struct CppHttpSchedulerCommandClient__class : ::zschimmer::javabridge::Class
{
    CppHttpSchedulerCommandClient__class(const string& class_name);
   ~CppHttpSchedulerCommandClient__class();

    ::zschimmer::javabridge::Method const _postXml__Ljava_lang_String_2_3BLcom_sos_scheduler_engine_kernel_async_CppCall_2__method;

    static const ::zschimmer::javabridge::class_factory< CppHttpSchedulerCommandClient__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< CppHttpSchedulerCommandClient__class > CppHttpSchedulerCommandClient__class::class_factory ("com.sos.scheduler.engine.client.command.CppHttpSchedulerCommandClient");

CppHttpSchedulerCommandClient__class::CppHttpSchedulerCommandClient__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_postXml__Ljava_lang_String_2_3BLcom_sos_scheduler_engine_kernel_async_CppCall_2__method(this, "postXml", "(Ljava/lang/String;[BLcom/sos/scheduler/engine/kernel/async/CppCall;)V"){}

CppHttpSchedulerCommandClient__class::~CppHttpSchedulerCommandClient__class() {}




CppHttpSchedulerCommandClient::CppHttpSchedulerCommandClient(jobject jo) { if (jo) assign_(jo); }

CppHttpSchedulerCommandClient::CppHttpSchedulerCommandClient(const CppHttpSchedulerCommandClient& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    CppHttpSchedulerCommandClient::CppHttpSchedulerCommandClient(CppHttpSchedulerCommandClient&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

CppHttpSchedulerCommandClient::~CppHttpSchedulerCommandClient() { assign_(NULL); }




void CppHttpSchedulerCommandClient::postXml(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::Local_java_byte_array& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::async::CppCall >& p2) const {
    ::zschimmer::javabridge::raw_parameter_list<3> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jbyteArray();
    parameter_list._jvalues[2].l = p2.get_jobject();
    CppHttpSchedulerCommandClient__class* cls = _class.get();
    cls->_postXml__Ljava_lang_String_2_3BLcom_sos_scheduler_engine_kernel_async_CppCall_2__method.call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* CppHttpSchedulerCommandClient::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* CppHttpSchedulerCommandClient::java_class_() { return CppHttpSchedulerCommandClient__class::class_factory.clas(); }


void CppHttpSchedulerCommandClient::Lazy_class::initialize() const {
    _value = CppHttpSchedulerCommandClient__class::class_factory.clas();
}


}}}}}}}
