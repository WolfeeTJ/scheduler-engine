// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__log__LogEvent.h"
#include "com__sos__scheduler__engine__kernel__event__AbstractEvent.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace log { 

struct LogEvent__class : ::zschimmer::javabridge::Class
{
    LogEvent__class(const string& class_name);
   ~LogEvent__class();

    ::zschimmer::javabridge::Method const _toString____method;

    static const ::zschimmer::javabridge::class_factory< LogEvent__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< LogEvent__class > LogEvent__class::class_factory ("com.sos.scheduler.engine.kernel.log.LogEvent");

LogEvent__class::LogEvent__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_toString____method(this, "toString", "()Ljava/lang/String;"){}

LogEvent__class::~LogEvent__class() {}




LogEvent::LogEvent(jobject jo) { if (jo) assign_(jo); }

LogEvent::LogEvent(const LogEvent& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    LogEvent::LogEvent(LogEvent&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

LogEvent::~LogEvent() { assign_(NULL); }




::javaproxy::java::lang::String LogEvent::toString() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    LogEvent__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* LogEvent::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* LogEvent::java_class_() { return LogEvent__class::class_factory.clas(); }


void LogEvent::Lazy_class::initialize() {
    _value = LogEvent__class::class_factory.clas();
}


}}}}}}}
