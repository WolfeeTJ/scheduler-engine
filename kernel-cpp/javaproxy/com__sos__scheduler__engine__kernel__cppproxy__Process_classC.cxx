// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__cppproxy__Process_classC.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

struct Process_classC__class : ::zschimmer::javabridge::Class
{
    Process_classC__class(const string& class_name);
   ~Process_classC__class();


    static const ::zschimmer::javabridge::class_factory< Process_classC__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Process_classC__class > Process_classC__class::class_factory ("com.sos.scheduler.engine.kernel.cppproxy.Process_classC");

Process_classC__class::Process_classC__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
{}

Process_classC__class::~Process_classC__class() {}




Process_classC::Process_classC(jobject jo) { if (jo) assign_(jo); }

Process_classC::Process_classC(const Process_classC& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Process_classC::Process_classC(Process_classC&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Process_classC::~Process_classC() { assign_(NULL); }





::zschimmer::javabridge::Class* Process_classC::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Process_classC::java_class_() { return Process_classC__class::class_factory.clas(); }


void Process_classC::Lazy_class::initialize() const {
    _value = Process_classC__class::class_factory.clas();
}


}}}}}}}
