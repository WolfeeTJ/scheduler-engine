// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__net__URI.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "java__net__URL.h"

namespace javaproxy { namespace java { namespace net { 

struct URI__class : ::zschimmer::javabridge::Class
{
    URI__class(const string& class_name);
   ~URI__class();

    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2ILjava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _compareTo__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _compareTo__Ljava_net_URI_2__method;
    ::zschimmer::javabridge::Static_method const _create__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _getAuthority____method;
    ::zschimmer::javabridge::Method const _getFragment____method;
    ::zschimmer::javabridge::Method const _getHost____method;
    ::zschimmer::javabridge::Method const _getPath____method;
    ::zschimmer::javabridge::Method const _getPort____method;
    ::zschimmer::javabridge::Method const _getQuery____method;
    ::zschimmer::javabridge::Method const _getRawAuthority____method;
    ::zschimmer::javabridge::Method const _getRawFragment____method;
    ::zschimmer::javabridge::Method const _getRawPath____method;
    ::zschimmer::javabridge::Method const _getRawQuery____method;
    ::zschimmer::javabridge::Method const _getRawSchemeSpecificPart____method;
    ::zschimmer::javabridge::Method const _getRawUserInfo____method;
    ::zschimmer::javabridge::Method const _getScheme____method;
    ::zschimmer::javabridge::Method const _getSchemeSpecificPart____method;
    ::zschimmer::javabridge::Method const _getUserInfo____method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Method const _isAbsolute____method;
    ::zschimmer::javabridge::Method const _isOpaque____method;
    ::zschimmer::javabridge::Method const _normalize____method;
    ::zschimmer::javabridge::Method const _parseServerAuthority____method;
    ::zschimmer::javabridge::Method const _relativize__Ljava_net_URI_2__method;
    ::zschimmer::javabridge::Method const _resolve__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _resolve__Ljava_net_URI_2__method;
    ::zschimmer::javabridge::Method const _toASCIIString____method;
    ::zschimmer::javabridge::Method const _toString____method;
    ::zschimmer::javabridge::Method const _toURL____method;

    static const ::zschimmer::javabridge::class_factory< URI__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< URI__class > URI__class::class_factory ("java.net.URI");

URI__class::URI__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor__Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;)V")
    ,__constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V")
    ,__constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2ILjava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V")
    ,__constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V")
    ,__constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V")
    ,_compareTo__Ljava_lang_Object_2__method(this, "compareTo", "(Ljava/lang/Object;)I")
    ,_compareTo__Ljava_net_URI_2__method(this, "compareTo", "(Ljava/net/URI;)I")
    ,_create__Ljava_lang_String_2__method(this, "create", "(Ljava/lang/String;)Ljava/net/URI;")
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_getAuthority____method(this, "getAuthority", "()Ljava/lang/String;")
    ,_getFragment____method(this, "getFragment", "()Ljava/lang/String;")
    ,_getHost____method(this, "getHost", "()Ljava/lang/String;")
    ,_getPath____method(this, "getPath", "()Ljava/lang/String;")
    ,_getPort____method(this, "getPort", "()I")
    ,_getQuery____method(this, "getQuery", "()Ljava/lang/String;")
    ,_getRawAuthority____method(this, "getRawAuthority", "()Ljava/lang/String;")
    ,_getRawFragment____method(this, "getRawFragment", "()Ljava/lang/String;")
    ,_getRawPath____method(this, "getRawPath", "()Ljava/lang/String;")
    ,_getRawQuery____method(this, "getRawQuery", "()Ljava/lang/String;")
    ,_getRawSchemeSpecificPart____method(this, "getRawSchemeSpecificPart", "()Ljava/lang/String;")
    ,_getRawUserInfo____method(this, "getRawUserInfo", "()Ljava/lang/String;")
    ,_getScheme____method(this, "getScheme", "()Ljava/lang/String;")
    ,_getSchemeSpecificPart____method(this, "getSchemeSpecificPart", "()Ljava/lang/String;")
    ,_getUserInfo____method(this, "getUserInfo", "()Ljava/lang/String;")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_isAbsolute____method(this, "isAbsolute", "()Z")
    ,_isOpaque____method(this, "isOpaque", "()Z")
    ,_normalize____method(this, "normalize", "()Ljava/net/URI;")
    ,_parseServerAuthority____method(this, "parseServerAuthority", "()Ljava/net/URI;")
    ,_relativize__Ljava_net_URI_2__method(this, "relativize", "(Ljava/net/URI;)Ljava/net/URI;")
    ,_resolve__Ljava_lang_String_2__method(this, "resolve", "(Ljava/lang/String;)Ljava/net/URI;")
    ,_resolve__Ljava_net_URI_2__method(this, "resolve", "(Ljava/net/URI;)Ljava/net/URI;")
    ,_toASCIIString____method(this, "toASCIIString", "()Ljava/lang/String;")
    ,_toString____method(this, "toString", "()Ljava/lang/String;")
    ,_toURL____method(this, "toURL", "()Ljava/net/URL;"){}

URI__class::~URI__class() {}



URI URI::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    URI result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    URI__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}

URI URI::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2) {
    URI result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<3> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].l = p2.get_jobject();
    URI__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}

URI URI::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2, jint p3, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p4, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p5, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p6) {
    URI result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<7> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].l = p2.get_jobject();
    parameter_list._jvalues[3].i = p3;
    parameter_list._jvalues[4].l = p4.get_jobject();
    parameter_list._jvalues[5].l = p5.get_jobject();
    parameter_list._jvalues[6].l = p6.get_jobject();
    URI__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2ILjava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}

URI URI::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p3) {
    URI result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<4> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].l = p2.get_jobject();
    parameter_list._jvalues[3].l = p3.get_jobject();
    URI__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}

URI URI::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p3, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p4) {
    URI result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<5> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].l = p2.get_jobject();
    parameter_list._jvalues[3].l = p3.get_jobject();
    parameter_list._jvalues[4].l = p4.get_jobject();
    URI__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}


URI::URI(jobject jo) { if (jo) assign_(jo); }

URI::URI(const URI& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    URI::URI(URI&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

URI::~URI() { assign_(NULL); }




jint URI::compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    URI__class* cls = _class.get();
    return cls->_compareTo__Ljava_lang_Object_2__method.int_call(get_jobject(), parameter_list);
}

jint URI::compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URI >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    URI__class* cls = _class.get();
    return cls->_compareTo__Ljava_net_URI_2__method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::net::URI URI::create(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    URI__class* cls = URI__class::class_factory.clas();
    ::javaproxy::java::net::URI result;
    result.steal_local_ref(cls->_create__Ljava_lang_String_2__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

bool URI::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    URI__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String URI::getAuthority() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getAuthority____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getFragment() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getFragment____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getHost() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getHost____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getPath() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getPath____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint URI::getPort() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    return cls->_getPort____method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String URI::getQuery() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getQuery____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getRawAuthority() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getRawAuthority____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getRawFragment() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getRawFragment____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getRawPath() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getRawPath____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getRawQuery() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getRawQuery____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getRawSchemeSpecificPart() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getRawSchemeSpecificPart____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getRawUserInfo() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getRawUserInfo____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getScheme() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getScheme____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getSchemeSpecificPart() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getSchemeSpecificPart____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::getUserInfo() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getUserInfo____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint URI::hashCode() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

bool URI::isAbsolute() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    return 0 != cls->_isAbsolute____method.bool_call(get_jobject(), parameter_list);
}

bool URI::isOpaque() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    return 0 != cls->_isOpaque____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::net::URI URI::normalize() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::net::URI result;
    result.steal_local_ref(cls->_normalize____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::net::URI URI::parseServerAuthority() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::net::URI result;
    result.steal_local_ref(cls->_parseServerAuthority____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::net::URI URI::relativize(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URI >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    URI__class* cls = _class.get();
    ::javaproxy::java::net::URI result;
    result.steal_local_ref(cls->_relativize__Ljava_net_URI_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::net::URI URI::resolve(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    URI__class* cls = _class.get();
    ::javaproxy::java::net::URI result;
    result.steal_local_ref(cls->_resolve__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::net::URI URI::resolve(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URI >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    URI__class* cls = _class.get();
    ::javaproxy::java::net::URI result;
    result.steal_local_ref(cls->_resolve__Ljava_net_URI_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::toASCIIString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toASCIIString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String URI::toString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::net::URL URI::toURL() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    URI__class* cls = _class.get();
    ::javaproxy::java::net::URL result;
    result.steal_local_ref(cls->_toURL____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* URI::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* URI::java_class_() { return URI__class::class_factory.clas(); }


void URI::Lazy_class::initialize() const {
    _value = URI__class::class_factory.clas();
}


}}}
