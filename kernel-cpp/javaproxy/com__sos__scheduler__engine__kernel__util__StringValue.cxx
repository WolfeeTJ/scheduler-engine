// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__util__StringValue.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace util { 

struct StringValue__class : ::zschimmer::javabridge::Class
{
    StringValue__class(const string& class_name);
   ~StringValue__class();

    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _getString____method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Method const _isEmpty____method;
    ::zschimmer::javabridge::Method const _toString____method;

    static const ::zschimmer::javabridge::class_factory< StringValue__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< StringValue__class > StringValue__class::class_factory ("com.sos.scheduler.engine.kernel.util.StringValue");

StringValue__class::StringValue__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_getString____method(this, "getString", "()Ljava/lang/String;")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_isEmpty____method(this, "isEmpty", "()Z")
    ,_toString____method(this, "toString", "()Ljava/lang/String;"){}

StringValue__class::~StringValue__class() {}




StringValue::StringValue(jobject jo) { if (jo) assign_(jo); }

StringValue::StringValue(const StringValue& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    StringValue::StringValue(StringValue&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

StringValue::~StringValue() { assign_(NULL); }




bool StringValue::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    StringValue__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String StringValue::getString() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    StringValue__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint StringValue::hashCode() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    StringValue__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

bool StringValue::isEmpty() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    StringValue__class* cls = _class.get();
    return 0 != cls->_isEmpty____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String StringValue::toString() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    StringValue__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* StringValue::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* StringValue::java_class_() { return StringValue__class::class_factory.clas(); }


void StringValue::Lazy_class::initialize() {
    _value = StringValue__class::class_factory.clas();
}


}}}}}}}
