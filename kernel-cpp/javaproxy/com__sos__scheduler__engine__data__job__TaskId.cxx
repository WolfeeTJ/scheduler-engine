// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__data__job__TaskId.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace data { namespace job { 

struct TaskId__class : ::zschimmer::javabridge::Class
{
    TaskId__class(const string& class_name);
   ~TaskId__class();

    ::zschimmer::javabridge::Method const _value____method;

    static const ::zschimmer::javabridge::class_factory< TaskId__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< TaskId__class > TaskId__class::class_factory ("com.sos.scheduler.engine.data.job.TaskId");

TaskId__class::TaskId__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_value____method(this, "value", "()I"){}

TaskId__class::~TaskId__class() {}




TaskId::TaskId(jobject jo) { if (jo) assign_(jo); }

TaskId::TaskId(const TaskId& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    TaskId::TaskId(TaskId&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

TaskId::~TaskId() { assign_(NULL); }




jint TaskId::value() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskId__class* cls = _class.get();
    return cls->_value____method.int_call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* TaskId::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* TaskId::java_class_() { return TaskId__class::class_factory.clas(); }


void TaskId::Lazy_class::initialize() const {
    _value = TaskId__class::class_factory.clas();
}


}}}}}}}
