// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__filebased__FileBased.h"
#include "com__sos__scheduler__engine__cplusplus__runtime__Sister.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace filebased { 

struct FileBased__class : ::zschimmer::javabridge::Class
{
    FileBased__class(const string& class_name);
   ~FileBased__class();


    static const ::zschimmer::javabridge::class_factory< FileBased__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< FileBased__class > FileBased__class::class_factory ("com.sos.scheduler.engine.kernel.filebased.FileBased");

FileBased__class::FileBased__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
{}

FileBased__class::~FileBased__class() {}




FileBased::FileBased(jobject jo) { if (jo) assign_(jo); }

FileBased::FileBased(const FileBased& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    FileBased::FileBased(FileBased&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

FileBased::~FileBased() { assign_(NULL); }





::zschimmer::javabridge::Class* FileBased::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* FileBased::java_class_() { return FileBased__class::class_factory.clas(); }


void FileBased::Lazy_class::initialize() const {
    _value = FileBased__class::class_factory.clas();
}


}}}}}}}
