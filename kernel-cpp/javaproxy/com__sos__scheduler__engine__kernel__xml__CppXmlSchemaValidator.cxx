// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__xml__CppXmlSchemaValidator.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "org__w3c__dom__Document.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace xml { 

struct CppXmlSchemaValidator__class : ::zschimmer::javabridge::Class
{
    CppXmlSchemaValidator__class(const string& class_name);
   ~CppXmlSchemaValidator__class();

    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _validate__Lorg_w3c_dom_Document_2__method;

    static const ::zschimmer::javabridge::class_factory< CppXmlSchemaValidator__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< CppXmlSchemaValidator__class > CppXmlSchemaValidator__class::class_factory ("com.sos.scheduler.engine.kernel.xml.CppXmlSchemaValidator");

CppXmlSchemaValidator__class::CppXmlSchemaValidator__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor__Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;)V")
    ,_validate__Lorg_w3c_dom_Document_2__method(this, "validate", "(Lorg/w3c/dom/Document;)V"){}

CppXmlSchemaValidator__class::~CppXmlSchemaValidator__class() {}



CppXmlSchemaValidator CppXmlSchemaValidator::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    CppXmlSchemaValidator result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    CppXmlSchemaValidator__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}


CppXmlSchemaValidator::CppXmlSchemaValidator(jobject jo) { if (jo) assign_(jo); }

CppXmlSchemaValidator::CppXmlSchemaValidator(const CppXmlSchemaValidator& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    CppXmlSchemaValidator::CppXmlSchemaValidator(CppXmlSchemaValidator&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

CppXmlSchemaValidator::~CppXmlSchemaValidator() { assign_(NULL); }




void CppXmlSchemaValidator::validate(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Document >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    CppXmlSchemaValidator__class* cls = _class.get();
    cls->_validate__Lorg_w3c_dom_Document_2__method.call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* CppXmlSchemaValidator::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* CppXmlSchemaValidator::java_class_() { return CppXmlSchemaValidator__class::class_factory.clas(); }


void CppXmlSchemaValidator::Lazy_class::initialize() const {
    _value = CppXmlSchemaValidator__class::class_factory.clas();
}


}}}}}}}
