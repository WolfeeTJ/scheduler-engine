// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "spooler.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Proxy_class> has_proxy< ::sos::scheduler::http::Java_response >::proxy_class_factory("com.sos.scheduler.engine.kernel.cppproxy.HttpResponseCImpl");

}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static void JNICALL Release(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::http::Java_response* o_ = has_proxy< ::sos::scheduler::http::Java_response >::of_cpp_reference(cppReference,"::sos::scheduler::http::Java_response::Release()");
        (o_->Release());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jobject JNICALL chunk_1reader(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::http::Java_response* o_ = has_proxy< ::sos::scheduler::http::Java_response >::of_cpp_reference(cppReference,"::sos::scheduler::http::Java_response::chunk_reader()");
        return Has_proxy::jobject_of(o_->chunk_reader());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jobject();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static void JNICALL close(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::http::Java_response* o_ = has_proxy< ::sos::scheduler::http::Java_response >::of_cpp_reference(cppReference,"::sos::scheduler::http::Java_response::close()");
        (o_->close());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL header_1string(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::http::Java_response* o_ = has_proxy< ::sos::scheduler::http::Java_response >::of_cpp_reference(cppReference,"::sos::scheduler::http::Java_response::header_string()");
        return env.jstring_from_string(o_->header_string());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jint JNICALL status(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::http::Java_response* o_ = has_proxy< ::sos::scheduler::http::Java_response >::of_cpp_reference(cppReference,"::sos::scheduler::http::Java_response::status()");
        return (o_->status());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jint();
    }
}

}}}}}}}

const static JNINativeMethod native_methods[] = {
    { (char*)"Release__native", (char*)"(J)V", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::Release },
    { (char*)"chunk_reader__native", (char*)"(J)Lcom/sos/scheduler/engine/kernel/cppproxy/HttpChunkReaderC;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::chunk_1reader },
    { (char*)"close__native", (char*)"(J)V", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::close },
    { (char*)"header_string__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::header_1string },
    { (char*)"status__native", (char*)"(J)I", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::status }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_proxy< ::sos::scheduler::http::Java_response >::register_cpp_proxy_class_in_java() {
        Env env;
        Class* cls = has_proxy< ::sos::scheduler::http::Java_response >::proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, sizeof native_methods / sizeof native_methods[0]);
        if (ret < 0)  env.throw_java("RegisterNatives", "com.sos.scheduler.engine.kernel.cppproxy.HttpResponseCImpl");
    }

}}
