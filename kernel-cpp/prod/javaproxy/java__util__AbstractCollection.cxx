// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__util__AbstractCollection.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace java { namespace util { 

struct AbstractCollection__class : ::zschimmer::javabridge::Class
{
    AbstractCollection__class(const string& class_name);
   ~AbstractCollection__class();

    ::zschimmer::javabridge::Method const _add__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _clear____method;
    ::zschimmer::javabridge::Method const _contains__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _isEmpty____method;
    ::zschimmer::javabridge::Method const _remove__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _size____method;
    ::zschimmer::javabridge::Method const _toString____method;

    static const ::zschimmer::javabridge::class_factory< AbstractCollection__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< AbstractCollection__class > AbstractCollection__class::class_factory ("java.util.AbstractCollection");

AbstractCollection__class::AbstractCollection__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_add__Ljava_lang_Object_2__method(this, "add", "(Ljava/lang/Object;)Z")
    ,_clear____method(this, "clear", "()V")
    ,_contains__Ljava_lang_Object_2__method(this, "contains", "(Ljava/lang/Object;)Z")
    ,_isEmpty____method(this, "isEmpty", "()Z")
    ,_remove__Ljava_lang_Object_2__method(this, "remove", "(Ljava/lang/Object;)Z")
    ,_size____method(this, "size", "()I")
    ,_toString____method(this, "toString", "()Ljava/lang/String;"){}

AbstractCollection__class::~AbstractCollection__class() {}




AbstractCollection::AbstractCollection(jobject jo) { if (jo) assign_(jo); }

AbstractCollection::AbstractCollection(const AbstractCollection& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    AbstractCollection::AbstractCollection(AbstractCollection&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

AbstractCollection::~AbstractCollection() { assign_(NULL); }




bool AbstractCollection::add(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractCollection__class* cls = _class.get();
    return 0 != cls->_add__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

void AbstractCollection::clear() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractCollection__class* cls = _class.get();
    cls->_clear____method.call(get_jobject(), parameter_list);
}

bool AbstractCollection::contains(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractCollection__class* cls = _class.get();
    return 0 != cls->_contains__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

bool AbstractCollection::isEmpty() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractCollection__class* cls = _class.get();
    return 0 != cls->_isEmpty____method.bool_call(get_jobject(), parameter_list);
}

bool AbstractCollection::remove(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractCollection__class* cls = _class.get();
    return 0 != cls->_remove__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

jint AbstractCollection::size() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractCollection__class* cls = _class.get();
    return cls->_size____method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String AbstractCollection::toString() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractCollection__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* AbstractCollection::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* AbstractCollection::java_class_() { return AbstractCollection__class::class_factory.clas(); }


void AbstractCollection::Lazy_class::initialize() {
    _value = AbstractCollection__class::class_factory.clas();
}


}}}
