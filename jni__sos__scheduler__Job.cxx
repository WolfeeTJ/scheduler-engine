// *** Generated by com.sos.cplusplus.generator ***
#include "spooler.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Proxy_class> has_proxy< ::sos::scheduler::Job >::proxy_class_factory("com.sos.scheduler.kernel.core.cppproxy.JobCImpl");

}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace kernel { namespace core { namespace cppproxy { 

static jstring JNICALL name(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_proxy< ::sos::scheduler::Job >::of_proxys_cpp_reference(cppReference)->name());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace kernel { namespace core { namespace cppproxy { 

static jstring JNICALL path(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_proxy< ::sos::scheduler::Job >::of_proxys_cpp_reference(cppReference)->path());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

const static JNINativeMethod native_methods[] = {
{ "name__native", "(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::kernel::core::cppproxy::name },
{ "path__native", "(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::kernel::core::cppproxy::path }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_proxy< ::sos::scheduler::Job>::register_cpp_proxy_class_in_java() {
        Env env;
        Class* cls = ::sos::scheduler::Job::proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, NO_OF(native_methods));
        if (ret < 0)  env.throw_java("RegisterNatives");
    }

}}
