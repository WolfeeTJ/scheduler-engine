// *** Generated by com.sos.cplusplus.generator ***
#include "spooler.h"
#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_java_proxy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Java_proxy_class> has_java_proxy< ::sos::scheduler::Job >::java_proxy_class_factory("com.sos.scheduler.intern.cppproxy.JobCImpl");

}}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_JobC_name(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy< ::sos::scheduler::Job >::of_java_proxy_cpp_reference(cppReference)->name());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_JobC_path(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy< ::sos::scheduler::Job >::of_java_proxy_cpp_reference(cppReference)->path());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

const static JNINativeMethod native_methods[] = {
{ "name__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_JobC_name },
{ "path__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_JobC_path }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_java_proxy<::sos::scheduler::Job>::initialize_java_proxy() {
        Env env;
        Class* cls = ::sos::scheduler::Job::java_proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, NO_OF(native_methods));
        if (ret < 0)  env.throw_java("RegisterNatives");
    }

}}
