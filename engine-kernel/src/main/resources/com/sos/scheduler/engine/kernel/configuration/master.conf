jobscheduler.master {
  # Set to true, to use the legacy but slow C++ database access for web services.
  # Long queries (>= 60s) may delay cluster heart beat with sudden JobScheduler death as a result.
  legacy-cpp-jdbc = false

  # OrderStatistics of distributed orders will be calculated in parallel
  # if size (in bytes) of database field ORDER_XML is below this limit.
  # Extra memory usage may be 3 * availableProcessors as much.
  parallelize-below-order-xml-size = 100kB
}

akka {
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  log-dead-letters = 0
  scheduler.tick-duration = 1s   # Or 100ms - With default (10ms under Windows), we have 1% CPU usage when idling
  jvm-exit-on-fatal-error = false
}

spray.can {
  server {
    # If a request hasn't been responded to after the time period set here
    # a `spray.http.Timedout` message will be sent to the timeout handler.
    # Set to `infinite` to completely disable request timeouts.
    request-timeout = 1 day

    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle connection timeouts.
    ## For Spray, it must be longer than request-timeout
    idle-timeout = 86460s

    # Enables/disables the addition of a `Raw-Request-URI` header holding the
    # original raw request URI as the client has sent it.
    ## For NewWebServicePlugin's forwarder to C++ web server
    raw-request-uri-header = on
  }
  client {
    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle timeouts.
    # idle-timeout should be shorter than any firewall timeout. See also the servers Akka configuration. -Zschimmer
    idle-timeout = 300s  # Spray seems to double this time. JS-1617

    # The time period within which the TCP connecting process must be completed. Set to `infinite` to disable.
    connecting-timeout = 30s

    # The max time period that a client connection will be waiting for a response
    # before triggering a request timeout. The timer for this logic is not started
    # until the connection is actually in a state to receive the response, which
    # may be quite some time after the request has been received from the
    # application!
    # There are two main reasons to delay the start of the request timeout timer:
    # 1. On the host-level API with pipelining disabled:
    #    If the request cannot be sent immediately because all connections are
    #    currently busy with earlier requests it has to be queued until a
    #    connection becomes available.
    # 2. With pipelining enabled:
    #    The request timeout timer starts only once the response for the
    #    preceding request on the connection has arrived.
    # Set to `infinite` to completely disable request timeouts.
    request-timeout = infinite
  }
  host-connector {
    # The maximum number of parallel connections that an `HttpHostConnector`
    # is allowed to establish to a host. Must be greater than zero.
    max-connections = 2100   # Makes 1000 tasks possible (with 1 tunnel and possibly one waiting task close command for each task)

    # The maximum number of times an `HttpHostConnector` attempts to repeat failed requests (if the request can be safely retried) before giving up and returning an error.
    max-retries = 0
  }
}

spray.servlet {
  // This is for NewWebServicePlugin when used on top of JettyPlugin.
  boot-class = com.sos.scheduler.engine.plugins.newwebservice.NewWebServicePlugin   # spray.servlet.ConnectorSettings requires this dummy and we have replaced spray.servlet.Initializer
  root-path = ""

  # If a request hasn't been responded to after the time period set here
  # a `spray.http.Timedout` message will be sent to the timeout handler.
  # Set to `infinite` to completely disable request timeouts.
  request-timeout = 1 day

  # For NewWebServicePlugin's forwarder to C++ web server
  servlet-request-access = on
}
