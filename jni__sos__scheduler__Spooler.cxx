// *** Generated by com.sos.cplusplus.generator ***
#include "spooler.h"
#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_java_proxy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Java_proxy_class> has_java_proxy<::sos::scheduler::Spooler>::java_proxy_class_factory("com.sos.scheduler.intern.cppproxy.SpoolerCImpl");

}}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_set_1id__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->set_id(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_id_1for_1db(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->id_for_db());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_http_1url(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->http_url());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jint JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_udp_1port(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->udp_port());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jint();
    }
}

extern "C" jint JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_tcp_1port(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->tcp_port());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jint();
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_include_1path(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->include_path());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_temp_1dir(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->temp_dir());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_state_1name(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->state_name());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_log_1directory(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->log_directory());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jboolean JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_is_1service(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->is_service());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_string_1need_1db(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->string_need_db());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_log_1show_1state(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->log_show_state());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_assign_1stdout(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->assign_stdout());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1pause(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cmd_pause());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1continue(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cmd_continue());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate_1after_1error__Ljava_lang_String_2Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0, jstring p1)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cmd_terminate_after_error(env.string_from_jstring(p0), env.string_from_jstring(p1)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate__Z(JNIEnv* jenv, jobject, jlong cppReference, jboolean p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cmd_terminate(p0 != 0));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cmd_terminate());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate__ZI(JNIEnv* jenv, jobject, jlong cppReference, jboolean p0, jint p1)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cmd_terminate(p0 != 0, p1));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate__ZILjava_lang_String_2Z(JNIEnv* jenv, jobject, jlong cppReference, jboolean p0, jint p1, jstring p2, jboolean p3)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cmd_terminate(p0 != 0, p1, env.string_from_jstring(p2), p3 != 0));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate__ZILjava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jboolean p0, jint p1, jstring p2)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cmd_terminate(p0 != 0, p1, env.string_from_jstring(p2)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate_1and_1restart__I(JNIEnv* jenv, jobject, jlong cppReference, jint p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cmd_terminate_and_restart(p0));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1let_1run_1terminate_1and_1restart(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cmd_let_run_terminate_and_restart());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_abort_1immediately_1after_1distribution_1error__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->abort_immediately_after_distribution_error(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_abort_1immediately__ZLjava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jboolean p0, jstring p1)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->abort_immediately(p0 != 0, env.string_from_jstring(p1)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_abort_1now__Z(JNIEnv* jenv, jobject, jlong cppReference, jboolean p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->abort_now(p0 != 0));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_execute_1state_1cmd(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->execute_state_cmd());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" jboolean JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_is_1termination_1state_1cmd(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->is_termination_state_cmd());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_load_1arg(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->load_arg());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_self_1check(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->self_check());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_update_1console_1title__I(JNIEnv* jenv, jobject, jlong cppReference, jint p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->update_console_title(p0));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_execute_1config_1commands(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->execute_config_commands());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_run_1check_1ctrl_1c(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->run_check_ctrl_c());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_end_1waiting_1tasks(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->end_waiting_tasks());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_nichts_1getan__ILjava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jint p0, jstring p1)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->nichts_getan(p0, env.string_from_jstring(p1)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" jboolean JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_name_1is_1valid__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->name_is_valid(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_check_1name__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->check_name(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_check_1cluster(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->check_cluster());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_assert_1is_1activated__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->assert_is_activated(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" jboolean JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_is_1cluster(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->is_cluster());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

extern "C" jboolean JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cluster_1is_1active(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cluster_is_active());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

extern "C" jboolean JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_has_1exclusiveness(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->has_exclusiveness());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

extern "C" jboolean JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_orders_1are_1distributed(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->orders_are_distributed());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_assert_1are_1orders_1distributed__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->assert_are_orders_distributed(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cluster_1member_1id(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->cluster_member_id());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_distributed_1member_1id(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->distributed_member_id());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_db_1cluster_1member_1id(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->db_cluster_member_id());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_db_1distributed_1member_1id(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->db_distributed_member_id());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jboolean JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_signaled(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->signaled());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_send_1cmd(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->send_cmd());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_register_1pid__I(JNIEnv* jenv, jobject, jlong cppReference, jint p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->register_pid(p0));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_register_1pid__IZ(JNIEnv* jenv, jobject, jlong cppReference, jint p0, jboolean p1)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->register_pid(p0, p1 != 0));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_unregister_1pid__I(JNIEnv* jenv, jobject, jlong cppReference, jint p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->unregister_pid(p0));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" jboolean JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_is_1machine_1suspendable(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->is_machine_suspendable());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_begin_1dont_1suspend_1machine(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->begin_dont_suspend_machine());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_end_1dont_1suspend_1machine(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->end_dont_suspend_machine());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_suspend_1machine(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->suspend_machine());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_java_1work_1dir(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->java_work_dir());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jobject JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_job_1subsystem(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->job_subsystem())->get_jobject();
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jobject();
    }
}

extern "C" jobject JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_job_1subsystem_1or_1null(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->job_subsystem_or_null())->get_jobject();
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jobject();
    }
}

extern "C" jboolean JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_has_1any_1task(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->has_any_task());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_detect_1warning_1and_1send_1mail(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->detect_warning_and_send_mail());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_name(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->name());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_run(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->run());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" jobject JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_log(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->log())->get_jobject();
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jobject();
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_load(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->load());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_start(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->start());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_stop(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->stop());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_directory(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->directory());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_id(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->id());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_signal__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->signal(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_activate(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        (has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->activate());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" jstring JNICALL Java_com_sos_scheduler_intern_cppproxy_SpoolerC_param(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        return env.jstring_from_string(has_java_proxy<::sos::scheduler::Spooler>::of_java_proxy_cpp_reference(cppReference)->param());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

const static JNINativeMethod native_methods[] = {
{ "set_id__native", "(JLjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_set_1id__Ljava_lang_String_2 },
{ "id_for_db__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_id_1for_1db },
{ "http_url__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_http_1url },
{ "udp_port__native", "(J)I", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_udp_1port },
{ "tcp_port__native", "(J)I", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_tcp_1port },
{ "include_path__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_include_1path },
{ "temp_dir__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_temp_1dir },
{ "state_name__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_state_1name },
{ "log_directory__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_log_1directory },
{ "is_service__native", "(J)Z", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_is_1service },
{ "string_need_db__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_string_1need_1db },
{ "log_show_state__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_log_1show_1state },
{ "assign_stdout__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_assign_1stdout },
{ "cmd_pause__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1pause },
{ "cmd_continue__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1continue },
{ "cmd_terminate_after_error__native", "(JLjava/lang/String;Ljava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate_1after_1error__Ljava_lang_String_2Ljava_lang_String_2 },
{ "cmd_terminate__native", "(JZ)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate__Z },
{ "cmd_terminate__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate },
{ "cmd_terminate__native", "(JZI)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate__ZI },
{ "cmd_terminate__native", "(JZILjava/lang/String;Z)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate__ZILjava_lang_String_2Z },
{ "cmd_terminate__native", "(JZILjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate__ZILjava_lang_String_2 },
{ "cmd_terminate_and_restart__native", "(JI)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1terminate_1and_1restart__I },
{ "cmd_let_run_terminate_and_restart__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cmd_1let_1run_1terminate_1and_1restart },
{ "abort_immediately_after_distribution_error__native", "(JLjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_abort_1immediately_1after_1distribution_1error__Ljava_lang_String_2 },
{ "abort_immediately__native", "(JZLjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_abort_1immediately__ZLjava_lang_String_2 },
{ "abort_now__native", "(JZ)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_abort_1now__Z },
{ "execute_state_cmd__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_execute_1state_1cmd },
{ "is_termination_state_cmd__native", "(J)Z", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_is_1termination_1state_1cmd },
{ "load_arg__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_load_1arg },
{ "self_check__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_self_1check },
{ "update_console_title__native", "(JI)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_update_1console_1title__I },
{ "execute_config_commands__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_execute_1config_1commands },
{ "run_check_ctrl_c__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_run_1check_1ctrl_1c },
{ "end_waiting_tasks__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_end_1waiting_1tasks },
{ "nichts_getan__native", "(JILjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_nichts_1getan__ILjava_lang_String_2 },
{ "name_is_valid__native", "(JLjava/lang/String;)Z", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_name_1is_1valid__Ljava_lang_String_2 },
{ "check_name__native", "(JLjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_check_1name__Ljava_lang_String_2 },
{ "check_cluster__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_check_1cluster },
{ "assert_is_activated__native", "(JLjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_assert_1is_1activated__Ljava_lang_String_2 },
{ "is_cluster__native", "(J)Z", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_is_1cluster },
{ "cluster_is_active__native", "(J)Z", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cluster_1is_1active },
{ "has_exclusiveness__native", "(J)Z", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_has_1exclusiveness },
{ "orders_are_distributed__native", "(J)Z", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_orders_1are_1distributed },
{ "assert_are_orders_distributed__native", "(JLjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_assert_1are_1orders_1distributed__Ljava_lang_String_2 },
{ "cluster_member_id__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_cluster_1member_1id },
{ "distributed_member_id__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_distributed_1member_1id },
{ "db_cluster_member_id__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_db_1cluster_1member_1id },
{ "db_distributed_member_id__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_db_1distributed_1member_1id },
{ "signaled__native", "(J)Z", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_signaled },
{ "send_cmd__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_send_1cmd },
{ "register_pid__native", "(JI)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_register_1pid__I },
{ "register_pid__native", "(JIZ)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_register_1pid__IZ },
{ "unregister_pid__native", "(JI)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_unregister_1pid__I },
{ "is_machine_suspendable__native", "(J)Z", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_is_1machine_1suspendable },
{ "begin_dont_suspend_machine__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_begin_1dont_1suspend_1machine },
{ "end_dont_suspend_machine__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_end_1dont_1suspend_1machine },
{ "suspend_machine__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_suspend_1machine },
{ "java_work_dir__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_java_1work_1dir },
{ "job_subsystem__native", "(J)Lcom/sos/scheduler/intern/cppproxy/Job_subsystemC;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_job_1subsystem },
{ "job_subsystem_or_null__native", "(J)Lcom/sos/scheduler/intern/cppproxy/Job_subsystemC;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_job_1subsystem_1or_1null },
{ "has_any_task__native", "(J)Z", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_has_1any_1task },
{ "detect_warning_and_send_mail__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_detect_1warning_1and_1send_1mail },
{ "name__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_name },
{ "run__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_run },
{ "log__native", "(J)Lcom/sos/scheduler/intern/cppproxy/Prefix_logC;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_log },
{ "load__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_load },
{ "start__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_start },
{ "stop__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_stop },
{ "directory__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_directory },
{ "id__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_id },
{ "signal__native", "(JLjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_signal__Ljava_lang_String_2 },
{ "activate__native", "(J)V", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_activate },
{ "param__native", "(J)Ljava/lang/String;", (void*)Java_com_sos_scheduler_intern_cppproxy_SpoolerC_param }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_java_proxy<::sos::scheduler::Spooler>::initialize_java_proxy() {
        Env env;
        Class* cls = ::sos::scheduler::Spooler::java_proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, NO_OF(native_methods));
        if (ret < 0)  env.throw_java("RegisterNatives");
    }

}}
