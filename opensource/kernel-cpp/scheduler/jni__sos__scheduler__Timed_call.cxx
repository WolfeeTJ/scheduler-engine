// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "spooler.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Proxy_class> has_proxy< ::sos::scheduler::Timed_call >::proxy_class_factory("com.sos.scheduler.engine.kernel.cppproxy.Timed_callCImpl");

}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jlong JNICALL at_1millis(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Timed_call* o_ = has_proxy< ::sos::scheduler::Timed_call >::of_cpp_reference(cppReference,"::sos::scheduler::Timed_call::at_millis()");
        return (o_->at_millis());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jlong();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static void JNICALL call(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Timed_call* o_ = has_proxy< ::sos::scheduler::Timed_call >::of_cpp_reference(cppReference,"::sos::scheduler::Timed_call::call()");
        (o_->call());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL obj_1name(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Timed_call* o_ = has_proxy< ::sos::scheduler::Timed_call >::of_cpp_reference(cppReference,"::sos::scheduler::Timed_call::obj_name()");
        return env.jstring_from_string(o_->obj_name());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

const static JNINativeMethod native_methods[] = {
    { (char*)"at_millis__native", (char*)"(J)J", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::at_1millis },
    { (char*)"call__native", (char*)"(J)V", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::call },
    { (char*)"obj_name__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::obj_1name }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_proxy< ::sos::scheduler::Timed_call >::register_cpp_proxy_class_in_java() {
        Env env;
        Class* cls = has_proxy< ::sos::scheduler::Timed_call >::proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, 3);
        if (ret < 0)  env.throw_java("RegisterNatives");
    }

}}
