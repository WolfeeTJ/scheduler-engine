// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "spooler.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Proxy_class> has_proxy< ::sos::scheduler::Database >::proxy_class_factory("com.sos.scheduler.engine.kernel.cppproxy.DatabaseCImpl");

}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jobject JNICALL properties(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Database* o_ = has_proxy< ::sos::scheduler::Database >::of_cpp_reference(cppReference,"::sos::scheduler::Database::properties()");
        return Has_proxy::jobject_of(o_->properties());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jobject();
    }
}

}}}}}}}

const static JNINativeMethod native_methods[] = {
    { (char*)"properties__native", (char*)"(J)Lcom/sos/scheduler/engine/kernel/cppproxy/Variable_setC;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::properties }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_proxy< ::sos::scheduler::Database >::register_cpp_proxy_class_in_java() {
        Env env;
        Class* cls = has_proxy< ::sos::scheduler::Database >::proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, 1);
        if (ret < 0)  env.throw_java("RegisterNatives");
    }

}}
