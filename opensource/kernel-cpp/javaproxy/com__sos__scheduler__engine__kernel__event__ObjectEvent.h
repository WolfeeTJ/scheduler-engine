// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#ifndef _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_EVENT_OBJECTEVENT_H_
#define _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_EVENT_OBJECTEVENT_H_

#include "com__sos__scheduler__engine__eventbus__AbstractEvent.h"
#include "java__lang__Object.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace eventbus { struct AbstractEvent; }}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace eventbus { struct Event; }}}}}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}


namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace event { 


struct ObjectEvent__class;

struct ObjectEvent : ::zschimmer::javabridge::proxy_jobject< ObjectEvent >, ::javaproxy::com::sos::scheduler::engine::eventbus::AbstractEvent {
    static ObjectEvent new_instance();

    ObjectEvent(jobject = NULL);

    ObjectEvent(const ObjectEvent&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        ObjectEvent(ObjectEvent&&);
    #endif

    ~ObjectEvent();

    ObjectEvent& operator=(jobject jo) { assign_(jo); return *this; }
    ObjectEvent& operator=(const ObjectEvent& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        ObjectEvent& operator=(ObjectEvent&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< ObjectEvent >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< ObjectEvent >::set_jobject(jo);
        ::javaproxy::com::sos::scheduler::engine::eventbus::AbstractEvent::set_jobject(jo);
    }
  public:

    ::javaproxy::java::lang::String toString();

    ::zschimmer::javabridge::Class* java_object_class_();

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<ObjectEvent__class*> {
        void initialize();
    };

    Lazy_class _class;
};


}}}}}}}

#endif
