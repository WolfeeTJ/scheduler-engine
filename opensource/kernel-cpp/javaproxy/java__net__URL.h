// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#ifndef _JAVAPROXY_JAVA_NET_URL_H_
#define _JAVAPROXY_JAVA_NET_URL_H_

#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"
#include "java__lang__Object.h"

namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}
namespace javaproxy { namespace java { namespace net { struct URI; }}}


namespace javaproxy { namespace java { namespace net { 


struct URL__class;

struct URL : ::zschimmer::javabridge::proxy_jobject< URL >, ::javaproxy::java::lang::Object {
    static URL new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0);
    static URL new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, jint p2, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p3);
    static URL new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2);
    static URL new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URL >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1);

    URL(jobject = NULL);

    URL(const URL&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        URL(URL&&);
    #endif

    ~URL();

    URL& operator=(jobject jo) { assign_(jo); return *this; }
    URL& operator=(const URL& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        URL& operator=(URL&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< URL >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< URL >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    bool equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;
    ::javaproxy::java::lang::String getAuthority() const;
    ::javaproxy::java::lang::Object getContent() const;
    jint getDefaultPort() const;
    ::javaproxy::java::lang::String getFile() const;
    ::javaproxy::java::lang::String getHost() const;
    ::javaproxy::java::lang::String getPath() const;
    jint getPort() const;
    ::javaproxy::java::lang::String getProtocol() const;
    ::javaproxy::java::lang::String getQuery() const;
    ::javaproxy::java::lang::String getRef() const;
    ::javaproxy::java::lang::String getUserInfo() const;
    jint hashCode() const;
    bool sameFile(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URL >& p0) const;
    ::javaproxy::java::lang::String toExternalForm() const;
    ::javaproxy::java::lang::String toString() const;
    ::javaproxy::java::net::URI toURI() const;

    ::zschimmer::javabridge::Class* java_object_class_() const;

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<URL__class*> {
        void initialize() const;
    };

    Lazy_class _class;
};


}}}

#endif
