// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#ifndef _JAVAPROXY_JAVA_UTIL_HASHMAP_H_
#define _JAVAPROXY_JAVA_UTIL_HASHMAP_H_

#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"
#include "java__lang__Object.h"
#include "java__util__AbstractMap.h"

namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}
namespace javaproxy { namespace java { namespace util { struct AbstractMap; }}}


namespace javaproxy { namespace java { namespace util { 


struct HashMap__class;

struct HashMap : ::zschimmer::javabridge::proxy_jobject< HashMap >, ::javaproxy::java::util::AbstractMap {
    static HashMap new_instance();
    static HashMap new_instance(jint p0);
    static HashMap new_instance(jint p0, jfloat p1);

    HashMap(jobject = NULL);

    HashMap(const HashMap&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        HashMap(HashMap&&);
    #endif

    ~HashMap();

    HashMap& operator=(jobject jo) { assign_(jo); return *this; }
    HashMap& operator=(const HashMap& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        HashMap& operator=(HashMap&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< HashMap >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< HashMap >::set_jobject(jo);
        ::javaproxy::java::util::AbstractMap::set_jobject(jo);
    }
  public:

    void clear() const;
    ::javaproxy::java::lang::Object clone() const;
    bool containsKey(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;
    bool containsValue(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;
    ::javaproxy::java::lang::Object get(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;
    bool isEmpty() const;
    ::javaproxy::java::lang::Object put(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) const;
    ::javaproxy::java::lang::Object remove(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;
    jint size() const;

    ::zschimmer::javabridge::Class* java_object_class_() const;

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<HashMap__class*> {
        void initialize() const;
    };

    Lazy_class _class;
};


}}}

#endif
