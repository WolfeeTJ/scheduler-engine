// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__common__scalautil__Resources$.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace common { namespace scalautil { 

struct Resources$__class : ::zschimmer::javabridge::Class
{
    Resources$__class(const string& class_name);
   ~Resources$__class();

    ::zschimmer::javabridge::Method const _resourceAsString__Ljava_lang_String_2__method;

    static const ::zschimmer::javabridge::class_factory< Resources$__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Resources$__class > Resources$__class::class_factory ("com.sos.scheduler.engine.common.scalautil.Resources$");

Resources$__class::Resources$__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_resourceAsString__Ljava_lang_String_2__method(this, "resourceAsString", "(Ljava/lang/String;)Ljava/lang/String;"){}

Resources$__class::~Resources$__class() {}




Resources$::Resources$(jobject jo) { if (jo) assign_(jo); }

Resources$::Resources$(const Resources$& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Resources$::Resources$(Resources$&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Resources$::~Resources$() { assign_(NULL); }




::javaproxy::java::lang::String Resources$::resourceAsString(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Resources$__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_resourceAsString__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* Resources$::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Resources$::java_class_() { return Resources$__class::class_factory.clas(); }


void Resources$::Lazy_class::initialize() const {
    _value = Resources$__class::class_factory.clas();
}


}}}}}}}
