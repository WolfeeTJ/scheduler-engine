// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__eventbus__AbstractEvent.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace eventbus { 

struct AbstractEvent__class : ::zschimmer::javabridge::Class
{
    AbstractEvent__class(const string& class_name);
   ~AbstractEvent__class();


    static const ::zschimmer::javabridge::class_factory< AbstractEvent__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< AbstractEvent__class > AbstractEvent__class::class_factory ("com.sos.scheduler.engine.eventbus.AbstractEvent");

AbstractEvent__class::AbstractEvent__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
{}

AbstractEvent__class::~AbstractEvent__class() {}




AbstractEvent::AbstractEvent(jobject jo) { if (jo) assign_(jo); }

AbstractEvent::AbstractEvent(const AbstractEvent& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    AbstractEvent::AbstractEvent(AbstractEvent&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

AbstractEvent::~AbstractEvent() { assign_(NULL); }





::zschimmer::javabridge::Class* AbstractEvent::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* AbstractEvent::java_class_() { return AbstractEvent__class::class_factory.clas(); }


void AbstractEvent::Lazy_class::initialize() {
    _value = AbstractEvent__class::class_factory.clas();
}


}}}}}}
