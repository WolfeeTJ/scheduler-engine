// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__log__InfoLogEvent.h"
#include "com__sos__scheduler__engine__kernel__log__LogEvent.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace log { 

struct InfoLogEvent__class : ::zschimmer::javabridge::Class
{
    InfoLogEvent__class(const string& class_name);
   ~InfoLogEvent__class();

    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2__method;

    static const ::zschimmer::javabridge::class_factory< InfoLogEvent__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< InfoLogEvent__class > InfoLogEvent__class::class_factory ("com.sos.scheduler.engine.kernel.log.InfoLogEvent");

InfoLogEvent__class::InfoLogEvent__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor__Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;)V"){}

InfoLogEvent__class::~InfoLogEvent__class() {}



InfoLogEvent InfoLogEvent::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    InfoLogEvent result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    InfoLogEvent__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}


InfoLogEvent::InfoLogEvent(jobject jo) { if (jo) assign_(jo); }

InfoLogEvent::InfoLogEvent(const InfoLogEvent& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    InfoLogEvent::InfoLogEvent(InfoLogEvent&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

InfoLogEvent::~InfoLogEvent() { assign_(NULL); }





::zschimmer::javabridge::Class* InfoLogEvent::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* InfoLogEvent::java_class_() { return InfoLogEvent__class::class_factory.clas(); }


void InfoLogEvent::Lazy_class::initialize() {
    _value = InfoLogEvent__class::class_factory.clas();
}


}}}}}}}
