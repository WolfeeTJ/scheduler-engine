// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__order__jobchain__NestedJobChainNode.h"
#include "com__sos__scheduler__engine__kernel__order__jobchain__Node.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace order { namespace jobchain { 

struct NestedJobChainNode__class : ::zschimmer::javabridge::Class
{
    NestedJobChainNode__class(const string& class_name);
   ~NestedJobChainNode__class();


    static const ::zschimmer::javabridge::class_factory< NestedJobChainNode__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< NestedJobChainNode__class > NestedJobChainNode__class::class_factory ("com.sos.scheduler.engine.kernel.order.jobchain.NestedJobChainNode");

NestedJobChainNode__class::NestedJobChainNode__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
{}

NestedJobChainNode__class::~NestedJobChainNode__class() {}




NestedJobChainNode::NestedJobChainNode(jobject jo) { if (jo) assign_(jo); }

NestedJobChainNode::NestedJobChainNode(const NestedJobChainNode& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    NestedJobChainNode::NestedJobChainNode(NestedJobChainNode&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

NestedJobChainNode::~NestedJobChainNode() { assign_(NULL); }





::zschimmer::javabridge::Class* NestedJobChainNode::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* NestedJobChainNode::java_class_() { return NestedJobChainNode__class::class_factory.clas(); }


void NestedJobChainNode::Lazy_class::initialize() const {
    _value = NestedJobChainNode__class::class_factory.clas();
}


}}}}}}}}
