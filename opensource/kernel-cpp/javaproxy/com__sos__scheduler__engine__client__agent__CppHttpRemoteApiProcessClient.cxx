// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__client__agent__CppHttpRemoteApiProcessClient.h"
#include "com__google__inject__Injector.h"
#include "com__sos__scheduler__engine__kernel__async__CppCall.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Api_process_configurationC.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace client { namespace agent { 

struct CppHttpRemoteApiProcessClient__class : ::zschimmer::javabridge::Class
{
    CppHttpRemoteApiProcessClient__class(const string& class_name);
   ~CppHttpRemoteApiProcessClient__class();

    ::zschimmer::javabridge::Static_method const _apply__Lcom_google_inject_Injector_2Lcom_sos_scheduler_engine_kernel_cppproxy_Api_1process_1configurationC_2__method;
    ::zschimmer::javabridge::Method const _closeRemoteTask____method;
    ::zschimmer::javabridge::Method const _killRemoteTask____method;
    ::zschimmer::javabridge::Method const _startRemoteTask__ILcom_sos_scheduler_engine_kernel_async_CppCall_2Lcom_sos_scheduler_engine_kernel_async_CppCall_2__method;
    ::zschimmer::javabridge::Method const _toString____method;

    static const ::zschimmer::javabridge::class_factory< CppHttpRemoteApiProcessClient__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< CppHttpRemoteApiProcessClient__class > CppHttpRemoteApiProcessClient__class::class_factory ("com.sos.scheduler.engine.client.agent.CppHttpRemoteApiProcessClient");

CppHttpRemoteApiProcessClient__class::CppHttpRemoteApiProcessClient__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_apply__Lcom_google_inject_Injector_2Lcom_sos_scheduler_engine_kernel_cppproxy_Api_1process_1configurationC_2__method(this, "apply", "(Lcom/google/inject/Injector;Lcom/sos/scheduler/engine/kernel/cppproxy/Api_process_configurationC;)Lcom/sos/scheduler/engine/client/agent/CppHttpRemoteApiProcessClient;")
    ,_closeRemoteTask____method(this, "closeRemoteTask", "()V")
    ,_killRemoteTask____method(this, "killRemoteTask", "()Z")
    ,_startRemoteTask__ILcom_sos_scheduler_engine_kernel_async_CppCall_2Lcom_sos_scheduler_engine_kernel_async_CppCall_2__method(this, "startRemoteTask", "(ILcom/sos/scheduler/engine/kernel/async/CppCall;Lcom/sos/scheduler/engine/kernel/async/CppCall;)V")
    ,_toString____method(this, "toString", "()Ljava/lang/String;"){}

CppHttpRemoteApiProcessClient__class::~CppHttpRemoteApiProcessClient__class() {}




CppHttpRemoteApiProcessClient::CppHttpRemoteApiProcessClient(jobject jo) { if (jo) assign_(jo); }

CppHttpRemoteApiProcessClient::CppHttpRemoteApiProcessClient(const CppHttpRemoteApiProcessClient& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    CppHttpRemoteApiProcessClient::CppHttpRemoteApiProcessClient(CppHttpRemoteApiProcessClient&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

CppHttpRemoteApiProcessClient::~CppHttpRemoteApiProcessClient() { assign_(NULL); }




::javaproxy::com::sos::scheduler::engine::client::agent::CppHttpRemoteApiProcessClient CppHttpRemoteApiProcessClient::apply(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::google::inject::Injector >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::Api_process_configurationC >& p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    CppHttpRemoteApiProcessClient__class* cls = CppHttpRemoteApiProcessClient__class::class_factory.clas();
    ::javaproxy::com::sos::scheduler::engine::client::agent::CppHttpRemoteApiProcessClient result;
    result.steal_local_ref(cls->_apply__Lcom_google_inject_Injector_2Lcom_sos_scheduler_engine_kernel_cppproxy_Api_1process_1configurationC_2__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

void CppHttpRemoteApiProcessClient::closeRemoteTask() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    CppHttpRemoteApiProcessClient__class* cls = _class.get();
    cls->_closeRemoteTask____method.call(get_jobject(), parameter_list);
}

bool CppHttpRemoteApiProcessClient::killRemoteTask() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    CppHttpRemoteApiProcessClient__class* cls = _class.get();
    return 0 != cls->_killRemoteTask____method.bool_call(get_jobject(), parameter_list);
}

void CppHttpRemoteApiProcessClient::startRemoteTask(jint p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::async::CppCall >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::async::CppCall >& p2) const {
    ::zschimmer::javabridge::raw_parameter_list<3> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].l = p2.get_jobject();
    CppHttpRemoteApiProcessClient__class* cls = _class.get();
    cls->_startRemoteTask__ILcom_sos_scheduler_engine_kernel_async_CppCall_2Lcom_sos_scheduler_engine_kernel_async_CppCall_2__method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String CppHttpRemoteApiProcessClient::toString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    CppHttpRemoteApiProcessClient__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* CppHttpRemoteApiProcessClient::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* CppHttpRemoteApiProcessClient::java_class_() { return CppHttpRemoteApiProcessClient__class::class_factory.clas(); }


void CppHttpRemoteApiProcessClient::Lazy_class::initialize() const {
    _value = CppHttpRemoteApiProcessClient__class::class_factory.clas();
}


}}}}}}}
