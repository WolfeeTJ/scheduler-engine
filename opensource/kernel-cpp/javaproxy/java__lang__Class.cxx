// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__lang__Class.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "java__net__URL.h"

namespace javaproxy { namespace java { namespace lang { 

struct Class__class : ::zschimmer::javabridge::Class
{
    Class__class(const string& class_name);
   ~Class__class();

    ::zschimmer::javabridge::Method const _asSubclass__Ljava_lang_Class_2__method;
    ::zschimmer::javabridge::Method const _cast__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _desiredAssertionStatus____method;
    ::zschimmer::javabridge::Static_method const _forName__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _getCanonicalName____method;
    ::zschimmer::javabridge::Method const _getComponentType____method;
    ::zschimmer::javabridge::Method const _getDeclaringClass____method;
    ::zschimmer::javabridge::Method const _getEnclosingClass____method;
    ::zschimmer::javabridge::Method const _getModifiers____method;
    ::zschimmer::javabridge::Method const _getName____method;
    ::zschimmer::javabridge::Method const _getResource__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _getSimpleName____method;
    ::zschimmer::javabridge::Method const _getSuperclass____method;
    ::zschimmer::javabridge::Method const _isAnnotation____method;
    ::zschimmer::javabridge::Method const _isAnnotationPresent__Ljava_lang_Class_2__method;
    ::zschimmer::javabridge::Method const _isAnonymousClass____method;
    ::zschimmer::javabridge::Method const _isArray____method;
    ::zschimmer::javabridge::Method const _isAssignableFrom__Ljava_lang_Class_2__method;
    ::zschimmer::javabridge::Method const _isEnum____method;
    ::zschimmer::javabridge::Method const _isInstance__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _isInterface____method;
    ::zschimmer::javabridge::Method const _isLocalClass____method;
    ::zschimmer::javabridge::Method const _isMemberClass____method;
    ::zschimmer::javabridge::Method const _isPrimitive____method;
    ::zschimmer::javabridge::Method const _isSynthetic____method;
    ::zschimmer::javabridge::Method const _newInstance____method;
    ::zschimmer::javabridge::Method const _toString____method;

    static const ::zschimmer::javabridge::class_factory< Class__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Class__class > Class__class::class_factory ("java.lang.Class");

Class__class::Class__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_asSubclass__Ljava_lang_Class_2__method(this, "asSubclass", "(Ljava/lang/Class;)Ljava/lang/Class;")
    ,_cast__Ljava_lang_Object_2__method(this, "cast", "(Ljava/lang/Object;)Ljava/lang/Object;")
    ,_desiredAssertionStatus____method(this, "desiredAssertionStatus", "()Z")
    ,_forName__Ljava_lang_String_2__method(this, "forName", "(Ljava/lang/String;)Ljava/lang/Class;")
    ,_getCanonicalName____method(this, "getCanonicalName", "()Ljava/lang/String;")
    ,_getComponentType____method(this, "getComponentType", "()Ljava/lang/Class;")
    ,_getDeclaringClass____method(this, "getDeclaringClass", "()Ljava/lang/Class;")
    ,_getEnclosingClass____method(this, "getEnclosingClass", "()Ljava/lang/Class;")
    ,_getModifiers____method(this, "getModifiers", "()I")
    ,_getName____method(this, "getName", "()Ljava/lang/String;")
    ,_getResource__Ljava_lang_String_2__method(this, "getResource", "(Ljava/lang/String;)Ljava/net/URL;")
    ,_getSimpleName____method(this, "getSimpleName", "()Ljava/lang/String;")
    ,_getSuperclass____method(this, "getSuperclass", "()Ljava/lang/Class;")
    ,_isAnnotation____method(this, "isAnnotation", "()Z")
    ,_isAnnotationPresent__Ljava_lang_Class_2__method(this, "isAnnotationPresent", "(Ljava/lang/Class;)Z")
    ,_isAnonymousClass____method(this, "isAnonymousClass", "()Z")
    ,_isArray____method(this, "isArray", "()Z")
    ,_isAssignableFrom__Ljava_lang_Class_2__method(this, "isAssignableFrom", "(Ljava/lang/Class;)Z")
    ,_isEnum____method(this, "isEnum", "()Z")
    ,_isInstance__Ljava_lang_Object_2__method(this, "isInstance", "(Ljava/lang/Object;)Z")
    ,_isInterface____method(this, "isInterface", "()Z")
    ,_isLocalClass____method(this, "isLocalClass", "()Z")
    ,_isMemberClass____method(this, "isMemberClass", "()Z")
    ,_isPrimitive____method(this, "isPrimitive", "()Z")
    ,_isSynthetic____method(this, "isSynthetic", "()Z")
    ,_newInstance____method(this, "newInstance", "()Ljava/lang/Object;")
    ,_toString____method(this, "toString", "()Ljava/lang/String;"){}

Class__class::~Class__class() {}




Class::Class(jobject jo) { if (jo) assign_(jo); }

Class::Class(const Class& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Class::Class(Class&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Class::~Class() { assign_(NULL); }




::javaproxy::java::lang::Class Class::asSubclass(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Class >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Class__class* cls = _class.get();
    ::javaproxy::java::lang::Class result;
    result.steal_local_ref(cls->_asSubclass__Ljava_lang_Class_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object Class::cast(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Class__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_cast__Ljava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool Class::desiredAssertionStatus() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    return 0 != cls->_desiredAssertionStatus____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Class Class::forName(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Class__class* cls = Class__class::class_factory.clas();
    ::javaproxy::java::lang::Class result;
    result.steal_local_ref(cls->_forName__Ljava_lang_String_2__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::lang::String Class::getCanonicalName() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getCanonicalName____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Class Class::getComponentType() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    ::javaproxy::java::lang::Class result;
    result.steal_local_ref(cls->_getComponentType____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Class Class::getDeclaringClass() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    ::javaproxy::java::lang::Class result;
    result.steal_local_ref(cls->_getDeclaringClass____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Class Class::getEnclosingClass() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    ::javaproxy::java::lang::Class result;
    result.steal_local_ref(cls->_getEnclosingClass____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint Class::getModifiers() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    return cls->_getModifiers____method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String Class::getName() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getName____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::net::URL Class::getResource(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Class__class* cls = _class.get();
    ::javaproxy::java::net::URL result;
    result.steal_local_ref(cls->_getResource__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String Class::getSimpleName() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getSimpleName____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Class Class::getSuperclass() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    ::javaproxy::java::lang::Class result;
    result.steal_local_ref(cls->_getSuperclass____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool Class::isAnnotation() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    return 0 != cls->_isAnnotation____method.bool_call(get_jobject(), parameter_list);
}

bool Class::isAnnotationPresent(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Class >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Class__class* cls = _class.get();
    return 0 != cls->_isAnnotationPresent__Ljava_lang_Class_2__method.bool_call(get_jobject(), parameter_list);
}

bool Class::isAnonymousClass() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    return 0 != cls->_isAnonymousClass____method.bool_call(get_jobject(), parameter_list);
}

bool Class::isArray() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    return 0 != cls->_isArray____method.bool_call(get_jobject(), parameter_list);
}

bool Class::isAssignableFrom(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Class >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Class__class* cls = _class.get();
    return 0 != cls->_isAssignableFrom__Ljava_lang_Class_2__method.bool_call(get_jobject(), parameter_list);
}

bool Class::isEnum() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    return 0 != cls->_isEnum____method.bool_call(get_jobject(), parameter_list);
}

bool Class::isInstance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Class__class* cls = _class.get();
    return 0 != cls->_isInstance__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

bool Class::isInterface() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    return 0 != cls->_isInterface____method.bool_call(get_jobject(), parameter_list);
}

bool Class::isLocalClass() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    return 0 != cls->_isLocalClass____method.bool_call(get_jobject(), parameter_list);
}

bool Class::isMemberClass() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    return 0 != cls->_isMemberClass____method.bool_call(get_jobject(), parameter_list);
}

bool Class::isPrimitive() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    return 0 != cls->_isPrimitive____method.bool_call(get_jobject(), parameter_list);
}

bool Class::isSynthetic() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    return 0 != cls->_isSynthetic____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object Class::newInstance() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_newInstance____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String Class::toString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Class__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* Class::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Class::java_class_() { return Class__class::class_factory.clas(); }


void Class::Lazy_class::initialize() const {
    _value = Class__class::class_factory.clas();
}


}}}
