// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__data__job__JobPersistentState.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace data { namespace job { 

struct JobPersistentState__class : ::zschimmer::javabridge::Class
{
    JobPersistentState__class(const string& class_name);
   ~JobPersistentState__class();

    ::zschimmer::javabridge::Method const _isPermanentlyStopped____method;

    static const ::zschimmer::javabridge::class_factory< JobPersistentState__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< JobPersistentState__class > JobPersistentState__class::class_factory ("com.sos.scheduler.engine.data.job.JobPersistentState");

JobPersistentState__class::JobPersistentState__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_isPermanentlyStopped____method(this, "isPermanentlyStopped", "()Z"){}

JobPersistentState__class::~JobPersistentState__class() {}




JobPersistentState::JobPersistentState(jobject jo) { if (jo) assign_(jo); }

JobPersistentState::JobPersistentState(const JobPersistentState& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    JobPersistentState::JobPersistentState(JobPersistentState&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

JobPersistentState::~JobPersistentState() { assign_(NULL); }




bool JobPersistentState::isPermanentlyStopped() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    JobPersistentState__class* cls = _class.get();
    return 0 != cls->_isPermanentlyStopped____method.bool_call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* JobPersistentState::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* JobPersistentState::java_class_() { return JobPersistentState__class::class_factory.clas(); }


void JobPersistentState::Lazy_class::initialize() const {
    _value = JobPersistentState__class::class_factory.clas();
}


}}}}}}}
