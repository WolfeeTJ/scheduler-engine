// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#ifndef _JAVAPROXY_ORG_JODA_TIME_BASE_BASEDURATION_H_
#define _JAVAPROXY_ORG_JODA_TIME_BASE_BASEDURATION_H_

#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"
#include "java__lang__Object.h"
#include "org__joda__time__base__AbstractDuration.h"

namespace javaproxy { namespace java { namespace lang { struct String; }}}
namespace javaproxy { namespace org { namespace joda { namespace time { namespace base { struct AbstractDuration; }}}}}


namespace javaproxy { namespace org { namespace joda { namespace time { namespace base { 


struct BaseDuration__class;

struct BaseDuration : ::zschimmer::javabridge::proxy_jobject< BaseDuration >, ::javaproxy::org::joda::time::base::AbstractDuration {
  private:
    static BaseDuration new_instance();  // Not implemented
  public:

    BaseDuration(jobject = NULL);

    BaseDuration(const BaseDuration&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        BaseDuration(BaseDuration&&);
    #endif

    ~BaseDuration();

    BaseDuration& operator=(jobject jo) { assign_(jo); return *this; }
    BaseDuration& operator=(const BaseDuration& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        BaseDuration& operator=(BaseDuration&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< BaseDuration >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< BaseDuration >::set_jobject(jo);
        ::javaproxy::org::joda::time::base::AbstractDuration::set_jobject(jo);
    }
  public:

    jlong getMillis() const;

    ::zschimmer::javabridge::Class* java_object_class_() const;

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<BaseDuration__class*> {
        void initialize() const;
    };

    Lazy_class _class;
};


}}}}}

#endif
