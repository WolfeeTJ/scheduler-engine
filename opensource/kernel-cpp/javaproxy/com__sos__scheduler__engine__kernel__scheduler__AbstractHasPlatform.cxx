// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__scheduler__AbstractHasPlatform.h"
#include "com__sos__scheduler__engine__kernel__log__PrefixLog.h"
#include "com__sos__scheduler__engine__kernel__scheduler__Platform.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace scheduler { 

struct AbstractHasPlatform__class : ::zschimmer::javabridge::Class
{
    AbstractHasPlatform__class(const string& class_name);
   ~AbstractHasPlatform__class();

    ::zschimmer::javabridge::Method const _getPlatform____method;
    ::zschimmer::javabridge::Method const _log____method;

    static const ::zschimmer::javabridge::class_factory< AbstractHasPlatform__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< AbstractHasPlatform__class > AbstractHasPlatform__class::class_factory ("com.sos.scheduler.engine.kernel.scheduler.AbstractHasPlatform");

AbstractHasPlatform__class::AbstractHasPlatform__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_getPlatform____method(this, "getPlatform", "()Lcom/sos/scheduler/engine/kernel/scheduler/Platform;")
    ,_log____method(this, "log", "()Lcom/sos/scheduler/engine/kernel/log/PrefixLog;"){}

AbstractHasPlatform__class::~AbstractHasPlatform__class() {}




AbstractHasPlatform::AbstractHasPlatform(jobject jo) { if (jo) assign_(jo); }

AbstractHasPlatform::AbstractHasPlatform(const AbstractHasPlatform& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    AbstractHasPlatform::AbstractHasPlatform(AbstractHasPlatform&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

AbstractHasPlatform::~AbstractHasPlatform() { assign_(NULL); }




::javaproxy::com::sos::scheduler::engine::kernel::scheduler::Platform AbstractHasPlatform::getPlatform() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractHasPlatform__class* cls = _class.get();
    ::javaproxy::com::sos::scheduler::engine::kernel::scheduler::Platform result;
    result.steal_local_ref(cls->_getPlatform____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::com::sos::scheduler::engine::kernel::log::PrefixLog AbstractHasPlatform::log() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractHasPlatform__class* cls = _class.get();
    ::javaproxy::com::sos::scheduler::engine::kernel::log::PrefixLog result;
    result.steal_local_ref(cls->_log____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* AbstractHasPlatform::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* AbstractHasPlatform::java_class_() { return AbstractHasPlatform__class::class_factory.clas(); }


void AbstractHasPlatform::Lazy_class::initialize() {
    _value = AbstractHasPlatform__class::class_factory.clas();
}


}}}}}}}
