// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__folder__events__FileBasedActivatedEvent.h"
#include "com__sos__scheduler__engine__eventbus__AbstractEvent.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace folder { namespace events { 

struct FileBasedActivatedEvent__class : ::zschimmer::javabridge::Class
{
    FileBasedActivatedEvent__class(const string& class_name);
   ~FileBasedActivatedEvent__class();

    ::zschimmer::javabridge::Method const __constructor____method;

    static const ::zschimmer::javabridge::class_factory< FileBasedActivatedEvent__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< FileBasedActivatedEvent__class > FileBasedActivatedEvent__class::class_factory ("com.sos.scheduler.engine.kernel.folder.events.FileBasedActivatedEvent");

FileBasedActivatedEvent__class::FileBasedActivatedEvent__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor____method(this, "<init>", "()V"){}

FileBasedActivatedEvent__class::~FileBasedActivatedEvent__class() {}



FileBasedActivatedEvent FileBasedActivatedEvent::new_instance() {
    FileBasedActivatedEvent result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    FileBasedActivatedEvent__class* cls = result._class.get();
    cls->__constructor____method.call(result.get_jobject(), parameter_list);
    return result;
}


FileBasedActivatedEvent::FileBasedActivatedEvent(jobject jo) { if (jo) assign_(jo); }

FileBasedActivatedEvent::FileBasedActivatedEvent(const FileBasedActivatedEvent& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    FileBasedActivatedEvent::FileBasedActivatedEvent(FileBasedActivatedEvent&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

FileBasedActivatedEvent::~FileBasedActivatedEvent() { assign_(NULL); }





::zschimmer::javabridge::Class* FileBasedActivatedEvent::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* FileBasedActivatedEvent::java_class_() { return FileBasedActivatedEvent__class::class_factory.clas(); }


void FileBasedActivatedEvent::Lazy_class::initialize() {
    _value = FileBasedActivatedEvent__class::class_factory.clas();
}


}}}}}}}}
