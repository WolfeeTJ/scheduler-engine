// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__data__job__TaskObject.h"
#include "com__sos__scheduler__engine__data__job__TaskId.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "org__joda__time__DateTime.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace data { namespace job { 

struct TaskObject__class : ::zschimmer::javabridge::Class
{
    TaskObject__class(const string& class_name);
   ~TaskObject__class();

    ::zschimmer::javabridge::Method const _enqueueTime____method;
    ::zschimmer::javabridge::Method const _parametersXml____method;
    ::zschimmer::javabridge::Method const _startTimeMillis____method;
    ::zschimmer::javabridge::Method const _taskId____method;
    ::zschimmer::javabridge::Method const _xml____method;

    static const ::zschimmer::javabridge::class_factory< TaskObject__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< TaskObject__class > TaskObject__class::class_factory ("com.sos.scheduler.engine.data.job.TaskObject");

TaskObject__class::TaskObject__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_enqueueTime____method(this, "enqueueTime", "()Lorg/joda/time/DateTime;")
    ,_parametersXml____method(this, "parametersXml", "()Ljava/lang/String;")
    ,_startTimeMillis____method(this, "startTimeMillis", "()J")
    ,_taskId____method(this, "taskId", "()Lcom/sos/scheduler/engine/data/job/TaskId;")
    ,_xml____method(this, "xml", "()Ljava/lang/String;"){}

TaskObject__class::~TaskObject__class() {}




TaskObject::TaskObject(jobject jo) { if (jo) assign_(jo); }

TaskObject::TaskObject(const TaskObject& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    TaskObject::TaskObject(TaskObject&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

TaskObject::~TaskObject() { assign_(NULL); }




::javaproxy::org::joda::time::DateTime TaskObject::enqueueTime() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskObject__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_enqueueTime____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String TaskObject::parametersXml() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskObject__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_parametersXml____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jlong TaskObject::startTimeMillis() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskObject__class* cls = _class.get();
    return cls->_startTimeMillis____method.long_call(get_jobject(), parameter_list);
}

::javaproxy::com::sos::scheduler::engine::data::job::TaskId TaskObject::taskId() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskObject__class* cls = _class.get();
    ::javaproxy::com::sos::scheduler::engine::data::job::TaskId result;
    result.steal_local_ref(cls->_taskId____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String TaskObject::xml() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskObject__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_xml____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* TaskObject::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* TaskObject::java_class_() { return TaskObject__class::class_factory.clas(); }


void TaskObject::Lazy_class::initialize() const {
    _value = TaskObject__class::class_factory.clas();
}


}}}}}}}
