// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__scripting__APIModuleInstance.h"
#include "com__sos__scheduler__engine__kernel__scripting__ScriptInstance.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace scripting { 

struct APIModuleInstance__class : ::zschimmer::javabridge::Class
{
    APIModuleInstance__class(const string& class_name);
   ~APIModuleInstance__class();

    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _addObject__Ljava_lang_Object_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _call__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _call__Ljava_lang_String_2Z__method;
    ::zschimmer::javabridge::Method const _nameExists__Ljava_lang_String_2__method;

    static const ::zschimmer::javabridge::class_factory< APIModuleInstance__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< APIModuleInstance__class > APIModuleInstance__class::class_factory ("com.sos.scheduler.engine.kernel.scripting.APIModuleInstance");

APIModuleInstance__class::APIModuleInstance__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor__Ljava_lang_String_2Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V")
    ,_addObject__Ljava_lang_Object_2Ljava_lang_String_2__method(this, "addObject", "(Ljava/lang/Object;Ljava/lang/String;)V")
    ,_call__Ljava_lang_String_2__method(this, "call", "(Ljava/lang/String;)Ljava/lang/Object;")
    ,_call__Ljava_lang_String_2Z__method(this, "call", "(Ljava/lang/String;Z)Ljava/lang/Object;")
    ,_nameExists__Ljava_lang_String_2__method(this, "nameExists", "(Ljava/lang/String;)Z"){}

APIModuleInstance__class::~APIModuleInstance__class() {}



APIModuleInstance APIModuleInstance::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) {
    APIModuleInstance result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    APIModuleInstance__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}


APIModuleInstance::APIModuleInstance(jobject jo) { if (jo) assign_(jo); }

APIModuleInstance::APIModuleInstance(const APIModuleInstance& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    APIModuleInstance::APIModuleInstance(APIModuleInstance&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

APIModuleInstance::~APIModuleInstance() { assign_(NULL); }




void APIModuleInstance::addObject(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    APIModuleInstance__class* cls = _class.get();
    cls->_addObject__Ljava_lang_Object_2Ljava_lang_String_2__method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object APIModuleInstance::call(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    APIModuleInstance__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_call__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object APIModuleInstance::call(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, jboolean p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].z = p1;
    APIModuleInstance__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_call__Ljava_lang_String_2Z__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool APIModuleInstance::nameExists(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    APIModuleInstance__class* cls = _class.get();
    return 0 != cls->_nameExists__Ljava_lang_String_2__method.bool_call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* APIModuleInstance::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* APIModuleInstance::java_class_() { return APIModuleInstance__class::class_factory.clas(); }


void APIModuleInstance::Lazy_class::initialize() {
    _value = APIModuleInstance__class::class_factory.clas();
}


}}}}}}}
