// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace java { namespace lang { 

struct Object__class : ::zschimmer::javabridge::Class
{
    Object__class(const string& class_name);
   ~Object__class();

    ::zschimmer::javabridge::Method const __constructor____method;
    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Method const _notify____method;
    ::zschimmer::javabridge::Method const _notifyAll____method;
    ::zschimmer::javabridge::Method const _toString____method;
    ::zschimmer::javabridge::Method const _wait____method;
    ::zschimmer::javabridge::Method const _wait__J__method;
    ::zschimmer::javabridge::Method const _wait__JI__method;

    static const ::zschimmer::javabridge::class_factory< Object__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Object__class > Object__class::class_factory ("java.lang.Object");

Object__class::Object__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor____method(this, "<init>", "()V")
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_notify____method(this, "notify", "()V")
    ,_notifyAll____method(this, "notifyAll", "()V")
    ,_toString____method(this, "toString", "()Ljava/lang/String;")
    ,_wait____method(this, "wait", "()V")
    ,_wait__J__method(this, "wait", "(J)V")
    ,_wait__JI__method(this, "wait", "(JI)V"){}

Object__class::~Object__class() {}



Object Object::new_instance() {
    Object result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Object__class* cls = result._class.get();
    cls->__constructor____method.call(result.get_jobject(), parameter_list);
    return result;
}


Object::Object(jobject jo) { if (jo) assign_(jo); }

Object::Object(const Object& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Object::Object(Object&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Object::~Object() { assign_(NULL); }




bool Object::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Object__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

jint Object::hashCode() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Object__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

void Object::notify() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Object__class* cls = _class.get();
    cls->_notify____method.call(get_jobject(), parameter_list);
}

void Object::notifyAll() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Object__class* cls = _class.get();
    cls->_notifyAll____method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String Object::toString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Object__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

void Object::wait() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Object__class* cls = _class.get();
    cls->_wait____method.call(get_jobject(), parameter_list);
}

void Object::wait(jlong p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].j = p0;
    Object__class* cls = _class.get();
    cls->_wait__J__method.call(get_jobject(), parameter_list);
}

void Object::wait(jlong p0, jint p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].j = p0;
    parameter_list._jvalues[1].i = p1;
    Object__class* cls = _class.get();
    cls->_wait__JI__method.call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* Object::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Object::java_class_() { return Object__class::class_factory.clas(); }


void Object::Lazy_class::initialize() const {
    _value = Object__class::class_factory.clas();
}


}}}
