// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "org__joda__time__base__AbstractInstant.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "org__joda__time__DateTime.h"

namespace javaproxy { namespace org { namespace joda { namespace time { namespace base { 

struct AbstractInstant__class : ::zschimmer::javabridge::Class
{
    AbstractInstant__class(const string& class_name);
   ~AbstractInstant__class();

    ::zschimmer::javabridge::Method const _compareTo__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Method const _isAfter__J__method;
    ::zschimmer::javabridge::Method const _isAfterNow____method;
    ::zschimmer::javabridge::Method const _isBefore__J__method;
    ::zschimmer::javabridge::Method const _isBeforeNow____method;
    ::zschimmer::javabridge::Method const _isEqual__J__method;
    ::zschimmer::javabridge::Method const _isEqualNow____method;
    ::zschimmer::javabridge::Method const _toDateTime____method;
    ::zschimmer::javabridge::Method const _toDateTimeISO____method;
    ::zschimmer::javabridge::Method const _toString____method;

    static const ::zschimmer::javabridge::class_factory< AbstractInstant__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< AbstractInstant__class > AbstractInstant__class::class_factory ("org.joda.time.base.AbstractInstant");

AbstractInstant__class::AbstractInstant__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_compareTo__Ljava_lang_Object_2__method(this, "compareTo", "(Ljava/lang/Object;)I")
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_isAfter__J__method(this, "isAfter", "(J)Z")
    ,_isAfterNow____method(this, "isAfterNow", "()Z")
    ,_isBefore__J__method(this, "isBefore", "(J)Z")
    ,_isBeforeNow____method(this, "isBeforeNow", "()Z")
    ,_isEqual__J__method(this, "isEqual", "(J)Z")
    ,_isEqualNow____method(this, "isEqualNow", "()Z")
    ,_toDateTime____method(this, "toDateTime", "()Lorg/joda/time/DateTime;")
    ,_toDateTimeISO____method(this, "toDateTimeISO", "()Lorg/joda/time/DateTime;")
    ,_toString____method(this, "toString", "()Ljava/lang/String;"){}

AbstractInstant__class::~AbstractInstant__class() {}




AbstractInstant::AbstractInstant(jobject jo) { if (jo) assign_(jo); }

AbstractInstant::AbstractInstant(const AbstractInstant& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    AbstractInstant::AbstractInstant(AbstractInstant&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

AbstractInstant::~AbstractInstant() { assign_(NULL); }




jint AbstractInstant::compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractInstant__class* cls = _class.get();
    return cls->_compareTo__Ljava_lang_Object_2__method.int_call(get_jobject(), parameter_list);
}

bool AbstractInstant::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractInstant__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

jint AbstractInstant::hashCode() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractInstant__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

bool AbstractInstant::isAfter(jlong p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].j = p0;
    AbstractInstant__class* cls = _class.get();
    return 0 != cls->_isAfter__J__method.bool_call(get_jobject(), parameter_list);
}

bool AbstractInstant::isAfterNow() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractInstant__class* cls = _class.get();
    return 0 != cls->_isAfterNow____method.bool_call(get_jobject(), parameter_list);
}

bool AbstractInstant::isBefore(jlong p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].j = p0;
    AbstractInstant__class* cls = _class.get();
    return 0 != cls->_isBefore__J__method.bool_call(get_jobject(), parameter_list);
}

bool AbstractInstant::isBeforeNow() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractInstant__class* cls = _class.get();
    return 0 != cls->_isBeforeNow____method.bool_call(get_jobject(), parameter_list);
}

bool AbstractInstant::isEqual(jlong p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].j = p0;
    AbstractInstant__class* cls = _class.get();
    return 0 != cls->_isEqual__J__method.bool_call(get_jobject(), parameter_list);
}

bool AbstractInstant::isEqualNow() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractInstant__class* cls = _class.get();
    return 0 != cls->_isEqualNow____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::org::joda::time::DateTime AbstractInstant::toDateTime() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractInstant__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_toDateTime____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime AbstractInstant::toDateTimeISO() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractInstant__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_toDateTimeISO____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String AbstractInstant::toString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractInstant__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* AbstractInstant::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* AbstractInstant::java_class_() { return AbstractInstant__class::class_factory.clas(); }


void AbstractInstant::Lazy_class::initialize() const {
    _value = AbstractInstant__class::class_factory.clas();
}


}}}}}
