// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "scala__Option.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace scala { 

struct Option__class : ::zschimmer::javabridge::Class
{
    Option__class(const string& class_name);
   ~Option__class();

    ::zschimmer::javabridge::Method const __constructor____method;
    ::zschimmer::javabridge::Static_method const _apply__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Static_method const _empty____method;
    ::zschimmer::javabridge::Method const _get____method;
    ::zschimmer::javabridge::Method const _isDefined____method;
    ::zschimmer::javabridge::Method const _isEmpty____method;
    ::zschimmer::javabridge::Method const _nonEmpty____method;
    ::zschimmer::javabridge::Method const _productPrefix____method;

    static const ::zschimmer::javabridge::class_factory< Option__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Option__class > Option__class::class_factory ("scala.Option");

Option__class::Option__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor____method(this, "<init>", "()V")
    ,_apply__Ljava_lang_Object_2__method(this, "apply", "(Ljava/lang/Object;)Lscala/Option;")
    ,_empty____method(this, "empty", "()Lscala/Option;")
    ,_get____method(this, "get", "()Ljava/lang/Object;")
    ,_isDefined____method(this, "isDefined", "()Z")
    ,_isEmpty____method(this, "isEmpty", "()Z")
    ,_nonEmpty____method(this, "nonEmpty", "()Z")
    ,_productPrefix____method(this, "productPrefix", "()Ljava/lang/String;"){}

Option__class::~Option__class() {}



Option Option::new_instance() {
    Option result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Option__class* cls = result._class.get();
    cls->__constructor____method.call(result.get_jobject(), parameter_list);
    return result;
}


Option::Option(jobject jo) { if (jo) assign_(jo); }

Option::Option(const Option& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Option::Option(Option&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Option::~Option() { assign_(NULL); }




::javaproxy::scala::Option Option::apply(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Option__class* cls = Option__class::class_factory.clas();
    ::javaproxy::scala::Option result;
    result.steal_local_ref(cls->_apply__Ljava_lang_Object_2__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::scala::Option Option::empty() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Option__class* cls = Option__class::class_factory.clas();
    ::javaproxy::scala::Option result;
    result.steal_local_ref(cls->_empty____method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object Option::get() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Option__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_get____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool Option::isDefined() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Option__class* cls = _class.get();
    return 0 != cls->_isDefined____method.bool_call(get_jobject(), parameter_list);
}

bool Option::isEmpty() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Option__class* cls = _class.get();
    return 0 != cls->_isEmpty____method.bool_call(get_jobject(), parameter_list);
}

bool Option::nonEmpty() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Option__class* cls = _class.get();
    return 0 != cls->_nonEmpty____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String Option::productPrefix() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Option__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_productPrefix____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* Option::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Option::java_class_() { return Option__class::class_factory.clas(); }


void Option::Lazy_class::initialize() const {
    _value = Option__class::class_factory.clas();
}


}}
