// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__event__EventSubsystem.h"
#include "com__sos__scheduler__engine__data__event__AbstractEvent.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace event { 

struct EventSubsystem__class : ::zschimmer::javabridge::Class
{
    EventSubsystem__class(const string& class_name);
   ~EventSubsystem__class();

    ::zschimmer::javabridge::Method const _checkNumberOfEventCodes__I__method;
    ::zschimmer::javabridge::Method const _report__Lcom_sos_scheduler_engine_data_event_AbstractEvent_2__method;
    ::zschimmer::javabridge::Method const _report__Lcom_sos_scheduler_engine_data_event_AbstractEvent_2Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _reportEventClass__ILjava_lang_Object_2__method;

    static const ::zschimmer::javabridge::class_factory< EventSubsystem__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< EventSubsystem__class > EventSubsystem__class::class_factory ("com.sos.scheduler.engine.kernel.event.EventSubsystem");

EventSubsystem__class::EventSubsystem__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_checkNumberOfEventCodes__I__method(this, "checkNumberOfEventCodes", "(I)V")
    ,_report__Lcom_sos_scheduler_engine_data_event_AbstractEvent_2__method(this, "report", "(Lcom/sos/scheduler/engine/data/event/AbstractEvent;)V")
    ,_report__Lcom_sos_scheduler_engine_data_event_AbstractEvent_2Ljava_lang_Object_2__method(this, "report", "(Lcom/sos/scheduler/engine/data/event/AbstractEvent;Ljava/lang/Object;)V")
    ,_reportEventClass__ILjava_lang_Object_2__method(this, "reportEventClass", "(ILjava/lang/Object;)V"){}

EventSubsystem__class::~EventSubsystem__class() {}




EventSubsystem::EventSubsystem(jobject jo) { if (jo) assign_(jo); }

EventSubsystem::EventSubsystem(const EventSubsystem& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    EventSubsystem::EventSubsystem(EventSubsystem&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

EventSubsystem::~EventSubsystem() { assign_(NULL); }




void EventSubsystem::checkNumberOfEventCodes(jint p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    EventSubsystem__class* cls = _class.get();
    cls->_checkNumberOfEventCodes__I__method.call(get_jobject(), parameter_list);
}

void EventSubsystem::report(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::data::event::AbstractEvent >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    EventSubsystem__class* cls = _class.get();
    cls->_report__Lcom_sos_scheduler_engine_data_event_AbstractEvent_2__method.call(get_jobject(), parameter_list);
}

void EventSubsystem::report(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::data::event::AbstractEvent >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    EventSubsystem__class* cls = _class.get();
    cls->_report__Lcom_sos_scheduler_engine_data_event_AbstractEvent_2Ljava_lang_Object_2__method.call(get_jobject(), parameter_list);
}

void EventSubsystem::reportEventClass(jint p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].l = p1.get_jobject();
    EventSubsystem__class* cls = _class.get();
    cls->_reportEventClass__ILjava_lang_Object_2__method.call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* EventSubsystem::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* EventSubsystem::java_class_() { return EventSubsystem__class::class_factory.clas(); }


void EventSubsystem::Lazy_class::initialize() {
    _value = EventSubsystem__class::class_factory.clas();
}


}}}}}}}
