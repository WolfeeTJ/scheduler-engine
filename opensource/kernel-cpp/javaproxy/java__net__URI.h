// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#ifndef _JAVAPROXY_JAVA_NET_URI_H_
#define _JAVAPROXY_JAVA_NET_URI_H_

#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"
#include "java__lang__Object.h"

namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}
namespace javaproxy { namespace java { namespace net { struct URL; }}}


namespace javaproxy { namespace java { namespace net { 


struct URI__class;

struct URI : ::zschimmer::javabridge::proxy_jobject< URI >, ::javaproxy::java::lang::Object {
    static URI new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0);
    static URI new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2);
    static URI new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2, jint p3, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p4, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p5, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p6);
    static URI new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p3);
    static URI new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p3, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p4);

    URI(jobject = NULL);

    URI(const URI&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        URI(URI&&);
    #endif

    ~URI();

    URI& operator=(jobject jo) { assign_(jo); return *this; }
    URI& operator=(const URI& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        URI& operator=(URI&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< URI >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< URI >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    jint compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;
    jint compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URI >& p0) const;
    static ::javaproxy::java::net::URI create(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0);
    bool equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;
    ::javaproxy::java::lang::String getAuthority() const;
    ::javaproxy::java::lang::String getFragment() const;
    ::javaproxy::java::lang::String getHost() const;
    ::javaproxy::java::lang::String getPath() const;
    jint getPort() const;
    ::javaproxy::java::lang::String getQuery() const;
    ::javaproxy::java::lang::String getRawAuthority() const;
    ::javaproxy::java::lang::String getRawFragment() const;
    ::javaproxy::java::lang::String getRawPath() const;
    ::javaproxy::java::lang::String getRawQuery() const;
    ::javaproxy::java::lang::String getRawSchemeSpecificPart() const;
    ::javaproxy::java::lang::String getRawUserInfo() const;
    ::javaproxy::java::lang::String getScheme() const;
    ::javaproxy::java::lang::String getSchemeSpecificPart() const;
    ::javaproxy::java::lang::String getUserInfo() const;
    jint hashCode() const;
    bool isAbsolute() const;
    bool isOpaque() const;
    ::javaproxy::java::net::URI normalize() const;
    ::javaproxy::java::net::URI parseServerAuthority() const;
    ::javaproxy::java::net::URI relativize(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URI >& p0) const;
    ::javaproxy::java::net::URI resolve(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const;
    ::javaproxy::java::net::URI resolve(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URI >& p0) const;
    ::javaproxy::java::lang::String toASCIIString() const;
    ::javaproxy::java::lang::String toString() const;
    ::javaproxy::java::net::URL toURL() const;

    ::zschimmer::javabridge::Class* java_object_class_() const;

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<URI__class*> {
        void initialize() const;
    };

    Lazy_class _class;
};


}}}

#endif
