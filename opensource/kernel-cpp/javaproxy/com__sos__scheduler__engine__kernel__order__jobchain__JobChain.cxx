// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__order__jobchain__JobChain.h"
#include "com__sos__scheduler__engine__kernel__filebased__FileBased.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace order { namespace jobchain { 

struct JobChain__class : ::zschimmer::javabridge::Class
{
    JobChain__class(const string& class_name);
   ~JobChain__class();

    ::zschimmer::javabridge::Method const _deletePersistentState____method;
    ::zschimmer::javabridge::Method const _loadPersistentState____method;
    ::zschimmer::javabridge::Method const _persistState____method;

    static const ::zschimmer::javabridge::class_factory< JobChain__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< JobChain__class > JobChain__class::class_factory ("com.sos.scheduler.engine.kernel.order.jobchain.JobChain");

JobChain__class::JobChain__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_deletePersistentState____method(this, "deletePersistentState", "()V")
    ,_loadPersistentState____method(this, "loadPersistentState", "()V")
    ,_persistState____method(this, "persistState", "()V"){}

JobChain__class::~JobChain__class() {}




JobChain::JobChain(jobject jo) { if (jo) assign_(jo); }

JobChain::JobChain(const JobChain& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    JobChain::JobChain(JobChain&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

JobChain::~JobChain() { assign_(NULL); }




void JobChain::deletePersistentState() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    JobChain__class* cls = _class.get();
    cls->_deletePersistentState____method.call(get_jobject(), parameter_list);
}

void JobChain::loadPersistentState() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    JobChain__class* cls = _class.get();
    cls->_loadPersistentState____method.call(get_jobject(), parameter_list);
}

void JobChain::persistState() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    JobChain__class* cls = _class.get();
    cls->_persistState____method.call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* JobChain::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* JobChain::java_class_() { return JobChain__class::class_factory.clas(); }


void JobChain::Lazy_class::initialize() const {
    _value = JobChain__class::class_factory.clas();
}


}}}}}}}}
