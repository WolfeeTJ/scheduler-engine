// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#ifndef _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_COMMON_SCALAUTIL_RESOURCES_H_
#define _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_COMMON_SCALAUTIL_RESOURCES_H_

#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"
#include "java__lang__Object.h"

namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}


namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace common { namespace scalautil { 


struct Resources__class;

struct Resources : ::zschimmer::javabridge::proxy_jobject< Resources >, ::javaproxy::java::lang::Object {
  private:
    static Resources new_instance();  // Not implemented
  public:

    Resources(jobject = NULL);

    Resources(const Resources&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Resources(Resources&&);
    #endif

    ~Resources();

    Resources& operator=(jobject jo) { assign_(jo); return *this; }
    Resources& operator=(const Resources& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Resources& operator=(Resources&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< Resources >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< Resources >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    static ::javaproxy::java::lang::String resourceAsString(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0);

    ::zschimmer::javabridge::Class* java_object_class_() const;

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<Resources__class*> {
        void initialize() const;
    };

    Lazy_class _class;
};


}}}}}}}

#endif
