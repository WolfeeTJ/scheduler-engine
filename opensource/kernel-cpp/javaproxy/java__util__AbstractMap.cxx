// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__util__AbstractMap.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace java { namespace util { 

struct AbstractMap__class : ::zschimmer::javabridge::Class
{
    AbstractMap__class(const string& class_name);
   ~AbstractMap__class();

    ::zschimmer::javabridge::Method const _clear____method;
    ::zschimmer::javabridge::Method const _containsKey__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _containsValue__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _get__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Method const _isEmpty____method;
    ::zschimmer::javabridge::Method const _put__Ljava_lang_Object_2Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _remove__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _size____method;
    ::zschimmer::javabridge::Method const _toString____method;

    static const ::zschimmer::javabridge::class_factory< AbstractMap__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< AbstractMap__class > AbstractMap__class::class_factory ("java.util.AbstractMap");

AbstractMap__class::AbstractMap__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_clear____method(this, "clear", "()V")
    ,_containsKey__Ljava_lang_Object_2__method(this, "containsKey", "(Ljava/lang/Object;)Z")
    ,_containsValue__Ljava_lang_Object_2__method(this, "containsValue", "(Ljava/lang/Object;)Z")
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_get__Ljava_lang_Object_2__method(this, "get", "(Ljava/lang/Object;)Ljava/lang/Object;")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_isEmpty____method(this, "isEmpty", "()Z")
    ,_put__Ljava_lang_Object_2Ljava_lang_Object_2__method(this, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
    ,_remove__Ljava_lang_Object_2__method(this, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;")
    ,_size____method(this, "size", "()I")
    ,_toString____method(this, "toString", "()Ljava/lang/String;"){}

AbstractMap__class::~AbstractMap__class() {}




AbstractMap::AbstractMap(jobject jo) { if (jo) assign_(jo); }

AbstractMap::AbstractMap(const AbstractMap& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    AbstractMap::AbstractMap(AbstractMap&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

AbstractMap::~AbstractMap() { assign_(NULL); }




void AbstractMap::clear() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractMap__class* cls = _class.get();
    cls->_clear____method.call(get_jobject(), parameter_list);
}

bool AbstractMap::containsKey(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractMap__class* cls = _class.get();
    return 0 != cls->_containsKey__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

bool AbstractMap::containsValue(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractMap__class* cls = _class.get();
    return 0 != cls->_containsValue__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

bool AbstractMap::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractMap__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object AbstractMap::get(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractMap__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_get__Ljava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint AbstractMap::hashCode() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractMap__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

bool AbstractMap::isEmpty() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractMap__class* cls = _class.get();
    return 0 != cls->_isEmpty____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object AbstractMap::put(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    AbstractMap__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_put__Ljava_lang_Object_2Ljava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object AbstractMap::remove(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractMap__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_remove__Ljava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint AbstractMap::size() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractMap__class* cls = _class.get();
    return cls->_size____method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String AbstractMap::toString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractMap__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* AbstractMap::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* AbstractMap::java_class_() { return AbstractMap__class::class_factory.clas(); }


void AbstractMap::Lazy_class::initialize() const {
    _value = AbstractMap__class::class_factory.clas();
}


}}}
