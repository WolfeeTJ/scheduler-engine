// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#ifndef _JAVAPROXY_SCALA_OPTION_H_
#define _JAVAPROXY_SCALA_OPTION_H_

#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"
#include "java__lang__Object.h"

namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}


namespace javaproxy { namespace scala { 


struct Option__class;

struct Option : ::zschimmer::javabridge::proxy_jobject< Option >, ::javaproxy::java::lang::Object {
    static Option new_instance();

    Option(jobject = NULL);

    Option(const Option&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Option(Option&&);
    #endif

    ~Option();

    Option& operator=(jobject jo) { assign_(jo); return *this; }
    Option& operator=(const Option& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Option& operator=(Option&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< Option >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< Option >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    static ::javaproxy::scala::Option apply(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0);
    static ::javaproxy::scala::Option empty();
    ::javaproxy::java::lang::Object get() const;
    bool isDefined() const;
    bool isEmpty() const;
    bool nonEmpty() const;
    ::javaproxy::java::lang::String productPrefix() const;

    ::zschimmer::javabridge::Class* java_object_class_() const;

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<Option__class*> {
        void initialize() const;
    };

    Lazy_class _class;
};


}}

#endif
