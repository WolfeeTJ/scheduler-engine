// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#ifndef _JAVAPROXY_COM_GOOGLE_INJECT_INJECTOR_H_
#define _JAVAPROXY_COM_GOOGLE_INJECT_INJECTOR_H_

#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"
#include "java__lang__Object.h"

namespace javaproxy { namespace java { namespace lang { struct Class; }}}
namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}


namespace javaproxy { namespace com { namespace google { namespace inject { 


struct Injector__class;

struct Injector : ::zschimmer::javabridge::proxy_jobject< Injector >, ::javaproxy::java::lang::Object {
  private:
    static Injector new_instance();  // Not implemented
  public:

    Injector(jobject = NULL);

    Injector(const Injector&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Injector(Injector&&);
    #endif

    ~Injector();

    Injector& operator=(jobject jo) { assign_(jo); return *this; }
    Injector& operator=(const Injector& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Injector& operator=(Injector&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< Injector >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< Injector >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    ::javaproxy::java::lang::Object getInstance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Class >& p0) const;
    ::javaproxy::com::google::inject::Injector getParent() const;
    void injectMembers(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;

    ::zschimmer::javabridge::Class* java_object_class_() const;

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<Injector__class*> {
        void initialize() const;
    };

    Lazy_class _class;
};


}}}}

#endif
