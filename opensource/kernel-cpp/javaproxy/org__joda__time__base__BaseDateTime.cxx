// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "org__joda__time__base__BaseDateTime.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "org__joda__time__base__AbstractDateTime.h"

namespace javaproxy { namespace org { namespace joda { namespace time { namespace base { 

struct BaseDateTime__class : ::zschimmer::javabridge::Class
{
    BaseDateTime__class(const string& class_name);
   ~BaseDateTime__class();

    ::zschimmer::javabridge::Method const __constructor____method;
    ::zschimmer::javabridge::Method const __constructor__IIIIIII__method;
    ::zschimmer::javabridge::Method const __constructor__J__method;
    ::zschimmer::javabridge::Method const _getMillis____method;

    static const ::zschimmer::javabridge::class_factory< BaseDateTime__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< BaseDateTime__class > BaseDateTime__class::class_factory ("org.joda.time.base.BaseDateTime");

BaseDateTime__class::BaseDateTime__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor____method(this, "<init>", "()V")
    ,__constructor__IIIIIII__method(this, "<init>", "(IIIIIII)V")
    ,__constructor__J__method(this, "<init>", "(J)V")
    ,_getMillis____method(this, "getMillis", "()J"){}

BaseDateTime__class::~BaseDateTime__class() {}



BaseDateTime BaseDateTime::new_instance() {
    BaseDateTime result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    BaseDateTime__class* cls = result._class.get();
    cls->__constructor____method.call(result.get_jobject(), parameter_list);
    return result;
}

BaseDateTime BaseDateTime::new_instance(jint p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) {
    BaseDateTime result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<7> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    parameter_list._jvalues[2].i = p2;
    parameter_list._jvalues[3].i = p3;
    parameter_list._jvalues[4].i = p4;
    parameter_list._jvalues[5].i = p5;
    parameter_list._jvalues[6].i = p6;
    BaseDateTime__class* cls = result._class.get();
    cls->__constructor__IIIIIII__method.call(result.get_jobject(), parameter_list);
    return result;
}

BaseDateTime BaseDateTime::new_instance(jlong p0) {
    BaseDateTime result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].j = p0;
    BaseDateTime__class* cls = result._class.get();
    cls->__constructor__J__method.call(result.get_jobject(), parameter_list);
    return result;
}


BaseDateTime::BaseDateTime(jobject jo) { if (jo) assign_(jo); }

BaseDateTime::BaseDateTime(const BaseDateTime& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    BaseDateTime::BaseDateTime(BaseDateTime&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

BaseDateTime::~BaseDateTime() { assign_(NULL); }




jlong BaseDateTime::getMillis() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    BaseDateTime__class* cls = _class.get();
    return cls->_getMillis____method.long_call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* BaseDateTime::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* BaseDateTime::java_class_() { return BaseDateTime__class::class_factory.clas(); }


void BaseDateTime::Lazy_class::initialize() const {
    _value = BaseDateTime__class::class_factory.clas();
}


}}}}}
