// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "org__w3c__dom__Text.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "org__w3c__dom__CharacterData.h"

namespace javaproxy { namespace org { namespace w3c { namespace dom { 

struct Text__class : ::zschimmer::javabridge::Class
{
    Text__class(const string& class_name);
   ~Text__class();

    ::zschimmer::javabridge::Method const _getWholeText____method;
    ::zschimmer::javabridge::Method const _isElementContentWhitespace____method;
    ::zschimmer::javabridge::Method const _replaceWholeText__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _splitText__I__method;

    static const ::zschimmer::javabridge::class_factory< Text__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Text__class > Text__class::class_factory ("org.w3c.dom.Text");

Text__class::Text__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_getWholeText____method(this, "getWholeText", "()Ljava/lang/String;")
    ,_isElementContentWhitespace____method(this, "isElementContentWhitespace", "()Z")
    ,_replaceWholeText__Ljava_lang_String_2__method(this, "replaceWholeText", "(Ljava/lang/String;)Lorg/w3c/dom/Text;")
    ,_splitText__I__method(this, "splitText", "(I)Lorg/w3c/dom/Text;"){}

Text__class::~Text__class() {}




Text::Text(jobject jo) { if (jo) assign_(jo); }

Text::Text(const Text& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Text::Text(Text&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Text::~Text() { assign_(NULL); }




::javaproxy::java::lang::String Text::getWholeText() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Text__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getWholeText____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool Text::isElementContentWhitespace() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Text__class* cls = _class.get();
    return 0 != cls->_isElementContentWhitespace____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::org::w3c::dom::Text Text::replaceWholeText(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Text__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Text result;
    result.steal_local_ref(cls->_replaceWholeText__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::w3c::dom::Text Text::splitText(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    Text__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Text result;
    result.steal_local_ref(cls->_splitText__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* Text::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Text::java_class_() { return Text__class::class_factory.clas(); }


void Text::Lazy_class::initialize() const {
    _value = Text__class::class_factory.clas();
}


}}}}
