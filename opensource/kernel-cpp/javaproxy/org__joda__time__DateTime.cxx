// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "org__joda__time__DateTime.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "org__joda__time__base__BaseDateTime.h"

namespace javaproxy { namespace org { namespace joda { namespace time { 

struct DateTime__class : ::zschimmer::javabridge::Class
{
    DateTime__class(const string& class_name);
   ~DateTime__class();

    ::zschimmer::javabridge::Method const __constructor____method;
    ::zschimmer::javabridge::Method const __constructor__IIIII__method;
    ::zschimmer::javabridge::Method const __constructor__IIIIII__method;
    ::zschimmer::javabridge::Method const __constructor__IIIIIII__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const __constructor__J__method;
    ::zschimmer::javabridge::Method const _minus__J__method;
    ::zschimmer::javabridge::Method const _minusDays__I__method;
    ::zschimmer::javabridge::Method const _minusHours__I__method;
    ::zschimmer::javabridge::Method const _minusMillis__I__method;
    ::zschimmer::javabridge::Method const _minusMinutes__I__method;
    ::zschimmer::javabridge::Method const _minusMonths__I__method;
    ::zschimmer::javabridge::Method const _minusSeconds__I__method;
    ::zschimmer::javabridge::Method const _minusWeeks__I__method;
    ::zschimmer::javabridge::Method const _minusYears__I__method;
    ::zschimmer::javabridge::Static_method const _now____method;
    ::zschimmer::javabridge::Static_method const _parse__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _plus__J__method;
    ::zschimmer::javabridge::Method const _plusDays__I__method;
    ::zschimmer::javabridge::Method const _plusHours__I__method;
    ::zschimmer::javabridge::Method const _plusMillis__I__method;
    ::zschimmer::javabridge::Method const _plusMinutes__I__method;
    ::zschimmer::javabridge::Method const _plusMonths__I__method;
    ::zschimmer::javabridge::Method const _plusSeconds__I__method;
    ::zschimmer::javabridge::Method const _plusWeeks__I__method;
    ::zschimmer::javabridge::Method const _plusYears__I__method;
    ::zschimmer::javabridge::Method const _toDateTime____method;
    ::zschimmer::javabridge::Method const _toDateTimeISO____method;
    ::zschimmer::javabridge::Method const _withCenturyOfEra__I__method;
    ::zschimmer::javabridge::Method const _withDate__III__method;
    ::zschimmer::javabridge::Method const _withDayOfMonth__I__method;
    ::zschimmer::javabridge::Method const _withDayOfWeek__I__method;
    ::zschimmer::javabridge::Method const _withDayOfYear__I__method;
    ::zschimmer::javabridge::Method const _withDurationAdded__JI__method;
    ::zschimmer::javabridge::Method const _withEarlierOffsetAtOverlap____method;
    ::zschimmer::javabridge::Method const _withEra__I__method;
    ::zschimmer::javabridge::Method const _withHourOfDay__I__method;
    ::zschimmer::javabridge::Method const _withLaterOffsetAtOverlap____method;
    ::zschimmer::javabridge::Method const _withMillis__J__method;
    ::zschimmer::javabridge::Method const _withMillisOfDay__I__method;
    ::zschimmer::javabridge::Method const _withMillisOfSecond__I__method;
    ::zschimmer::javabridge::Method const _withMinuteOfHour__I__method;
    ::zschimmer::javabridge::Method const _withMonthOfYear__I__method;
    ::zschimmer::javabridge::Method const _withSecondOfMinute__I__method;
    ::zschimmer::javabridge::Method const _withTime__IIII__method;
    ::zschimmer::javabridge::Method const _withTimeAtStartOfDay____method;
    ::zschimmer::javabridge::Method const _withWeekOfWeekyear__I__method;
    ::zschimmer::javabridge::Method const _withWeekyear__I__method;
    ::zschimmer::javabridge::Method const _withYear__I__method;
    ::zschimmer::javabridge::Method const _withYearOfCentury__I__method;
    ::zschimmer::javabridge::Method const _withYearOfEra__I__method;

    static const ::zschimmer::javabridge::class_factory< DateTime__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< DateTime__class > DateTime__class::class_factory ("org.joda.time.DateTime");

DateTime__class::DateTime__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor____method(this, "<init>", "()V")
    ,__constructor__IIIII__method(this, "<init>", "(IIIII)V")
    ,__constructor__IIIIII__method(this, "<init>", "(IIIIII)V")
    ,__constructor__IIIIIII__method(this, "<init>", "(IIIIIII)V")
    ,__constructor__Ljava_lang_Object_2__method(this, "<init>", "(Ljava/lang/Object;)V")
    ,__constructor__J__method(this, "<init>", "(J)V")
    ,_minus__J__method(this, "minus", "(J)Lorg/joda/time/DateTime;")
    ,_minusDays__I__method(this, "minusDays", "(I)Lorg/joda/time/DateTime;")
    ,_minusHours__I__method(this, "minusHours", "(I)Lorg/joda/time/DateTime;")
    ,_minusMillis__I__method(this, "minusMillis", "(I)Lorg/joda/time/DateTime;")
    ,_minusMinutes__I__method(this, "minusMinutes", "(I)Lorg/joda/time/DateTime;")
    ,_minusMonths__I__method(this, "minusMonths", "(I)Lorg/joda/time/DateTime;")
    ,_minusSeconds__I__method(this, "minusSeconds", "(I)Lorg/joda/time/DateTime;")
    ,_minusWeeks__I__method(this, "minusWeeks", "(I)Lorg/joda/time/DateTime;")
    ,_minusYears__I__method(this, "minusYears", "(I)Lorg/joda/time/DateTime;")
    ,_now____method(this, "now", "()Lorg/joda/time/DateTime;")
    ,_parse__Ljava_lang_String_2__method(this, "parse", "(Ljava/lang/String;)Lorg/joda/time/DateTime;")
    ,_plus__J__method(this, "plus", "(J)Lorg/joda/time/DateTime;")
    ,_plusDays__I__method(this, "plusDays", "(I)Lorg/joda/time/DateTime;")
    ,_plusHours__I__method(this, "plusHours", "(I)Lorg/joda/time/DateTime;")
    ,_plusMillis__I__method(this, "plusMillis", "(I)Lorg/joda/time/DateTime;")
    ,_plusMinutes__I__method(this, "plusMinutes", "(I)Lorg/joda/time/DateTime;")
    ,_plusMonths__I__method(this, "plusMonths", "(I)Lorg/joda/time/DateTime;")
    ,_plusSeconds__I__method(this, "plusSeconds", "(I)Lorg/joda/time/DateTime;")
    ,_plusWeeks__I__method(this, "plusWeeks", "(I)Lorg/joda/time/DateTime;")
    ,_plusYears__I__method(this, "plusYears", "(I)Lorg/joda/time/DateTime;")
    ,_toDateTime____method(this, "toDateTime", "()Lorg/joda/time/DateTime;")
    ,_toDateTimeISO____method(this, "toDateTimeISO", "()Lorg/joda/time/DateTime;")
    ,_withCenturyOfEra__I__method(this, "withCenturyOfEra", "(I)Lorg/joda/time/DateTime;")
    ,_withDate__III__method(this, "withDate", "(III)Lorg/joda/time/DateTime;")
    ,_withDayOfMonth__I__method(this, "withDayOfMonth", "(I)Lorg/joda/time/DateTime;")
    ,_withDayOfWeek__I__method(this, "withDayOfWeek", "(I)Lorg/joda/time/DateTime;")
    ,_withDayOfYear__I__method(this, "withDayOfYear", "(I)Lorg/joda/time/DateTime;")
    ,_withDurationAdded__JI__method(this, "withDurationAdded", "(JI)Lorg/joda/time/DateTime;")
    ,_withEarlierOffsetAtOverlap____method(this, "withEarlierOffsetAtOverlap", "()Lorg/joda/time/DateTime;")
    ,_withEra__I__method(this, "withEra", "(I)Lorg/joda/time/DateTime;")
    ,_withHourOfDay__I__method(this, "withHourOfDay", "(I)Lorg/joda/time/DateTime;")
    ,_withLaterOffsetAtOverlap____method(this, "withLaterOffsetAtOverlap", "()Lorg/joda/time/DateTime;")
    ,_withMillis__J__method(this, "withMillis", "(J)Lorg/joda/time/DateTime;")
    ,_withMillisOfDay__I__method(this, "withMillisOfDay", "(I)Lorg/joda/time/DateTime;")
    ,_withMillisOfSecond__I__method(this, "withMillisOfSecond", "(I)Lorg/joda/time/DateTime;")
    ,_withMinuteOfHour__I__method(this, "withMinuteOfHour", "(I)Lorg/joda/time/DateTime;")
    ,_withMonthOfYear__I__method(this, "withMonthOfYear", "(I)Lorg/joda/time/DateTime;")
    ,_withSecondOfMinute__I__method(this, "withSecondOfMinute", "(I)Lorg/joda/time/DateTime;")
    ,_withTime__IIII__method(this, "withTime", "(IIII)Lorg/joda/time/DateTime;")
    ,_withTimeAtStartOfDay____method(this, "withTimeAtStartOfDay", "()Lorg/joda/time/DateTime;")
    ,_withWeekOfWeekyear__I__method(this, "withWeekOfWeekyear", "(I)Lorg/joda/time/DateTime;")
    ,_withWeekyear__I__method(this, "withWeekyear", "(I)Lorg/joda/time/DateTime;")
    ,_withYear__I__method(this, "withYear", "(I)Lorg/joda/time/DateTime;")
    ,_withYearOfCentury__I__method(this, "withYearOfCentury", "(I)Lorg/joda/time/DateTime;")
    ,_withYearOfEra__I__method(this, "withYearOfEra", "(I)Lorg/joda/time/DateTime;"){}

DateTime__class::~DateTime__class() {}



DateTime DateTime::new_instance() {
    DateTime result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    DateTime__class* cls = result._class.get();
    cls->__constructor____method.call(result.get_jobject(), parameter_list);
    return result;
}

DateTime DateTime::new_instance(jint p0, jint p1, jint p2, jint p3, jint p4) {
    DateTime result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<5> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    parameter_list._jvalues[2].i = p2;
    parameter_list._jvalues[3].i = p3;
    parameter_list._jvalues[4].i = p4;
    DateTime__class* cls = result._class.get();
    cls->__constructor__IIIII__method.call(result.get_jobject(), parameter_list);
    return result;
}

DateTime DateTime::new_instance(jint p0, jint p1, jint p2, jint p3, jint p4, jint p5) {
    DateTime result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<6> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    parameter_list._jvalues[2].i = p2;
    parameter_list._jvalues[3].i = p3;
    parameter_list._jvalues[4].i = p4;
    parameter_list._jvalues[5].i = p5;
    DateTime__class* cls = result._class.get();
    cls->__constructor__IIIIII__method.call(result.get_jobject(), parameter_list);
    return result;
}

DateTime DateTime::new_instance(jint p0, jint p1, jint p2, jint p3, jint p4, jint p5, jint p6) {
    DateTime result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<7> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    parameter_list._jvalues[2].i = p2;
    parameter_list._jvalues[3].i = p3;
    parameter_list._jvalues[4].i = p4;
    parameter_list._jvalues[5].i = p5;
    parameter_list._jvalues[6].i = p6;
    DateTime__class* cls = result._class.get();
    cls->__constructor__IIIIIII__method.call(result.get_jobject(), parameter_list);
    return result;
}

DateTime DateTime::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) {
    DateTime result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    DateTime__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_Object_2__method.call(result.get_jobject(), parameter_list);
    return result;
}

DateTime DateTime::new_instance(jlong p0) {
    DateTime result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].j = p0;
    DateTime__class* cls = result._class.get();
    cls->__constructor__J__method.call(result.get_jobject(), parameter_list);
    return result;
}


DateTime::DateTime(jobject jo) { if (jo) assign_(jo); }

DateTime::DateTime(const DateTime& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    DateTime::DateTime(DateTime&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

DateTime::~DateTime() { assign_(NULL); }




::javaproxy::org::joda::time::DateTime DateTime::minus(jlong p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].j = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_minus__J__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::minusDays(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_minusDays__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::minusHours(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_minusHours__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::minusMillis(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_minusMillis__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::minusMinutes(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_minusMinutes__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::minusMonths(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_minusMonths__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::minusSeconds(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_minusSeconds__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::minusWeeks(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_minusWeeks__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::minusYears(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_minusYears__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::now() {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    DateTime__class* cls = DateTime__class::class_factory.clas();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_now____method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::parse(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    DateTime__class* cls = DateTime__class::class_factory.clas();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_parse__Ljava_lang_String_2__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::plus(jlong p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].j = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_plus__J__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::plusDays(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_plusDays__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::plusHours(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_plusHours__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::plusMillis(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_plusMillis__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::plusMinutes(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_plusMinutes__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::plusMonths(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_plusMonths__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::plusSeconds(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_plusSeconds__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::plusWeeks(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_plusWeeks__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::plusYears(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_plusYears__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::toDateTime() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_toDateTime____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::toDateTimeISO() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_toDateTimeISO____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withCenturyOfEra(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withCenturyOfEra__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withDate(jint p0, jint p1, jint p2) const {
    ::zschimmer::javabridge::raw_parameter_list<3> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    parameter_list._jvalues[2].i = p2;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withDate__III__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withDayOfMonth(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withDayOfMonth__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withDayOfWeek(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withDayOfWeek__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withDayOfYear(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withDayOfYear__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withDurationAdded(jlong p0, jint p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].j = p0;
    parameter_list._jvalues[1].i = p1;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withDurationAdded__JI__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withEarlierOffsetAtOverlap() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withEarlierOffsetAtOverlap____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withEra(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withEra__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withHourOfDay(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withHourOfDay__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withLaterOffsetAtOverlap() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withLaterOffsetAtOverlap____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withMillis(jlong p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].j = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withMillis__J__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withMillisOfDay(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withMillisOfDay__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withMillisOfSecond(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withMillisOfSecond__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withMinuteOfHour(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withMinuteOfHour__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withMonthOfYear(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withMonthOfYear__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withSecondOfMinute(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withSecondOfMinute__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withTime(jint p0, jint p1, jint p2, jint p3) const {
    ::zschimmer::javabridge::raw_parameter_list<4> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    parameter_list._jvalues[2].i = p2;
    parameter_list._jvalues[3].i = p3;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withTime__IIII__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withTimeAtStartOfDay() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withTimeAtStartOfDay____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withWeekOfWeekyear(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withWeekOfWeekyear__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withWeekyear(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withWeekyear__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withYear(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withYear__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withYearOfCentury(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withYearOfCentury__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::joda::time::DateTime DateTime::withYearOfEra(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    DateTime__class* cls = _class.get();
    ::javaproxy::org::joda::time::DateTime result;
    result.steal_local_ref(cls->_withYearOfEra__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* DateTime::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* DateTime::java_class_() { return DateTime__class::class_factory.clas(); }


void DateTime::Lazy_class::initialize() const {
    _value = DateTime__class::class_factory.clas();
}


}}}}
