// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__order__Order.h"
#include "com__sos__scheduler__engine__kernel__filebased__FileBased.h"
#include "com__sos__scheduler__engine__kernel__order__UnmodifiableOrder.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace order { 

struct Order__class : ::zschimmer::javabridge::Class
{
    Order__class(const string& class_name);
   ~Order__class();

    ::zschimmer::javabridge::Method const _persistState____method;

    static const ::zschimmer::javabridge::class_factory< Order__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Order__class > Order__class::class_factory ("com.sos.scheduler.engine.kernel.order.Order");

Order__class::Order__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_persistState____method(this, "persistState", "()V"){}

Order__class::~Order__class() {}




Order::Order(jobject jo) { if (jo) assign_(jo); }

Order::Order(const Order& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Order::Order(Order&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Order::~Order() { assign_(NULL); }




void Order::persistState() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Order__class* cls = _class.get();
    cls->_persistState____method.call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* Order::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Order::java_class_() { return Order__class::class_factory.clas(); }


void Order::Lazy_class::initialize() const {
    _value = Order__class::class_factory.clas();
}


}}}}}}}
