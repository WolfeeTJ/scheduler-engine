// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "org__joda__time__base__AbstractDateTime.h"
#include "java__lang__String.h"
#include "org__joda__time__base__AbstractInstant.h"

namespace javaproxy { namespace org { namespace joda { namespace time { namespace base { 

struct AbstractDateTime__class : ::zschimmer::javabridge::Class
{
    AbstractDateTime__class(const string& class_name);
   ~AbstractDateTime__class();

    ::zschimmer::javabridge::Method const _getCenturyOfEra____method;
    ::zschimmer::javabridge::Method const _getDayOfMonth____method;
    ::zschimmer::javabridge::Method const _getDayOfWeek____method;
    ::zschimmer::javabridge::Method const _getDayOfYear____method;
    ::zschimmer::javabridge::Method const _getEra____method;
    ::zschimmer::javabridge::Method const _getHourOfDay____method;
    ::zschimmer::javabridge::Method const _getMillisOfDay____method;
    ::zschimmer::javabridge::Method const _getMillisOfSecond____method;
    ::zschimmer::javabridge::Method const _getMinuteOfDay____method;
    ::zschimmer::javabridge::Method const _getMinuteOfHour____method;
    ::zschimmer::javabridge::Method const _getMonthOfYear____method;
    ::zschimmer::javabridge::Method const _getSecondOfDay____method;
    ::zschimmer::javabridge::Method const _getSecondOfMinute____method;
    ::zschimmer::javabridge::Method const _getWeekOfWeekyear____method;
    ::zschimmer::javabridge::Method const _getWeekyear____method;
    ::zschimmer::javabridge::Method const _getYear____method;
    ::zschimmer::javabridge::Method const _getYearOfCentury____method;
    ::zschimmer::javabridge::Method const _getYearOfEra____method;
    ::zschimmer::javabridge::Method const _toString__Ljava_lang_String_2__method;

    static const ::zschimmer::javabridge::class_factory< AbstractDateTime__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< AbstractDateTime__class > AbstractDateTime__class::class_factory ("org.joda.time.base.AbstractDateTime");

AbstractDateTime__class::AbstractDateTime__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_getCenturyOfEra____method(this, "getCenturyOfEra", "()I")
    ,_getDayOfMonth____method(this, "getDayOfMonth", "()I")
    ,_getDayOfWeek____method(this, "getDayOfWeek", "()I")
    ,_getDayOfYear____method(this, "getDayOfYear", "()I")
    ,_getEra____method(this, "getEra", "()I")
    ,_getHourOfDay____method(this, "getHourOfDay", "()I")
    ,_getMillisOfDay____method(this, "getMillisOfDay", "()I")
    ,_getMillisOfSecond____method(this, "getMillisOfSecond", "()I")
    ,_getMinuteOfDay____method(this, "getMinuteOfDay", "()I")
    ,_getMinuteOfHour____method(this, "getMinuteOfHour", "()I")
    ,_getMonthOfYear____method(this, "getMonthOfYear", "()I")
    ,_getSecondOfDay____method(this, "getSecondOfDay", "()I")
    ,_getSecondOfMinute____method(this, "getSecondOfMinute", "()I")
    ,_getWeekOfWeekyear____method(this, "getWeekOfWeekyear", "()I")
    ,_getWeekyear____method(this, "getWeekyear", "()I")
    ,_getYear____method(this, "getYear", "()I")
    ,_getYearOfCentury____method(this, "getYearOfCentury", "()I")
    ,_getYearOfEra____method(this, "getYearOfEra", "()I")
    ,_toString__Ljava_lang_String_2__method(this, "toString", "(Ljava/lang/String;)Ljava/lang/String;"){}

AbstractDateTime__class::~AbstractDateTime__class() {}




AbstractDateTime::AbstractDateTime(jobject jo) { if (jo) assign_(jo); }

AbstractDateTime::AbstractDateTime(const AbstractDateTime& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    AbstractDateTime::AbstractDateTime(AbstractDateTime&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

AbstractDateTime::~AbstractDateTime() { assign_(NULL); }




jint AbstractDateTime::getCenturyOfEra() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getCenturyOfEra____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getDayOfMonth() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getDayOfMonth____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getDayOfWeek() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getDayOfWeek____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getDayOfYear() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getDayOfYear____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getEra() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getEra____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getHourOfDay() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getHourOfDay____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getMillisOfDay() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getMillisOfDay____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getMillisOfSecond() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getMillisOfSecond____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getMinuteOfDay() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getMinuteOfDay____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getMinuteOfHour() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getMinuteOfHour____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getMonthOfYear() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getMonthOfYear____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getSecondOfDay() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getSecondOfDay____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getSecondOfMinute() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getSecondOfMinute____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getWeekOfWeekyear() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getWeekOfWeekyear____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getWeekyear() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getWeekyear____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getYear() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getYear____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getYearOfCentury() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getYearOfCentury____method.int_call(get_jobject(), parameter_list);
}

jint AbstractDateTime::getYearOfEra() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDateTime__class* cls = _class.get();
    return cls->_getYearOfEra____method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String AbstractDateTime::toString(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractDateTime__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* AbstractDateTime::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* AbstractDateTime::java_class_() { return AbstractDateTime__class::class_factory.clas(); }


void AbstractDateTime::Lazy_class::initialize() const {
    _value = AbstractDateTime__class::class_factory.clas();
}


}}}}}
