// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#ifndef _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_SCRIPTING_APIMODULEINSTANCE_H_
#define _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_KERNEL_SCRIPTING_APIMODULEINSTANCE_H_

#include "com__sos__scheduler__engine__kernel__scripting__ScriptInstance.h"
#include "java__lang__Object.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace scripting { struct ScriptInstance; }}}}}}}
namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}


namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace scripting { 


struct APIModuleInstance__class;

struct APIModuleInstance : ::zschimmer::javabridge::proxy_jobject< APIModuleInstance >, ::javaproxy::com::sos::scheduler::engine::kernel::scripting::ScriptInstance {
    static APIModuleInstance new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1);

    APIModuleInstance(jobject = NULL);

    APIModuleInstance(const APIModuleInstance&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        APIModuleInstance(APIModuleInstance&&);
    #endif

    ~APIModuleInstance();

    APIModuleInstance& operator=(jobject jo) { assign_(jo); return *this; }
    APIModuleInstance& operator=(const APIModuleInstance& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        APIModuleInstance& operator=(APIModuleInstance&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< APIModuleInstance >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< APIModuleInstance >::set_jobject(jo);
        ::javaproxy::com::sos::scheduler::engine::kernel::scripting::ScriptInstance::set_jobject(jo);
    }
  public:

    void addObject(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1);
    ::javaproxy::java::lang::Object call(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0);
    bool nameExists(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0);

    ::zschimmer::javabridge::Class* java_object_class_();

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<APIModuleInstance__class*> {
        void initialize();
    };

    Lazy_class _class;
};


}}}}}}}

#endif
