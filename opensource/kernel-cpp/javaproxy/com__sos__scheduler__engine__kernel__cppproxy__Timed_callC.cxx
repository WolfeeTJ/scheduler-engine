// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__cppproxy__Timed_callC.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

struct Timed_callC__class : ::zschimmer::javabridge::Class
{
    Timed_callC__class(const string& class_name);
   ~Timed_callC__class();


    static const ::zschimmer::javabridge::class_factory< Timed_callC__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Timed_callC__class > Timed_callC__class::class_factory ("com.sos.scheduler.engine.kernel.cppproxy.Timed_callC");

Timed_callC__class::Timed_callC__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
{}

Timed_callC__class::~Timed_callC__class() {}




Timed_callC::Timed_callC(jobject jo) { if (jo) assign_(jo); }

Timed_callC::Timed_callC(const Timed_callC& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Timed_callC::Timed_callC(Timed_callC&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Timed_callC::~Timed_callC() { assign_(NULL); }





::zschimmer::javabridge::Class* Timed_callC::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Timed_callC::java_class_() { return Timed_callC__class::class_factory.clas(); }


void Timed_callC::Lazy_class::initialize() const {
    _value = Timed_callC__class::class_factory.clas();
}


}}}}}}}
