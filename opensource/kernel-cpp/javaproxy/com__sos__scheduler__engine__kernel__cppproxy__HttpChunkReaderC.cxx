// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__cppproxy__HttpChunkReaderC.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

struct HttpChunkReaderC__class : ::zschimmer::javabridge::Class
{
    HttpChunkReaderC__class(const string& class_name);
   ~HttpChunkReaderC__class();


    static const ::zschimmer::javabridge::class_factory< HttpChunkReaderC__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< HttpChunkReaderC__class > HttpChunkReaderC__class::class_factory ("com.sos.scheduler.engine.kernel.cppproxy.HttpChunkReaderC");

HttpChunkReaderC__class::HttpChunkReaderC__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
{}

HttpChunkReaderC__class::~HttpChunkReaderC__class() {}




HttpChunkReaderC::HttpChunkReaderC(jobject jo) { if (jo) assign_(jo); }

HttpChunkReaderC::HttpChunkReaderC(const HttpChunkReaderC& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    HttpChunkReaderC::HttpChunkReaderC(HttpChunkReaderC&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

HttpChunkReaderC::~HttpChunkReaderC() { assign_(NULL); }





::zschimmer::javabridge::Class* HttpChunkReaderC::java_object_class_() { return _class.get(); }

::zschimmer::javabridge::Class* HttpChunkReaderC::java_class_() { return HttpChunkReaderC__class::class_factory.clas(); }


void HttpChunkReaderC::Lazy_class::initialize() {
    _value = HttpChunkReaderC__class::class_factory.clas();
}


}}}}}}}
