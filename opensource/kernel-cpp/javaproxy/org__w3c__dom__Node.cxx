// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "org__w3c__dom__Node.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "org__w3c__dom__Document.h"
#include "org__w3c__dom__NodeList.h"

namespace javaproxy { namespace org { namespace w3c { namespace dom { 

struct Node__class : ::zschimmer::javabridge::Class
{
    Node__class(const string& class_name);
   ~Node__class();

    ::zschimmer::javabridge::Method const _appendChild__Lorg_w3c_dom_Node_2__method;
    ::zschimmer::javabridge::Method const _cloneNode__Z__method;
    ::zschimmer::javabridge::Method const _compareDocumentPosition__Lorg_w3c_dom_Node_2__method;
    ::zschimmer::javabridge::Method const _getBaseURI____method;
    ::zschimmer::javabridge::Method const _getChildNodes____method;
    ::zschimmer::javabridge::Method const _getFeature__Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _getFirstChild____method;
    ::zschimmer::javabridge::Method const _getLastChild____method;
    ::zschimmer::javabridge::Method const _getLocalName____method;
    ::zschimmer::javabridge::Method const _getNamespaceURI____method;
    ::zschimmer::javabridge::Method const _getNextSibling____method;
    ::zschimmer::javabridge::Method const _getNodeName____method;
    ::zschimmer::javabridge::Method const _getNodeType____method;
    ::zschimmer::javabridge::Method const _getNodeValue____method;
    ::zschimmer::javabridge::Method const _getOwnerDocument____method;
    ::zschimmer::javabridge::Method const _getParentNode____method;
    ::zschimmer::javabridge::Method const _getPrefix____method;
    ::zschimmer::javabridge::Method const _getPreviousSibling____method;
    ::zschimmer::javabridge::Method const _getTextContent____method;
    ::zschimmer::javabridge::Method const _getUserData__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _hasAttributes____method;
    ::zschimmer::javabridge::Method const _hasChildNodes____method;
    ::zschimmer::javabridge::Method const _insertBefore__Lorg_w3c_dom_Node_2Lorg_w3c_dom_Node_2__method;
    ::zschimmer::javabridge::Method const _isDefaultNamespace__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _isEqualNode__Lorg_w3c_dom_Node_2__method;
    ::zschimmer::javabridge::Method const _isSameNode__Lorg_w3c_dom_Node_2__method;
    ::zschimmer::javabridge::Method const _isSupported__Ljava_lang_String_2Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _lookupNamespaceURI__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _lookupPrefix__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _normalize____method;
    ::zschimmer::javabridge::Method const _removeChild__Lorg_w3c_dom_Node_2__method;
    ::zschimmer::javabridge::Method const _replaceChild__Lorg_w3c_dom_Node_2Lorg_w3c_dom_Node_2__method;
    ::zschimmer::javabridge::Method const _setNodeValue__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _setPrefix__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _setTextContent__Ljava_lang_String_2__method;

    static const ::zschimmer::javabridge::class_factory< Node__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Node__class > Node__class::class_factory ("org.w3c.dom.Node");

Node__class::Node__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_appendChild__Lorg_w3c_dom_Node_2__method(this, "appendChild", "(Lorg/w3c/dom/Node;)Lorg/w3c/dom/Node;")
    ,_cloneNode__Z__method(this, "cloneNode", "(Z)Lorg/w3c/dom/Node;")
    ,_compareDocumentPosition__Lorg_w3c_dom_Node_2__method(this, "compareDocumentPosition", "(Lorg/w3c/dom/Node;)S")
    ,_getBaseURI____method(this, "getBaseURI", "()Ljava/lang/String;")
    ,_getChildNodes____method(this, "getChildNodes", "()Lorg/w3c/dom/NodeList;")
    ,_getFeature__Ljava_lang_String_2Ljava_lang_String_2__method(this, "getFeature", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;")
    ,_getFirstChild____method(this, "getFirstChild", "()Lorg/w3c/dom/Node;")
    ,_getLastChild____method(this, "getLastChild", "()Lorg/w3c/dom/Node;")
    ,_getLocalName____method(this, "getLocalName", "()Ljava/lang/String;")
    ,_getNamespaceURI____method(this, "getNamespaceURI", "()Ljava/lang/String;")
    ,_getNextSibling____method(this, "getNextSibling", "()Lorg/w3c/dom/Node;")
    ,_getNodeName____method(this, "getNodeName", "()Ljava/lang/String;")
    ,_getNodeType____method(this, "getNodeType", "()S")
    ,_getNodeValue____method(this, "getNodeValue", "()Ljava/lang/String;")
    ,_getOwnerDocument____method(this, "getOwnerDocument", "()Lorg/w3c/dom/Document;")
    ,_getParentNode____method(this, "getParentNode", "()Lorg/w3c/dom/Node;")
    ,_getPrefix____method(this, "getPrefix", "()Ljava/lang/String;")
    ,_getPreviousSibling____method(this, "getPreviousSibling", "()Lorg/w3c/dom/Node;")
    ,_getTextContent____method(this, "getTextContent", "()Ljava/lang/String;")
    ,_getUserData__Ljava_lang_String_2__method(this, "getUserData", "(Ljava/lang/String;)Ljava/lang/Object;")
    ,_hasAttributes____method(this, "hasAttributes", "()Z")
    ,_hasChildNodes____method(this, "hasChildNodes", "()Z")
    ,_insertBefore__Lorg_w3c_dom_Node_2Lorg_w3c_dom_Node_2__method(this, "insertBefore", "(Lorg/w3c/dom/Node;Lorg/w3c/dom/Node;)Lorg/w3c/dom/Node;")
    ,_isDefaultNamespace__Ljava_lang_String_2__method(this, "isDefaultNamespace", "(Ljava/lang/String;)Z")
    ,_isEqualNode__Lorg_w3c_dom_Node_2__method(this, "isEqualNode", "(Lorg/w3c/dom/Node;)Z")
    ,_isSameNode__Lorg_w3c_dom_Node_2__method(this, "isSameNode", "(Lorg/w3c/dom/Node;)Z")
    ,_isSupported__Ljava_lang_String_2Ljava_lang_String_2__method(this, "isSupported", "(Ljava/lang/String;Ljava/lang/String;)Z")
    ,_lookupNamespaceURI__Ljava_lang_String_2__method(this, "lookupNamespaceURI", "(Ljava/lang/String;)Ljava/lang/String;")
    ,_lookupPrefix__Ljava_lang_String_2__method(this, "lookupPrefix", "(Ljava/lang/String;)Ljava/lang/String;")
    ,_normalize____method(this, "normalize", "()V")
    ,_removeChild__Lorg_w3c_dom_Node_2__method(this, "removeChild", "(Lorg/w3c/dom/Node;)Lorg/w3c/dom/Node;")
    ,_replaceChild__Lorg_w3c_dom_Node_2Lorg_w3c_dom_Node_2__method(this, "replaceChild", "(Lorg/w3c/dom/Node;Lorg/w3c/dom/Node;)Lorg/w3c/dom/Node;")
    ,_setNodeValue__Ljava_lang_String_2__method(this, "setNodeValue", "(Ljava/lang/String;)V")
    ,_setPrefix__Ljava_lang_String_2__method(this, "setPrefix", "(Ljava/lang/String;)V")
    ,_setTextContent__Ljava_lang_String_2__method(this, "setTextContent", "(Ljava/lang/String;)V"){}

Node__class::~Node__class() {}




Node::Node(jobject jo) { if (jo) assign_(jo); }

Node::Node(const Node& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Node::Node(Node&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Node::~Node() { assign_(NULL); }




::javaproxy::org::w3c::dom::Node Node::appendChild(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Node >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Node result;
    result.steal_local_ref(cls->_appendChild__Lorg_w3c_dom_Node_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::w3c::dom::Node Node::cloneNode(jboolean p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].z = p0;
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Node result;
    result.steal_local_ref(cls->_cloneNode__Z__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jshort Node::compareDocumentPosition(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Node >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    return cls->_compareDocumentPosition__Lorg_w3c_dom_Node_2__method.short_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String Node::getBaseURI() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getBaseURI____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::w3c::dom::NodeList Node::getChildNodes() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::NodeList result;
    result.steal_local_ref(cls->_getChildNodes____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object Node::getFeature(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    Node__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_getFeature__Ljava_lang_String_2Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::w3c::dom::Node Node::getFirstChild() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Node result;
    result.steal_local_ref(cls->_getFirstChild____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::w3c::dom::Node Node::getLastChild() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Node result;
    result.steal_local_ref(cls->_getLastChild____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String Node::getLocalName() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getLocalName____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String Node::getNamespaceURI() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getNamespaceURI____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::w3c::dom::Node Node::getNextSibling() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Node result;
    result.steal_local_ref(cls->_getNextSibling____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String Node::getNodeName() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getNodeName____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jshort Node::getNodeType() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    return cls->_getNodeType____method.short_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String Node::getNodeValue() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getNodeValue____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::w3c::dom::Document Node::getOwnerDocument() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Document result;
    result.steal_local_ref(cls->_getOwnerDocument____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::w3c::dom::Node Node::getParentNode() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Node result;
    result.steal_local_ref(cls->_getParentNode____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String Node::getPrefix() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getPrefix____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::w3c::dom::Node Node::getPreviousSibling() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Node result;
    result.steal_local_ref(cls->_getPreviousSibling____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String Node::getTextContent() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getTextContent____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object Node::getUserData(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_getUserData__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool Node::hasAttributes() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    return 0 != cls->_hasAttributes____method.bool_call(get_jobject(), parameter_list);
}

bool Node::hasChildNodes() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    return 0 != cls->_hasChildNodes____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::org::w3c::dom::Node Node::insertBefore(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Node >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Node >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Node result;
    result.steal_local_ref(cls->_insertBefore__Lorg_w3c_dom_Node_2Lorg_w3c_dom_Node_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool Node::isDefaultNamespace(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    return 0 != cls->_isDefaultNamespace__Ljava_lang_String_2__method.bool_call(get_jobject(), parameter_list);
}

bool Node::isEqualNode(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Node >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    return 0 != cls->_isEqualNode__Lorg_w3c_dom_Node_2__method.bool_call(get_jobject(), parameter_list);
}

bool Node::isSameNode(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Node >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    return 0 != cls->_isSameNode__Lorg_w3c_dom_Node_2__method.bool_call(get_jobject(), parameter_list);
}

bool Node::isSupported(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    Node__class* cls = _class.get();
    return 0 != cls->_isSupported__Ljava_lang_String_2Ljava_lang_String_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String Node::lookupNamespaceURI(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_lookupNamespaceURI__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String Node::lookupPrefix(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_lookupPrefix__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

void Node::normalize() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Node__class* cls = _class.get();
    cls->_normalize____method.call(get_jobject(), parameter_list);
}

::javaproxy::org::w3c::dom::Node Node::removeChild(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Node >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Node result;
    result.steal_local_ref(cls->_removeChild__Lorg_w3c_dom_Node_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::org::w3c::dom::Node Node::replaceChild(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Node >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Node >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    Node__class* cls = _class.get();
    ::javaproxy::org::w3c::dom::Node result;
    result.steal_local_ref(cls->_replaceChild__Lorg_w3c_dom_Node_2Lorg_w3c_dom_Node_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

void Node::setNodeValue(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    cls->_setNodeValue__Ljava_lang_String_2__method.call(get_jobject(), parameter_list);
}

void Node::setPrefix(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    cls->_setPrefix__Ljava_lang_String_2__method.call(get_jobject(), parameter_list);
}

void Node::setTextContent(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Node__class* cls = _class.get();
    cls->_setTextContent__Ljava_lang_String_2__method.call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* Node::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Node::java_class_() { return Node__class::class_factory.clas(); }


void Node::Lazy_class::initialize() const {
    _value = Node__class::class_factory.clas();
}


}}}}
