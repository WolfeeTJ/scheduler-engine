package com.sos.scheduler.engine.kernel.scripting;

import com.sos.scheduler.engine.kernel.scheduler.SchedulerException;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;

import static org.junit.Assert.assertEquals;

/**
* \class ModuleInstanceTest 
* 
* \brief ModuleInstanceTest - 
* 
* \details
*
* \section ModuleInstanceTest.java_intro_sec Introduction
*
* \section ModuleInstanceTest.java_samples Some Samples
*
* \code
*   .... code goes here ...
* \endcode
*
* <p style="text-align:center">
* <br />---------------------------------------------------------------------------
* <br /> APL/Software GmbH - Berlin
* <br />##### generated by ClaviusXPress (http://www.sos-berlin.com) #########
* <br />---------------------------------------------------------------------------
* </p>
* \author EQCPN
* \version 15.12.2010
* \see reference
*
* Created on 15.12.2010 13:55:53
 */

public class ScriptInstanceTest {
	
    private static final String scriptRoot = getResourceFolder();

    private ByteArrayOutputStream outputStream;

    @Before
    public void initTest() throws Exception {
        outputStream = new ByteArrayOutputStream();
        System.setOut(new PrintStream(outputStream));     // redirect stdout to the outputStream object
    }

    private static String getResourceFolder() {
        String resourceRoot = ScriptInstanceTest.class.getResource("/").getPath();
        String resourcePackage = ScriptInstanceTest.class.getPackage().getName().replace(".","/");
        return resourceRoot + resourcePackage;
    }

	@Test
	public void javaScript()  {
		ScriptInstance module = new ScriptInstance("javascript","print('hello world');");
		module.call();
        assertEquals("hello world", outputStream.toString());
	}

	@Test
	public void javaScriptWithParams() {
		ScriptInstance module = new ScriptInstance("javascript","print('hello ' + name);");
		module.addObject("Walter", "name");
		module.call();
        assertEquals("hello Walter", outputStream.toString());
	}

	@Test
	public void javaScriptWithFunction() throws NoSuchMethodException {
		String script = "function show () {print('hello world'); }\n";
		ScriptInstance module = new ScriptInstance("javascript",script);
		module.call("show");
        assertEquals("hello world", outputStream.toString());
	}

	@Test
	public void javaScriptWithFunctions() throws NoSuchMethodException {
		String script = "function add(a, b) {c = a + b; param = 'abc';return c; }";
		ScriptInstance module = new ScriptInstance("javascript",script);
		String param = "Hugo";
		module.addObject(param, "param");
		Double result = (Double)module.call("add", new Object[] { 5, 2 });
        assertEquals("abc", module.getObject("param"));
        assertEquals(7, result.intValue());
	}

	@Test
	public void javaScriptDoubleFunction() throws NoSuchMethodException {
		String script = "function divide (a, b) {c = a / b; return c; }";
		ScriptInstance module = new ScriptInstance("javascript",script);
        Double result = module.callDouble("divide", new Object[]{12, 3});
        assertEquals( 4, result.intValue() );
	}

	@Test
	public void javaScriptFromFile() throws NoSuchMethodException {
        File sourceFile = new File(scriptRoot + "/test.js");
		ScriptInstance module = new ScriptInstance("javascript",sourceFile);
        module.addObject("Hugo","name");
        module.call("spooler_init");
        while (module.callBoolean("spooler_process")) {}
        module.call("spooler_exit");
        assertEquals( 7, outputStream.toString().split("\n").length );
	}

	@Test(expected = SchedulerException.class)
	public void invalidLanguage() throws SchedulerException {
        ScriptInstance.logAvailableLanguages();
        ScriptInstance module = new ScriptInstance("tolami","print('Hallo Welt\\n');");
        module.call();
	}

    @Test
	public void missingScriptCode() {
        ScriptInstance module = new ScriptInstance("javascript","");
        module.call();
	}

}
