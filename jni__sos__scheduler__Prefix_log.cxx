// *** Generated by com.sos.scheduler.kernel.cplusplus.generator ***
#include "spooler.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Proxy_class> has_proxy< ::sos::scheduler::Prefix_log >::proxy_class_factory("com.sos.scheduler.kernel.core.cppproxy.Prefix_logCImpl");

}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace kernel { namespace core { namespace cppproxy { 

static void JNICALL error__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_proxy< ::sos::scheduler::Prefix_log >::of_proxys_cpp_reference(cppReference)->error(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace kernel { namespace core { namespace cppproxy { 

static void JNICALL warn__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_proxy< ::sos::scheduler::Prefix_log >::of_proxys_cpp_reference(cppReference)->warn(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace kernel { namespace core { namespace cppproxy { 

static void JNICALL info__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_proxy< ::sos::scheduler::Prefix_log >::of_proxys_cpp_reference(cppReference)->info(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace kernel { namespace core { namespace cppproxy { 

static void JNICALL debug3__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_proxy< ::sos::scheduler::Prefix_log >::of_proxys_cpp_reference(cppReference)->debug3(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

}}}}}}}

const static JNINativeMethod native_methods[] = {
{ "error__native", "(JLjava/lang/String;)V", (void*)::javaproxy::com::sos::scheduler::kernel::core::cppproxy::error__Ljava_lang_String_2 },
{ "warn__native", "(JLjava/lang/String;)V", (void*)::javaproxy::com::sos::scheduler::kernel::core::cppproxy::warn__Ljava_lang_String_2 },
{ "info__native", "(JLjava/lang/String;)V", (void*)::javaproxy::com::sos::scheduler::kernel::core::cppproxy::info__Ljava_lang_String_2 },
{ "debug3__native", "(JLjava/lang/String;)V", (void*)::javaproxy::com::sos::scheduler::kernel::core::cppproxy::debug3__Ljava_lang_String_2 }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_proxy< ::sos::scheduler::Prefix_log>::register_cpp_proxy_class_in_java() {
        Env env;
        Class* cls = ::sos::scheduler::Prefix_log::proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, NO_OF(native_methods));
        if (ret < 0)  env.throw_java("RegisterNatives");
    }

}}
