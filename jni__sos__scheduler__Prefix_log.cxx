// *** Generated by com.sos.cplusplus.generator ***
#include "spooler.h"
#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_java_proxy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Java_proxy_class> has_java_proxy< ::sos::scheduler::Prefix_log >::java_proxy_class_factory("com.sos.scheduler.intern.cppproxy.Prefix_logCImpl");

}}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_Prefix_1logC_warn__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_java_proxy< ::sos::scheduler::Prefix_log >::of_java_proxy_cpp_reference(cppReference)->warn(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_Prefix_1logC_debug3__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_java_proxy< ::sos::scheduler::Prefix_log >::of_java_proxy_cpp_reference(cppReference)->debug3(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_Prefix_1logC_error__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_java_proxy< ::sos::scheduler::Prefix_log >::of_java_proxy_cpp_reference(cppReference)->error(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

extern "C" void JNICALL Java_com_sos_scheduler_intern_cppproxy_Prefix_1logC_info__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        (has_java_proxy< ::sos::scheduler::Prefix_log >::of_java_proxy_cpp_reference(cppReference)->info(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

const static JNINativeMethod native_methods[] = {
{ "warn__native", "(JLjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_Prefix_1logC_warn__Ljava_lang_String_2 },
{ "debug3__native", "(JLjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_Prefix_1logC_debug3__Ljava_lang_String_2 },
{ "error__native", "(JLjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_Prefix_1logC_error__Ljava_lang_String_2 },
{ "info__native", "(JLjava/lang/String;)V", (void*)Java_com_sos_scheduler_intern_cppproxy_Prefix_1logC_info__Ljava_lang_String_2 }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_java_proxy<::sos::scheduler::Prefix_log>::initialize_java_proxy() {
        Env env;
        Class* cls = ::sos::scheduler::Prefix_log::java_proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, NO_OF(native_methods));
        if (ret < 0)  env.throw_java("RegisterNatives");
    }

}}
