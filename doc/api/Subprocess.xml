<?xml version="1.0"?>
<!-- $Id$ -->

<?xml-stylesheet href="api_default_language.xsl" type="text/xsl"?>


<api.class 
    name        = "Subprocess" 
    object_name = "subprocess"
    base_dir    = "../"
    author      = "$Author$"
    date        = "$Date$"
>


<method name="close">
    <com/>
</method>


<method name="start">
    <com>
        <com.parameter name="command_line">
            <com.type type="VARIANT*"/>
        </com.parameter>
    </com>

    <java>
        <java.parameter name="command_line">
            <java.type type="java.lang.String"/>
        </java.parameter>
    </java>

    <java>
        <java.parameter name="command_line">
            <java.type type="java.lang.String[]"/>
        </java.parameter>
    </java>
</method>


<property name="pid" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>
</property>


<property name="terminated" access="read">
    <com>
        <com.result>
            <com.type type="bool"/>
        </com.result>
    </com>
    
    <description>
        <p>
            Prüft, ob der Prozess geendet hat. 
            Wenn er geendet hat, kann anschließend 
            <scheduler_method class="Subprocess" property="exit_code"/> und
            <scheduler_method class="Subprocess" property="termination_signal"/>
            gerufen werden.
        </p>
    </description>
</property>


<property name="exit_code" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>
    
    <description>
        Erst aufrufen, wenn
        <scheduler_method class="Subprocess" property="terminated"/><code> == true</code>.
    </description>
</property>


<property name="termination_signal" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>
    
    <title>
        Signal, mit dem sich der Prozess beendet hat (nur Unix)
    </title>
    
    <description>
        Erst aufrufen, wenn
        <scheduler_method class="Subprocess" property="terminated"/><code> == true</code>.
    </description>
</property>


<property name="ignore_error">
    <com>
        <com.result>
            <com.type type="bool"/>
        </com.result>
    </com>

    <title>
        Verhindert, dass bei <code>exit_code != 0</code> der Job stoppt 
    </title>    
    
    <description>
        <p>
            Verhindert, dass der Job stoppt, wenn der Subprozess bei Task-Ende mit 
            <scheduler_method class="Subprocess" property="exit_code"/><code> != 0</code>
            geendet hat. 
        </p>
        <p>
            Wenn das Ende des Subprocesses nicht mit 
            <scheduler_method class="Subprocess" property="wait_for_termination"/>
            abgewartet worden ist, 
            tut das der Scheduler bei Task-Ende. 
            Wenn dann der Subprocess mit 
            <scheduler_method class="Subprocess" property="exit_code"/><code> != 0</code> endet,
            stoppt der Job mit Fehler. 
        </p>
        <p>
            Mit <code>ignore_error</code> kann das verhindert werden.
        </p>
    </description>
</property>


<property name="ignore_signal">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>
    
    <title>
        Verhindert, dass bei einem Abbruch des Prozesses mit Signal der Job stoppt
    </title>
    
    <description>
        Wirkt nicht unter Windows, weil es hier keine Signale gibt.
    </description>
</property>


<property name="timeout" access="write">
    <com>
        <com.result name="seconds">
            <com.type type="double"/>
        </com.result>
    </com>
    
    <title>
        Frist für den Subprozess
    </title>
    
    <description>
        Nach Ablauf der Zeit bricht der Scheduler den Subprozess ab (Unix: mit <code>SIGKILL</code>).
    </description>
</property>


<property name="environment" access="write">
    <com>
        <com.parameter name="name">
            <com.type type="BSTR"/>
        </com.parameter>
        
        <com.result name="value">
            <com.type type="BSTR"/>
        </com.result>
    </com>
</property>


<method name="wait_for_termination">
    <com>
        <com.parameter name="seconds">
            <com.type type="VARIANT*"/>
        </com.parameter>
        
        <com.result name="terminated">
            <com.type type="bool"/>
        </com.result>
    </com>
</method>


<method name="kill">
    <com>
        <com.parameter name="signal" optional="true">
            <com.type type="int"/>
            
            <description>
                Nur unter Unix: Das Signal für <code>kill()</code>.
                0 wird als 9 (<code>SIGKILL</code>, sofortiges Ende) interpretiert.
            </description>
        </com.parameter>
    </com>
    
    <title>
        Bricht den Subprozess ab
    </title>
</method>


<description>
    <p>
        Ein Subprozess ist irgendein Prozess, 
        der mit <scheduler_method class="Task" method="create_subprocess"/> gestartet werden kann.
    </p>
</description>

</api.class>
