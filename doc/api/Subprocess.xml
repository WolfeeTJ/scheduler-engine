<?xml version="1.0"?>
<!-- $Id$ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Subprocess"
    object_name = "subprocess"
    base_dir    = "../"
    author      = "$Author$"
    date        = "$Date$"
>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="close">
    <com/>

    <title>
        Gibt die System-Ressourcen frei
    </title>

    <description>
        <p>
            Sollte in Sprachen mit Garbage Collector (Java, JavaScript) gerufen werden,
            außer die Task beendet sich sofort.
        </p>
        <p>
            Der <code>Subprocess</code> ist danach unbrauchbar.
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="start">
    <com>
        <com.parameter name="command_line">
            <com.type type="VARIANT">
                <com.type type="BSTR"/>
                <com.type type="BSTR" array="true"/>
            </com.type>
        </com.parameter>
    </com>

    <java>
        <java.parameter name="command_line">
            <com.type type="BSTR"/>
        </java.parameter>
    </java>

    <java>
        <java.parameter name="filename_and_arguments">
            <com.type type="BSTR" array="true"/>
        </java.parameter>
    </java>

    <title>
        Startet den Prozess
    </title>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="pid" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Prozesskennung
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="terminated" access="read">
    <com>
        <com.result>
            <com.type type="bool"/>
        </com.result>
    </com>

    <description>
        <p>
            Prüft, ob der Prozess geendet hat.
            Wenn er geendet hat, kann anschließend
            <scheduler_method class="Subprocess" property="exit_code"/> und
            <scheduler_method class="Subprocess" property="termination_signal"/>
            gerufen werden.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="exit_code" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <description>
        Erst aufrufen, wenn
        <scheduler_method class="Subprocess" property="terminated"/><code> == true</code>.
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="termination_signal" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Signal, mit dem sich der Prozess beendet hat (nur Unix)
    </title>

    <description>
        Erst aufrufen, wenn
        <scheduler_method class="Subprocess" property="terminated"/><code> == true</code>.
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="ignore_error">
    <com>
        <com.result>
            <com.type type="bool"/>
        </com.result>
    </com>

    <title>
        Verhindert, dass bei <code>exit_code != 0</code> der Job stoppt
    </title>

    <description>
        <p>
            Verhindert, dass der Job stoppt, wenn der Subprozess bei Task-Ende mit
            <scheduler_method class="Subprocess" property="exit_code"/><code> != 0</code>
            geendet hat.
        </p>
        <p>
            Wenn das Ende des Subprocesses nicht mit
            <scheduler_method class="Subprocess" property="wait_for_termination"/>
            abgewartet worden ist,
            tut das der Scheduler bei Task-Ende.
            Wenn dann der Subprocess mit
            <scheduler_method class="Subprocess" property="exit_code"/><code> != 0</code> endet,
            stoppt der Job mit Fehler.
        </p>
        <p>
            Mit <code>ignore_error</code> kann das verhindert werden.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="ignore_signal">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Verhindert, dass bei einem Abbruch des Prozesses mit Signal der Job stoppt
    </title>

    <description>
        Wirkt nicht unter Windows, weil es hier keine Signale gibt.
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="timeout" access="write">
    <com>
        <com.result name="seconds">
            <com.type type="double"/>
        </com.result>
    </com>

    <title>
        Frist für den Subprozess
    </title>

    <description>
        Nach Ablauf der Zeit bricht der Scheduler den Subprozess ab (Unix: mit <code>SIGKILL</code>).
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="environment" access="write">
    <com>
        <com.parameter name="name">
            <com.type type="BSTR"/>
        </com.parameter>

        <com.result name="value">
            <com.type type="BSTR"/>
        </com.result>
    </com>

    <title>
        Umgebungsvariablen
    </title>

    <description>
        <p>
            Die hier gesetzten Variablen werden zusammen
            mit den übrigen Umgebungsvariablen des laufenden Prozesses
            dem neuen Subprozess übergeben.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="wait_for_termination">
    <com>
    </com>

    <com>
        <com.parameter name="seconds">
            <com.type type="VARIANT"/>
        </com.parameter>

        <com.result name="terminated">
            <com.type type="bool"/>
            <description>
                <code>true</code>, wenn der Subprozess geendet hat.
            </description>
        </com.result>
    </com>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="kill">
    <com>
        <com.parameter name="signal" optional="true">
            <com.type type="int"/>

            <description>
                Nur unter Unix: Das Signal für <code>kill()</code>.
                0 wird als 9 (<code>SIGKILL</code>, sofortiges Ende) interpretiert.
            </description>
        </com.parameter>
    </com>

    <title>
        Bricht den Subprozess ab
    </title>
</method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
    <!-- Siehe auch dieselben Methoden in Task.xml -->
    
    <property name="priority">
        <com>
            <com.result>
                <com.type type="int"/>
            </com.result>
        </com>

        <title>
            Prozess-Priorität
        </title>

        <description>
            <p>
                Unix: Die höchste Priorität ist -20, die niedrigste 20.
                Üblicherweise kann die Priorität nur gesenkt, nicht erhöht werden.
            </p>
            <p>
                Windows kennt die Prioritätsklassen
                4 <code>"idle"</code>,
                6 <code>"below_normal"</code>,
                8 <code>"normal"</code>,
                10 <code>"above_normal"</code> und
                13 <code>"high"</code>
                (andere Werte werden abgerundet).
                Siehe auch <scheduler_method class="Task" property="priority_class"/>.
            </p>
            <p>
                Wenn die Priorität nicht gesetzt werden kann, führt das nicht zu einem Fehler.
            </p>
            <p>
                Ein Prozess mit hoher Priorität kann Ihren Rechner blockieren.
            </p>
            <p>
                Die Priorität kann betriebsystem-unabhängig eingestellt werden mit 
                <scheduler_method class="Subprocess" property="priority_class"/>.
                Siehe auch <scheduler_method class="Task" property="priority"/>.
            </p>
        </description>

        <example programming_language="javascript">
            <pre>subprocess.priority = +5;    // Unix: Priorität etwas verschlechtern</pre>
        </example>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="priority_class">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Prioritätsklasse
        </title>

        <description>
            <p>
                Gesetzt werden können folgende Prioritätsklassen, die verschiedenen Prioritäten unter Windows und Unix entsprechen:
            </p>

            <table cellspacing="0" cellpadding="0" style="margin-top: 1em; margin-left: 3ex">
                <tr>
                    <td style="border-bottom: black 1pt solid">Prioritätsklasse</td>
                    <td style="border-bottom: black 1pt solid; padding-left: 2ex">Windows</td>
                    <td style="border-bottom: black 1pt solid; padding-left: 2ex">Unix</td>
                </tr>
                <tr>
                    <td>
                        <code>"idle"</code>
                    </td>
                    <td style="padding-left: 2ex; text-align: right">4</td>
                    <td style="padding-left: 2ex; text-align: right">16</td>
                </tr>
                <tr>
                    <td>
                        <code>"below_normal"</code>
                    </td>
                    <td style="padding-left: 2ex; text-align: right">6</td>
                    <td style="padding-left: 2ex; text-align: right">6</td>
                </tr>
                <tr>
                    <td>
                        <code>"normal"</code>
                    </td>
                    <td style="padding-left: 2ex; text-align: right">8</td>
                    <td style="padding-left: 2ex; text-align: right">0</td>
                </tr>
                <tr>
                    <td>
                        <code>"above_normal"</code>
                    </td>
                    <td style="padding-left: 2ex; text-align: right">10</td>
                    <td style="padding-left: 2ex; text-align: right">-6</td>
                </tr>
                <tr>
                    <td>
                        <code>"high"</code>
                    </td>
                    <td style="padding-left: 2ex; text-align: right">13</td>
                    <td style="padding-left: 2ex; text-align: right">-16</td>
                </tr>
            </table>
            <p>
                Wenn die Priorität nicht gesetzt werden kann, z.B. wegen mangelndem Recht, führt das nicht zu einem Fehler.
                Dagegen führt das Setzen einer nicht hier aufgeführten Prioritätsklasse zu einem Fehler.
            </p>
            <p>
                Ein Prozess mit hoher Priorität kann Ihren Rechner blockieren.
            </p>
            <p>
                Siehe auch
                <scheduler_method class="Subprocess" property="priority"/>,
                <scheduler_method class="Task" property="priority_class"/> und
                <a href="http://msdn.microsoft.com/library/en-us/dllproc/base/scheduling_priorities.asp">Microsoft® Windows® Scheduling Priorities</a>.
            </p>
        </description>

        <example programming_language="javascript">
            <pre>subprocess.priority_class = "below_normal";</pre>
        </example>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<description>
    <p>
        Ein Subprozess ist irgendein Prozess,
        der mit
        <scheduler_method class="Task" method="create_subprocess"/>
        oder
        <scheduler_method class="Subprocess" method="start"/>
        gestartet werden kann.
    </p>
</description>


<example programming_language="javascript">
    <pre>var subprocess = spooler_task.create_subprocess();

subprocess.environment( "test1" ) = "one";
subprocess.environment( "test2" ) = "two";
subprocess.ignore_error = true;

subprocess.start( "sleep 20" );

spooler_log.info( "pid=" + subprocess.pid );
subprocess.timeout = 10;

spooler_log.info( "wait_for_termination ..." );
var ok = subprocess.wait_for_termination( 10 );
spooler_log.info( "wait_for_termination ok=" + ok );

if( subprocess.terminated )
{
    spooler_log.info( "exit code=" + subprocess.exit_code );
    spooler_log.info( "termination signal=" + subprocess.termination_signal );
}</pre>
</example>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

</api.class>
