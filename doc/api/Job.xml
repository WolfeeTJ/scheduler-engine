<?xml version="1.0"?>
<!-- $Id$ -->

<?xml-stylesheet href="api_default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Job"
    object_name = "spooler_job"
    base_dir    = "../"
    author      = "$Author$"
    date        = "$Date$"
>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="start_when_directory_changed">
        <com>
            <com.parameter name="directory_path">
                <com.type type="BSTR"/>
            </com.parameter>

            <com.parameter name="filename_pattern" optional="true">
                <com.type type="BSTR"/>
                <description>
                    Beschränkt die Überwachung auf Dateinamen, die dem Regulären Ausdruck entsprechen.
                </description>
            </com.parameter>
        </com>


        <java>
            <java.parameter name="directory_path">
                <java.type class="java.io.File"/>
            </java.parameter>

            <java.parameter name="filename_pattern" optional="true">
                <java.type type="BSTR"/>
            </java.parameter>
        </java>

        <java>
            <java.parameter name="directory_path">
                <java.type class="java.io.File"/>
            </java.parameter>

            <java.parameter name="filename_pattern" optional="true">
                <java.type type="BSTR"/>
            </java.parameter>
        </java>

        <java>
            <java.parameter name="directory_path">
                <java.type type="BSTR"/>
            </java.parameter>
        </java>

        <java>
            <java.parameter name="directory_path">
                <java.type class="BSTR"/>
            </java.parameter>

            <java.parameter name="filename_pattern" optional="true">
                <java.type type="BSTR"/>
            </java.parameter>
        </java>

        <title>
            Überwacht ein Verzeichnis und lässt bei Änderung eine Task starten
        </title>

        <description>
            <p>
                Wenn keine Task des Jobs läuft und sich das Verzeichnis geändert hat
                (eine Datei hinzukommt, umbenannt oder entfernt wird),
                startet der Scheduler innerhalb der <scheduler_element name="run_time"/> eine Task.
            </p>
            <p>
                Um mehrere Verzeichnisse zu überwachen, kann der Aufruf wiederholt werden.
                Ein Aufruf mit einem bereits angegebenen Verzeichnis erneuert die Überwachung.
            </p>
            <p>
                Der Aufruf kann im Startskript oder in spooler_init() des Jobs codiert werden.
                Wenn er in spooler_init() ist, muss der Job zu Beginn einmal starten,
                damit er wirksam wird.
                Verwenden Sie dazu die Einstellung <scheduler_element name="run_time" attribute="once" value="yes"/>.
            </p>
        </description>

        <example programming_language="javascript">
            <pre>spooler_job.start_when_directory_changed( "c:/tmp" );</pre>
            <pre>// Nur Dateien beachten, deren Name nicht auf "~" endet.
spooler_job.start_when_directory_changed( "c:/tmp", "^.*[^~]$" );</pre>
        </example>
    </method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="clear_when_directory_changed">
        <com>
        </com>

        <title>
            Nimmt alle <code>start_when_directory_changed()</code> zurück
        </title>
    </method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="start">
        <com>
            <com.parameter name="variables" optional="true">
                <com.type class="Variable_set"/>
            </com.parameter>

            <com.result>
                <com.type class="Task"/>
            </com.result>
        </com>

        <title>
            Erzeugt eine neue Task und reiht sie in die Task-Warteschlange ein
        </title>

        <description>
            <p>
                Die Parameter stehen der Task mit
                <scheduler_method class="Task" property="params"/>
                zur Verfügung.
                Zwei besondere Parameter können angegeben werden:
            </p>

            <table cellpadding="0" cellspacing="0" style="margin-top: 1em; margin-left: 4ex">
                <tr>
                    <td>
                        <code>"spooler_task_name"</code>
                    </td>
                    <td style="padding-left: 1em">
                        gibt der Task einen Namen, der in den Statusanzeigen erscheint.
                    </td>
                </tr>
                <tr>
                    <td>
                        <code>"spooler_start_after"</code>
                    </td>
                    <td style="padding-left: 1em">
                        gibt eine Zeit in Sekunden (reelle Zahl) an, nach deren Ablauf die Task zu starten ist.
                        Dabei wird <scheduler_element name="run_time"/> nicht beachtet.
                    </td>
                </tr>
            </table>

            <p>
                Siehe <scheduler_method class="spooler" method="create_variable_set"/>,
                <scheduler_method class="spooler" property="job"/>,
                <scheduler_method class="Variable_set" property="var"/>.
            </p>
        </description>

        <example programming_language="java">
            <pre>spooler.job( "job_a" ).start();</pre>

            <pre>sos.spooler.Variable_set parameters = spooler.create_variable_set();
parameter.set_var( "my_parameter", "my_value" );
parameter.set_var( "other_parameter", "other_value" );
spooler.job( "job_a" ).start( parameters );</pre>
        </example>

        <example programming_language="javascript">
            <pre>spooler.job( "job_a" ).start();</pre>

            <pre>var parameters = spooler.create_variable_set();
parameters.value( "my_parameter" ) = "my_value";
parameters.value( "other_parameter" ) = "other_value";
spooler.job( "job_a" ).start( parameters );</pre>
        </example>

        <example programming_language="vbscript">
            <pre>spooler.job( "job_a" ).start</pre>

            <pre>Dim parameters
Set parameters = spooler.create_variable_set()
parameters.var( "my_parameter" ) = "my_value"
parameters.var( "other_parameter" ) = "other_value"
spooler.job( "job_a" ).start( parameters )</pre>
        </example>

        <example programming_language="perl">
            <pre>$spooler->job( 'job_a' )->start();</pre>

            <pre>my $parameters = $spooler->create_variable_set();
parameter->LetProperty( 'var', 'my_parameter', 'my_value' );
parameter->LetProperty( 'var', 'other_parameter', 'other_value' );
$spooler->job( 'job_a' )->start( parameters );</pre>
        </example>
    </method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="include_path" access="read">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>

        </title>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="name" access="read">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Name des Jobs
        </title>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="wake">
        <com/>
        <title>
            Veranlasst den Start einer Task
        </title>
    </method>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="state_text" access="write">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Freier Text für den Zustand des Jobs
        </title>
        
        <example programming_language="java">
            <pre>spooler_job.set_state_text( "Step C succeeded" );</pre>
        </example>
        
        <example programming_language="javascript">
            <pre>spooler_job.state_text = "Step C succeeded";</pre>
        </example>
        
        <example programming_language="perl">
            <pre>$spooler_job->LetProperty( 'state_text', 'Step C succeeded' );</pre>
        </example>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="title" access="read">
        <com>
            <com.result>
                <com.type type="BSTR"/>
            </com.result>
        </com>

        <title>
            Titel des Jobs
        </title>
        
        <example programming_language="java">
            <pre>spooler_log.info( "Job title=" + spooler_job.title() );</pre>
        </example>
        
        <example programming_language="javascript">
            <pre>spooler_log.info( "Job title=" + spooler_job.title );</pre>
        </example>
        
        <example programming_language="perl">
            <pre>$spooler_log->info( 'Job title=' . $spooler_job->title );</pre>
        </example>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="delay_after_error" access="write">
        <com>
            <com.parameter name="error_steps">
                <com.type type="int"/>
                <description>
                    Anzahl der aufeinanderfolgenden Jobfehler, ab der die Verzögerung gilt.
                </description>
            </com.parameter>

            <com.result name="seconds_or_hhmm_ss">
                <com.type type="VARIANT*">
                    <com.variant type="double"/>
                    <com.variant type="int"/>
                    <com.variant type="BSTR"/>
                </com.type>
            </com.result>
        </com>

        <java>
            <com.parameter name="error_steps">
                <com.type type="int"/>
            </com.parameter>

            <com.result name="seconds">
                <com.type type="double"/>
            </com.result>
        </java>


        <java>
            <java.parameter name="error_steps">
                <java.type type="int"/>
            </java.parameter>

            <java.result name="hhmm_ss">
                <com.type type="BSTR"/>
            </java.result>
        </java>

        <title>
            Verzögert erneuten Jobstart nach Fehler
        </title>

        <description>
            <p>
                Für verschiedene Anzahlen aufeinanderfolgender Fehler kann eine Verzögerung eingestellt werden.
                Der Job wird dann nicht gestoppt, sondern die angegebene Zeit verzögert und erneut gestartet.
            </p>
            <p>
                Der Aufruf kann für verschiedene Anzahlen wiederholt werden.
                Man wird jeweils eine längere Verzögerung angeben.
            </p>
            <p>
                Wenn Sie den Parameter <code>seconds_or_hhmm_ss</code> als String übergeben,
                können Sie auch <code>"STOP"</code> angeben.
                Der Job stoppt, wenn er die angegebene Anzahl aufeinanderfolgende Fehler erreicht hat.
            </p>
            <p>
                Eine gute Stelle für die Aufrufe ist <scheduler_method class="Job_impl" method="spooler_init"/>.
            </p>
        </description>

        <example programming_language="java">
            <pre>spooler_job.set_delay_after_error(  2,  10 );          // 10 Sekunden
spooler_job.set_delay_after_error(  5, "00:01" );      // Eine Minute
spooler_job.set_delay_after_error( 10, "24:00" );      // Ein Tag
spooler_job.set_delay_after_error( 20, "STOP" );</pre>

            <p>
                Nach einem Fehler wiederholt der Scheduler den Job sofort.<br/>
                Nach dem zweiten bis zum vierten Fehler verzögert der Scheduler den Job um 10 Sekunden,<br/>
                nach dem fünften bis zum neunten Fehler um eine Minute,
                nach dem zehnten bis zum neunzehnten um 24 Stunden, <br/>
                nach dem zwanzigsten aufeinanderfolgenden Fehler schließlich stoppt der Job.
            </p>
        </example>

        <example programming_language="javascript">
            <pre>spooler_job.delay_after_error(  2 ) = 10;           // 10 Sekunden
spooler_job.delay_after_error(  5 ) = "00:01";      // Eine Minute
spooler_job.delay_after_error( 10 ) = "24:00";      // Ein Tag
spooler_job.delay_after_error( 20 ) = "STOP";</pre>

            <p>
                Nach einem Fehler wiederholt der Scheduler den Job sofort.<br/>
                Nach dem zweiten bis zum vierten Fehler verzögert der Scheduler den Job um 10 Sekunden,<br/>
                nach dem fünften bis zum neunten Fehler um eine Minute,
                nach dem zehnten bis zum neunzehnten um 24 Stunden, <br/>
                nach dem zwanzigsten aufeinanderfolgenden Fehler schließlich stoppt der Job.
            </p>
        </example>

    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <property name="order_queue" access="read">
        <com>
            <com.result>
                <com.type class="Order_queue"/>
                <description>
                    <api.null/>, wenn der Job keine Auftragswarteschlange hat
                    (bei <scheduler_element name="job" attribute="order" value="no"/>).
                </description>
            </com.result>
        </com>

        <title>
            Auftragswarteschlange des Jobs oder <api.null/>.
        </title>
    </property>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <method name="delay_order_after_setback" access="write">
        <com>
            <com.parameter name="setback_count">
                <com.type type="int"/>
            </com.parameter>

            <com.result name="seconds_or_hhmm_ss">
                <com.type type="VARIANT*">
                    <com.variant type="double"/>
                    <com.variant type="int"/>
                    <com.variant type="BSTR"/>
                </com.type>
            </com.result>
        </com>

        <java>
            <java.parameter name="setback_count">
                <java.type type="int"/>
            </java.parameter>

            <java.result name="seconds">
                <java.type type="double"/>
            </java.result>
        </java>

        <title>
            Stellt Auftrag nach Fehler zurück
        </title>
    </method>


    <property name="max_order_setbacks" access="write">
        <com>
            <com.result>
                <com.type type="int"/>
            </com.result>
        </com>

        <title>
            Begrenzt die Anzahl der Rückstellungen eines Auftrags
        </title>
    </property>


    <method name="clear_delay_after_error">
        <com/>

        <title>
            Nimmt alle <code>delay_after_error</code> zurück
        </title>
    </method>


    <method name="remove">
        <com/>

        <title>
            Entfernt den Job
        </title>

        <description>
            <p>
                Der Job wird gestoppt, d.h. laufende Tasks werden beendet,
                keine neuen werden gestartet.
                Sobald keine Task mehr läuft, wird der Job entfernt.
            </p>
            <p>
                Tasks in der Warteschlange werden ignoriert.
            </p>
            <p>
                Wenn keine Task des Jobs läuft, entfernt remove() den Job sofort.
            </p>
            <p>
                Auftragsjobs (<scheduler_element name="job" attribute="order" value="yes"/>) können nicht entfernt werden.
            </p>
            <p>
                Siehe <scheduler_element name="modify_job" attribute="cmd" value="remove"/>.
            </p>
        </description>
    </method>


    <description>
        <p>
            Eine Task kann wartend in der Task-Warteschlange des Jobs sein oder laufen.
        </p>
    </description>


</api.class>
