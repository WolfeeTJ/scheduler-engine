<?xml version="1.0"?>
<!-- $Id$ -->

<?xml-stylesheet href="api_default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Job_chain"
    object_name = "job_chain"
    base_dir    = "../"
    author      = "$Author$"
    date        = "$Date$"
>


<property name="name">
    <com>
        <com.result>
            <com.type type="BSTR"/>
        </com.result>
    </com>

    <title>
        Name der Jobkette
    </title>

    <example programming_language="java">
        <pre>Job_chain job_chain = spooler.create_job_chain();
job_chain.set_name( "Jobkette" );</pre>
    </example>

    <example programming_language="javascript">
        <pre>var job_chain = spooler.create_job_chain();
job_chain.name = "Jobkette";</pre>
    </example>
</property>



<property name="order_count" access="read">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Anzahl der Aufträge in der Jobkette
    </title>
</property>



<method name="add_job">
    <com>
        <com.parameter name="job_name">
            <com.type type="BSTR"/>
        </com.parameter>

        <com.parameter name="input_state">
            <com.type type="VARIANT*"/>
        </com.parameter>

        <com.parameter name="output_state">
            <com.type type="VARIANT*"/>
        </com.parameter>

        <com.parameter name="error_state">
            <com.type type="VARIANT*"/>
        </com.parameter>
    </com>
    
    <title>
        Erweitert die Jobkette um einen Job
    </title>
</method>


<method name="add_end_state">
    <com>
        <com.parameter name="state">
            <com.type type="VARIANT*"/>
        </com.parameter>
    </com>

    <title>
        Fügt der Jobkette einen Endknoten hinzu
    </title>

    <description>
        <p>
            Diesem Knoten ist kein Job zugeordnet.
            Ein Auftrag, der einen Endknoten erreicht, hat die Jobkette durchlaufen und wird vom Scheduler aus ihr entfernt.
        </p>
    </description>
</method>


<method name="add_order">
    <com>
        <com.parameter name="order_or_payload">
            <com.type type="BSTR"/>
        </com.parameter>

        <com.result>
            <com.type class="Order"/>
        </com.result>
    </com>

    <title>
        Gibt einen Auftrag in die Jobkette
    </title>

    <description>
        <p>
            Wenn der Auftrag in einer anderen Jobkette enthalten ist, entfernt der Scheduler ihn daraus.
        </p>
        <p>
            Der Auftrag wird in die Auftragswarteschlange des Jobs, der seinem Zustand entspricht,
            gemäß seiner Priorität eingeordnet.
        </p>
        <p>
            Die Jobkette mit muss mit
            <scheduler_method class="Spooler" method="add_job_chain"/>
            dem Scheduler übergeben worden sein.
        </p>
        <p>
            Wenn die Jobkette bereits einen Auftrag mit gleicher <scheduler_method class="Order" property="id"/>
            enthält,
            wird eine Exception mit Fehlercode <code>SCHEDULER-186</code> geliefert.
        </p>
    </description>
</method>


<property name="node" access="read">
    <com>
        <com.parameter name="state">
            <com.type type="VARIANT*"/>
        </com.parameter>

        <com.result>
            <com.type class="Job_chain_node"/>
        </com.result>
    </com>

    <title>
        Der Jobkettenknoten zum angegebenen Zustand
    </title>
</property>


<property name="order_queue" access="read">
    <com>
        <com.parameter name="state">
            <com.type type="VARIANT*"/>
        </com.parameter>

        <com.result>
            <com.type class="Order_queue"/>
        </com.result>
    </com>

    <title>
        <code>= node(state).job().order_queue()</code>
    </title>

    <description>
        Liefert die Auftragswarteschlange des Jobs, der dem angegebenen Zustand zugeordnet ist.
    </description>
</property>


<method name="add_or_replace_order">
    <com>
        <com.parameter>
            <com.type class="Order"/>
        </com.parameter>
    </com>

    <title>
        Gibt einen Auftrag in die Jobkette und ersetzt ggfs. einen mit gleicher Kennung
    </title>

    <description>
        <p>
            Hat die Jobkette bereits einen Auftrag mit gleicher Kennung, dann wird dieser ersetzt.
            Genauer: Er wird aus der Jobkette entfernt, und der neue Auftrag wird hinzugefügt.
        </p>
        <p>
            Solange eine Task den vorhandenen Auftrag ausführt,
            sind im Scheduler zwei Aufträge mit gleicher Kennung vorhanden.
            Allerdings ist der vorhandene Auftrag aus der Jobkette und aus der Datenbank bereits entfernt.
            Er ist nur noch für die Task nutzbar und verschwindet nach der Ausführung.
        </p>
        <p>
            In diesem Fall wartet der Scheduler die Ausführung des neuen Auftrags ab,
            bis die Ausführung des alten Auftrags beendet ist.
        </p>
        <p>
            Siehe <scheduler_method class="Job_chain" method="add_order"/> und
            <scheduler_method class="Order" method="remove_from_job_chain"/>
        </p>
    </description>
</method>



<title>
    Jobkette zur Auftragsverarbeitung
</title>

<description>
    <p>
        Eine Jobkette (Job_chain) ist eine Kette von Jobs (Jobkettenknoten oder Stellen).
        Diese Kette wird von Aufträgen (<scheduler_method class="Order"/>) durchlaufen.
    </p>
    <p>
        Jeder Stelle in der Jobkette ist ein Zustand und ein Job zugeordnet.
        Wenn ein Auftrag der Jobkette hinzugefügt wird, setzt der Scheduler ihn an die seinem Zustand entsprechende Stelle.
        Der dieser Stelle zugeordnete Job führt den Auftrag aus.
    </p>
    <p>
        Jede Stelle hat außerdem einen Folgezustand und einen Fehlerzustand.
        Nach der Verarbeitung eines Auftrags durch einen Jobschritt ändert der Scheduler den Zustand des Auftrags.
        Wenn der Jobschritt (spooler_process) true liefert, stellt der Scheduler den Folgezustand,
        sonst den Fehlerzustand ein.
        Der Auftrag rutscht damit an eine andere Stelle der Jobkette, die dem neuen Zustand zugeordnet ist.
    </p>
    <p>
        Sie erzeugen eine Jobkette mit <scheduler_method class="Spooler" method="create_job_chain"/>,
        füllen sie mit <scheduler_method class="Job_chain" method="add_job"/>
        und <scheduler_method class="Job_chain" method="add_end_state"/>
        und machen sie schließlich mit <scheduler_method class="Spooler" method="add_job_chain"/>
        bekannt.
    </p>
    <p>
        Jeder Knoten ist eindeutig einem Zustand zugeordnet.
        Für jeden Zustand muss genau einmal <scheduler_method class="Job_chain" method="add_job"/>
        oder <scheduler_method class="Job_chain" method="add_end_state"/> aufgerufen werden.
    </p>
</description>


<example programming_language="java">
    <pre>Job_chain my_job_chain = spooler.create_job_chain();
my_job_chain.set_name( "Jobkette" );
my_job_chain.add_job( "job_100", 100,  200, 999 );
my_job_chain.add_job( "job_200", 200, 1000, 999 );
my_job_chain.add_end_state(  999 );
my_job_chain.add_end_state( 1000 );
spooler.add_job_chain( my_job_chain );</pre>
</example>

<example programming_language="javascript">
    <pre>var my_job_chain = spooler.create_job_chain();
my_job_chain.name = "Jobkette";
my_job_chain.add_job( "job_100", 100,  200, 999 );
my_job_chain.add_job( "job_200", 200, 1000, 999 );
my_job_chain.add_end_state(  999 );
my_job_chain.add_end_state( 1000 );
spooler.add_job_chain( my_job_chain );</pre>
</example>

</api.class>
