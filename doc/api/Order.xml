<?xml version="1.0"?>
<!-- $Id$ -->

<?xml-stylesheet href="api-default_language.xsl" type="text/xsl"?>


<api.class
    name        = "Order"
    object_name = "order"
    base_dir    = "../"
    author      = "$Author$"
    date        = "$Date$"
>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="id">
    <com>
        <com.result>
            <com.type type="VARIANT*"/>
        </com.result>
    </com>

    <title>
        Kennung des Auftrags
    </title>

    <description>
        <p>
            Jeder Auftrag hat eine
            (innerhalb der Jobkette oder der Auftragswarteschlange des Jobs eindeutige)
            Kennung.
            Diese Kennung sollten den zu verarbeitenden Daten entsprechen.
            Überlicherweise wird der Schlüssel eines Datenbanksatzes verwendet.
        </p>
        <p>
            Wenn Sie die <code>id</code> nicht setzten, vergibt
            <scheduler_method class="Job_chain" method="add_order"/> eine Kennung.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="title">
    <com>
        <com.result>
            <com.type type="BSTR"/>
        </com.result>
    </com>

    <title>
        Der Titel ist ein Klartext, der den Auftrag bezeichnet
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="priority">
    <com>
        <com.result>
            <com.type type="int"/>
        </com.result>
    </com>

    <title>
        Aufträge mit höherer Priorität werden zuerst verarbeitet
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="job_chain" access="read">
    <com>
        <com.result>
            <com.type class="Job_chain"/>
        </com.result>

        <description>
            <api.null/>, wenn der Auftrag nicht in einer Jobkette ist.
        </description>
    </com>

    <title>
        Jobkette, in der der Auftrag enthalten ist
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="job_chain_node" access="read">
    <com>
        <com.result>
            <com.type class="Job_chain_node"/>
        </com.result>

        <description>
            <api.null/>, wenn der Auftrag nicht in einer Jobkette ist.
        </description>
    </com>

    <title>
        Jobkettenknoten, der dem Zustand des Auftrags entspricht
    </title>

</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="job">
    <com access="write">
        <com.result name="job_or_name">
            <com.type type="VARIANT*"/>
        </com.result>
    </com>

    <!--
    <com access="putref">
        <com.result>
            <com.type type="Job"/>
        </com.result>
    </com>
    -->

    <com access="read">
        <com.result>
            <com.type type="Job"/>

            <description>
                <api.null/>, wenn der Auftrag nicht in einer Jobkette oder der Zustand ein Endzustand ist.
            </description>
        </com.result>
    </com>

    <title>
        Job, der dem Zustand des Auftrags entspricht.
    </title>

    <description>
        <p>
            Sie können den Job auch setzen.
            Dann stellt der Scheduler den Zustand des Auftrags auf den Zustand des Jobs in der Jobkette ein.
            In der Regel wird man aber <scheduler_method class="Order" property="state"/> verwenden.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="state">
    <com>
        <com.result>
            <com.type type="VARIANT*"/>
        </com.result>
    </com>

    <title>
        Zustand des Auftrags
    </title>

    <description>
        <p>
            Wenn der Auftrag in einer Jobkette ist,
            muss der Zustand in der Jobkette vorhanden sein.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="state_text">
    <com>
        <com.result>
            <com.type type="BSTR"/>
        </com.result>
    </com>
        
    <title>
        Freier Text für den Zustand des Auftrags
    </title>
    
    <description>
        <p>
            Der Text wird auf der HTML-Oberfläche gezeigt.
        </p>
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="payload">
    <com>
        <com.result>
            <com.type type="VARIANT*"/>
        </com.result>
    </com>

    <!--
    <com access="putref">
        <com.result>
            <com.type type="IUnknown*"/>
        </com.result>
    </com>
    -->

    <title>
        Nutzlast, also Parameter des Auftrags.
    </title>

    <description>
        Neben der Auftragskennung <scheduler_method class="Order" property="id"/>,
        die den Auftrag identifiziert,
        können Sie hier zusätzliche Angaben machen.
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="payload_is_type">
    <com>
        <com.parameter name="type_name">
            <com.type type="BSTR"/>

            <description>
                <code>"Spooler.Variable_set"</code>,
                <code>"Hostware.Dyn_obj"</code> oder
                <code>"Hostware.Record"</code>.
            </description>
        </com.parameter>

        <com.result>
            <com.type type="bool"/>
        </com.result>
    </com>

    <title>
        Prüft den COM-Typ der Nutzlast
    </title>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="setback">
    <com/>
    
    <title>
        Stellt den Auftrag eine Zeit lang zurück
    </title>
    
    <description>
        <p>
            Siehe <scheduler_method class="Job" property="delay_order_after_setback"/>
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="run_time" access="read">
    <com>
        <com.result>
            <com.type class="Run_time"/>
        </com.result>
    </com>

    <title>
        <code>&lt;run_time></code> zur periodischen Wiederholung des Auftrags
    </title>

    <description>
        Siehe <scheduler_element name="run_time"/>.
    </description>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<method name="remove_from_job_chain">
    <com/>

    <title>
    </title>

    <description>
        <p>
            Wenn der Auftrag gerade von einer Task ausgeführt wird,
            liefert die Eigenschaft <scheduler_method class="Order" property="job_chain"/>
            weiterhin die Jobkette,
            aus der der Auftrag gerade entfernt wird.
            Erst wenn die Ausführung beendet ist, liefert die Eigenschaft <api.null/>
            (außer der Auftrag ist wieder in eine Jobkette eingetragen worden).
            Damit bleibt die Eigenschaft job_chain während der Ausführung durch die Task stabil.
        </p>
    </description>
</method>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<property name="string_next_start_time" access="read">
    <com>
        <com.result>
            <com.type type="BSTR"/>

            <description>
                <code>"yyyy-mm-dd HH:MM:SS.MMM"</code> oder
                <code>"now"</code> oder
                <code>"never"</code>.
            </description>
        </com.result>
    </com>
    
    <title>
        Nächste Startzeit des Auftrags bei Verwendung von <code>&lt;run_time></code>
    </title>
</property>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<title>
    Auftrag
</title>


<description>
    <p>
        Siehe <a href="../order.xml">Aufträge</a>,
        <scheduler_method class="Spooler" method="create_order"/>,
        <scheduler_method class="Job_chain" method="add_order"/>,
        <scheduler_method class="Task" property="order"/>.
    </p>
</description>

<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<example programming_language="javascript" title="Auftrag mit einfacher Nutzlast" >
    <pre>// Create order:
{    
    var order = spooler.create_order();
    order.id         = 1234;    
    order.title      = "This is my order";
    order.state_text = "This is my state text";
    order.payload    = "This is my payload";
    spooler.job_chain( "my_job_chain" ).add_order( order );
}
...

// Process order:
function spooler_process()
{
    var order = spooler_task.order;
    spooler_log.info( "order.payload=" + order.payload );
    return true;
}</pre>    
    </example>

<example programming_language="javascript" title="Erzeugen eines Auftrags mit Variable_set als Nutzlast">
    <pre>// Create order:
{
    var variable_set = spooler.create_variable_set();
    variable_set.value( "param_one" ) = "11111";
    variable_set.value( "param_two" ) = "22222";

    var order = spooler.create_order();
    order.id      = 1234;    
    order.payload = variable_set;
    spooler.job_chain( "my_job_chain" ).add_order( order );
}
...

// Process order:
function spooler_process()
{
    var order = spooler_task.order;
    var variable_set = order.payload;
    spooler_log.info( "param_one=" + variable_set.value( "param_one" ) );
    spooler_log.info( "param_two=" + variable_set.value( "param_two" ) );
    return true;
}</pre>    

    </example>


</api.class>
