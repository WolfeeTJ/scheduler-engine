<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="scheduler.xsl" type="text/xsl"?>

<!--$Id$-->

<description 
    title    = "Was ist ein Job?" 
    base_dir = ""
    author   = "$Author$"
    date     = "$Date$"
>
    <scheduler_keyword keyword="Job"/>
    
    Ein Job wird definiert in der XML-Konfiguration mit <b><scheduler_element name="job"/></b>.
    Hier werden der Programmcode, die Laufzeit und andere Dinge angegeben.
    

    <h2>Zustand eines Jobs</h2>

    <p>
        Ein Job ist in einem der folgenden Zustände.
    </p>
    
    <table cellspacing="0" cellpadding="0">
        <col valign="baseline" style="padding-top: 1ex"/>
        <col valign="baseline" style="padding-top: 1ex; padding-left: 2ex"/>
        
        <tr>
            <td><code>pending</code></td>
            <td>
                Keine Task läuft. Das ist der anfängliche Zustand.
            </td>
        </tr>
        <tr>
            <td><code>running</code></td>
            <td>
                Wenigstens eine Task läuft.
            </td>
        </tr>
        <tr>
            <td><code>stopping</code></td>
            <td>
                Der Job stoppt. Der Scheduler startet keine weitere Task und die laufenden Tasks werden beendet.
                Sobald alle Tasks des Jobs beendet sind, wechselt der Job in den Zustand <code>stopped</code>.
                <br/>
                Siehe das Kommando <scheduler_element name="modify_job" attribute="cmd" value="stop"/>.
            </td>
        </tr>
        <tr>
            <td><code>stopped</code></td>
            <td>
                Keine Task läuft und der Scheduler startet keine weitere Task.
                <br/>
                Siehe das Kommando <scheduler_element name="modify_job" attribute="cmd" value="stop"/>.
            </td>
        </tr>
        <tr>
            <td><code>read_error</code></td>
            <td>
                Das Kommando <code>reread</code> hat zu einem Fehler geführt,
                und der Job ist unbrauchbar, weil der Programmcode nicht gelesen werden konnte.
                <br/>
                Siehe das Kommando <scheduler_element name="modify_job" attribute="cmd" value="reread"/>.
            </td>
        </tr>
        <tr>
            <td><code>error</code></td>
            <td>
                Wenn eine Task mit Fehler geendet hat, startet der Scheduler keine weitere Task.
                <!--Der Aufruf <scheduler_method class="Job" property="error"/> liefert den Fehler.-->
            </td>
        </tr>
    </table>
    
    
    <h2>Zustand des Jobs ändern</h2>
    <p>
        Mit dem Kommando <scheduler_element name="modify_job"/> können Sie den Zustand des Jobs ändern.
    </p>
    
    
    <h2>Eine Task starten</h2>
    <p>
        In der Konfiguration können Sie mit <scheduler_element name="run_time"/> einstellen, dass eine Task einmal oder periodisch gestartet werden soll.
    </p>
    <p>
        Das Kommando <scheduler_element name="start_job"/> startet eine Task,
        ebenso <scheduler_method class="Job" method="start"/>.
    </p>


    <p>&#160;</p>
    
    <p>
        Eine Task wird automatisch gestartet, wenn noch keine Task läuft und eine der folgenden Bedingungen gilt.
    </p>
    <ul>
        <li>
            Zu Beginn einer <scheduler_element name="period"/>, wenn in ihr <code>repeat=</code> oder <code>single_start=</code> angegeben ist.
        </li>
        <li>
            Wenn ein vorangehender Lauf 
            <scheduler_method class="Task" property="repeat" access="write" java_signature="double"/>
            gesetzt hat und die Zeit erreicht ist.
        </li>
        <li>
            Wenn ein vorangehender Lauf fehlerhaft war und 
            <scheduler_method class="Job" property="delay_after_error" access="write" java_signature="int, double"/>
            abgelaufen ist.
        </li>
        <li>
            Wenn das mit
            <scheduler_element name="period" attribute="repeat"/> 
            angegebene Intervall nach dem Ende der zuletzt gelaufenen Task abgelaufen ist.
        </li>
        <li>
            Wenn die <a href="directory_watch.xml">Verzeichnisüberwachung</a>
            aktiv ist und das überwachte Verzeichnis geändert worden ist.
        </li>
    </ul>
    
    <p>
        Außerdem startet eine Task
    </p>
    <ul>
        <li>
            wenn ein Auftrag für den Job vorliegt, und noch nicht soviele Tasks laufen, wie mit
            <scheduler_element name="job" attribute="tasks"/> zugelassen.
        </li>
    </ul>

    <p>
        Eine Task läuft aber nur an, wenn sie eine Startzeit (<code>at</code>) hat oder
    </p>
    <ul>
        <li>
            der Job nicht gestoppt ist, 
        </li>
        <li>
            es eine Periode für die aktuelle Zeit gibt, 
        </li>
        <li>
            und die Verzögerung nach Fehler 
            (<scheduler_method class="Job" property="delay_after_error" access="write" java_signature="int, double"/>) 
            nicht wirkt. 
        </li>
    </ul>

    <!--
    <h2>Den Job zeigen</h2>
    <p>
        Das Kommando <scheduler_element name="show_job"/> zeigt den Zustand des Jobs, die wartenden und laufenden Tasks und die Aufträge.
    </p>
    -->


    <h2>Verzeichnisüberwachung</h2>
    <p>
        Der Scheduler kann einen Job starten, wenn sich in einem Dateiverzeichnis etwas tut.
        Näheres im Kapitel <a href="directory_watch.xml">Verzeichnisüberwachung</a>.
    </p>
    
    
    
    <h2>Implementierung</h2>
    
    <p>
        Ein Job lässt sich auf verschiedene Weise implementieren.
    </p>
    
    <p><b>Java</b></p>
    <div class="indent">
        <p>
            Ein Job in Java ist eine Implementierung der abstrakten Oberklasse
            <a href="javadoc/sos/spooler/Job_impl.html">sos.spooler.Job_impl</a>.
        </p>
        <p>
            Die <a href="javadoc/index.html">Java-Schnittstelle</a> stellt weitere Klassen bereit.
            Sie gilt entsprechend für die COM- und Perl-Schnittstellen, 
            wenn Sie Ihren Job in einer anderen Sprache implementieren.
        </p>
        <p>
            Den Pfad der implementierten Klasse geben Sie in
            <scheduler_ini_entry file="sos.ini" section="java" entry="class_path"/>
            an.
        </p>
    </div>
    
    <p><b><a href="script_language_javascript.xml">JavaScript und JScript</a></b></p>
    <div class="indent">
        <p>
        </p>
    </div>
                
    <p><b>VBScript</b></p>
    <div class="indent">
        <p>
        </p>
    </div>
                
    <p><b>Perl</b></p>
    <div class="indent">
        <p>
        </p>
    </div>
                
    <p><b>COM</b></p>
    <div class="indent">
        <p>
            Sie können auch (unter Windows) einen Job in jeder beliebigen Programmiersprache
            als COM-Server implementieren. 
            Weiteres siehe <a href="job_com.xml">hier</a>.
        </p>
    </div>
                
</description>
