<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="scheduler.xsl" type="text/xsl"?>

<!--$Id$-->

<description 
    title               = "Datenbank" 
    base_dir            = ""
    author              = "$Author$"
    date                = "$Date$"
>

<scheduler_keyword keyword="Datenbank"/>
<scheduler_keyword keyword="Historie"/>

<p>
    Der Scheduler kann mit einer Datenbank betrieben werden. Das hat folgende Zwecke:
</p>

<dl>
    <dt>Task-Warteschlange</dt>
    <dd>
        Der Scheduler speichert die in den Warteschlangen eingereihten Tasks in einer Tabelle
        unter seiner Scheduler-Id  (Option <scheduler_option name="id"/>).
        Wenn der Scheduler erneut startet, liest er die Warteschlange aus der Datenbank.
    </dd>
    
    <dt>Aufträge</dt>
    <dd>
        Der Scheduler speichert jeden Auftrag in einer Tabelle 
        unter seiner Scheduler-Id  (Option <scheduler_option name="id"/>).
        Wenn der Scheduler erneut startet, liest er die Aufträge aus der Datenbank.
    </dd>
    
    <dt>Task-Historie</dt>
    <dd>
        Für jede Task schreibt der Scheduler einen Satz, 
        außerdem bei Start und Ende des Schedulers.
    </dd>
    
    <dt>Auftragshistorie</dt>
    <dd>
        Der Scheduler hält den Lauf der Aufträge durch die Jobketten in der Auftragshistorie fest.
    </dd>
</dl>

<p>
    <a href="history.xml">Hier lesen Sie weiteres zur Historie</a>.
</p>



<h2>Einstellungen</h2>

<dl>
    <dt>Datenbank und Fehlerbehandlung</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="need_db"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="max_db_errors"/><br/>
    </dd>
        
    <!--scheduler_keyword keyword="Tabelle (Datenbank)"/-->
    <dt>Die Namen der Tabellen</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_variables_table"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_tasks_table"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_orders_table"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_history_table"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="db_order_history_table"/><br/>
    </dd>
    
    <dt>Ob eine Historie geschrieben werden soll</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="history"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="order_history"/><br/>
        <scheduler_ini_entry file="factory.ini" section="job" entry="history"/><br/>
    </dd>
    
    <scheduler_keyword keyword="Protokoll"/>
    <dt>Ob die Protokolle in der Historie aufgenommen werden sollen</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="history_with_log"/><br/>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="order_history_with_log"/><br/>
        <scheduler_ini_entry file="factory.ini" section="job" entry="history_with_log"/><br/>
    </dd>
    
    <dt>Der Task-Historie können Sie eigene Spalten hinzufügen</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="history_columns"/><br/>
        <scheduler_ini_entry file="factory.ini" section="job" entry="history_columns"/><br/>
        <scheduler_method class="Task" method="set_history_field" java_signature="java.lang.String, java.lang.String"/>
    </dd>
    
    <dt>Die Bedingungen für einen Eintrag in die Task-Historie</dt>
    <dd>
        <scheduler_ini_entry file="factory.ini" section="spooler" entry="history_on_process"/><br/>
    </dd>
</dl>


<h2>Programmschnittstelle</h2>
<dl>
    <dt>Das Objekt spooler stellt die Tabellennamen bereit</dt>
    <dd>
        <scheduler_method class="Spooler" method="db_variables_table_name"/><br/>
        <scheduler_method class="Spooler" method="db_tasks_table_name"/><br/>
        <scheduler_method class="Spooler" method="db_orders_table_name"/><br/>
        <scheduler_method class="Spooler" method="db_history_table_name"/><br/>
        <scheduler_method class="Spooler" method="db_order_history_table_name"/><br/>
    </dd>
    
    <dt>Eigene Felder der Historie beschreiben (<scheduler_ini_entry file="factory.ini" section="job" entry="history_columns"/>)</dt>
    <dd>
        <scheduler_method class="Task" method="set_history_field" java_signature="java.lang.String, java.lang.String"/>
    </dd>
</dl>



<h2>Kommandos</h2>
<dl>
    <dt>Historie zeigen</dt>
    <dd>
        Kommando <scheduler_element name="show_history"/><br/>
        Kommando <scheduler_element name="show_task"/><br/>
        Kommando <scheduler_element name="show_order"/><br/>
    </dd>
</dl>


<h2>Fehlertoleranz</h2>
<p>
    Der Scheduler toleriert Datenbankfehler. 
    Damit kann er bei tagelangem Betrieb mit einer vorübergehend heruntergefahrenen Datenbank umgeben.
    Näheres hierzu finden sie hier: <scheduler_ini_entry file="factory.ini" section="spooler" entry="need_db"/>.
</p>
<p>
    Wenn eingestellt ist, dass der Scheduler nach Verbindungsverlust auf eine erneute Verbindung zur Datenbank warten soll,
    hält der Scheduler solange an.
    Nur Kommandos über TCP oder HTTP verarbeitet er.
    Er kann nicht beendet werden, nur abgebrochen werden (s. <a href="termination.xml">Beendigung</a>).
</p>


</description>
