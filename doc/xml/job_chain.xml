<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>
<!--$Id$-->

<xml_element name     = "job_chain"
             title    = "Jobkette"
             category = "Konfiguration"
             base_dir = "../"
             parent_page = "../konfiguration.xml"
             author   = "$Author$"
             date     = "$Date$">

    <scheduler_keyword keyword="Jobkette"/>

    <xml_parent_elements>
        <xml_parent_element name="job_chains"/>
    </xml_parent_elements>

    <xml_attributes>
        <xml_attribute name="name" type="name">
            <description>
                <p>
                    Name der Jobkette. 
                    Jede Jobkette kann nur einmal definiert werden.
                </p>
            </description>
        </xml_attribute>


        <xml_attribute name="visible" type="yes|no" initial="yes">
            <description>
                <p>
                    <code>visible="no"</code> lässt die Jobkette im Ergebnis von
                    <scheduler_element name="show_job_chains"/> und
                    <scheduler_element name="show_state"/> unsichtbar.
                </p>
                <p>
                    Der Scheduler setzt die Jobkette sichtbar, sobald ein Auftrag eingereiht wird.
                </p>
            </description>
        </xml_attribute>

        
        <xml_attribute name="orders_recoverable" type="yes|no" initial="yes">
            <description>
                <p>
                    <code>orders_recoverable="yes"</code>
                </p>
                <div class="indent">
                    <p style="margin-top: 0pt;">
                        Der Scheduler hält die Aufträge in der Datenbank.
                        Sobald ein Auftrag in die Auftragswarteschlange eines Jobs eingereiht wird,
                        speichert der Scheduler ihn auch in der Datenbank.
                        Wenn der Auftrag die Jobkette durchlaufen hat, wird er aus der Datenbank entfernt.
                    </p>
                    <p>
                        Beim Einrichten der Jobkette (beim Start des Schedulers) lädt der Scheduler die Aufträge aus der Datenbank.
                        Siehe <scheduler_method class="Spooler" method="add_job_chain"/>.
                    </p>
                    <p>
                        Wirkungslos, wenn der Scheduler ohne Datenbank arbeitet, siehe <scheduler_ini_entry file="factory.ini" section="spooler" entry="db"/>.
                    </p>
                </div>
                <p>
                    <code>orders_recoverable="no"</code>
                </p>
                <p class="indent" style="margin-top: 0pt;">
                    Der Scheduler hält nicht die Aufträge in der Datenbank und lädt sie auch nicht daraus.
                </p>
                <p>
                    Siehe <a href="../datenbank.xml">Datenbank</a>.
                </p>
            </description>
        </xml_attribute>
    </xml_attributes>


    <xml_child_elements>
        <xml_child_element name="job_chain_node" multiple="yes"/>
    </xml_child_elements>


    <description>
        <p>
            Führt eine neue Jobkette (siehe Klasse <scheduler_method class="Job_chain"/>) ein. 
        </p>
        <p>
            Siehe <a href="../order.xml">Aufträge</a>,
            <scheduler_method class="Job_chain"/>,
            <scheduler_method class="Spooler" method="create_job_chain"/> 
            und <scheduler_method class="Spooler" method="add_job_chain"/> 
        </p>
    </description>

    <example>
<pre>&lt;job_chains>
    &lt;job_chain name="Kette_A">
        &lt;job_chain_node state=  "1" job="job_a" next_state=  "2" error_state="999" />            
        &lt;job_chain_node state=  "2" job="job_b" next_state="100" error_state="999" />            
        &lt;job_chain_node state="100" />
        &lt;job_chain_node state="999" />
    &lt;/job_chain>
&lt;/job_chains></pre>

Das ist dasselbe wie folgendes Scheduler-Skript:

<pre>&lt;script language="javascript">&lt;![CDATA[
    var job_chain = spooler.create_job_chain();
        job_chain.name = "Kette_A";
        job_chain.add_job( "job_a", 1,   2, 999 );
        job_chain.add_job( "job_b", 2, 100, 999 );
        job_chain.add_end_state( 100 );
        job_chain.add_end_state( 999 );
    spooler.add_job_chain( job_chain );
]]&gt;&lt;/script></pre>
    </example>

    <behavior_with_xml_element element="base" allowed="no">
        <description>
            <code>&lt;job_chain name="</code>Name<code>"></code> mit verschiedenen Namen können hinzugefügt werden.
        </description>
    </behavior_with_xml_element>
</xml_element>
