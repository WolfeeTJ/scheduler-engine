<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet href="../scheduler.xsl" type="text/xsl"?>
<!--$Id$-->

<xml_element name     = "process"
             title    = "Externes Programm (alternativ zu &lt;script&gt;)"
             category = "Konfiguration"
             base_dir = "../"
             parent_page = "../konfiguration.xml"
             author   = "$Author$"
             date     = "$Date$">

    <xml_parent_elements>
        <xml_parent_element name="job">
        </xml_parent_element>
    </xml_parent_elements>

    <xml_attributes>
        <xml_attribute name="file" type="filename">
            <description>
                <p>
                    Name der Datei, die das Programm oder das Skript enthält,
                    mit dem der Prozess gestartet werden soll.
                    Die Datei muss vom Betriebssystem ausführbar sein.
                </p>
            </description>
        </xml_attribute>

        <xml_attribute name="param" type="text" subst_env="yes">
            <description>
                <p>
                    Gibt den Parameterstring an, der dem Prozess übergeben wird.
                    Außer den Umgebungsvariablen werden können auch die Task-Parameter mit
                    <code>$</code><i>name</i> oder 
                    <code>${</code><i>name</i><code>}</code>
                    abgerufen werden.
                </p>
                <p>
                    Die in <scheduler_element name="environment"/> aufgeführten Variablen
                    haben keinen Einfluss auf die Ersetzung.
                </p>
            </description>
            <example>
                <pre><![CDATA[<process file="/tmp/test.cmd" param="EINS=$EINS ZWEI=$ZWEI HOME=$HOME LOG=$LOG PATH=$PATH">
    <environment>
        <variable name="PATH" value="$PATH;/extra"/>   <!-- not used for param="" -->
    </environment>
</process>]]></pre>
                <pre>var params = spooler.create_variable_set();
params.value( "EINS" ) = "1";
params.value( "ZWEI" ) = "2";
spooler.job( "process" ).start( params );
</pre>
            </example>
        </xml_attribute>


        <xml_attribute name="log_file" type="dateiname">
            <description>
                <p>
                    Der Scheduler übernimmt nach Prozessende den Inhalt dieser Datei in sein Protokoll.
                </p>
            </description>
        </xml_attribute>


        <xml_attribute name="ignore_error" type="yes|no" initial="no">
            <description>
                <p>
                    Bei <code>ignore_error="no"</code> (Voreinstellung) führt ein Exit code ≠ 0 zu einem Jobfehler.
                    Der Job wird gestoppt.
                </p>
                <p>
                    Bei <code>ignore_error="yes"</code> führt ein Exit code ≠ 0 nicht zu einem Jobfehler.
                </p>
            </description>
        </xml_attribute>


        <xml_attribute name="ignore_signal" type="yes|no" initial="no">
            <description>
                <p>
                    Wirkt nur unter Unix.
                    (Unter Windows liefert ein abgebrochener Prozess einen Exit code, der von <code>ignore_error=""</code> berücksichtigt wird.)
                </p>
                <p>
                    Bei <code>ignore_signal="no"</code> (Voreinstellung) führt ein Signal
                    (d.h. ein Abbruch des Prozesses, z.B. durch <code>kill</code>)
                    zu einem Jobfehler.
                    Der Job wird gestoppt.
                </p>
                <p>
                    Bei <code>ignore_signal="yes"</code> führt ein Signal nicht zu einem Jobfehler.
                </p>
                <p>
                    <code>ignore_signal="yes"</code> hat dieselbe Wirkung wie 
                    <scheduler_element name="job" attribute="ignore_signals" value="all"/>.
                </p>
            </description>
        </xml_attribute>
    </xml_attributes>


    <xml_child_elements>
        <xml_child_element name="environment">
            <description>
                <p>
                    Die hier aufgeführten Umgebungsvariablen werden zusammen mit den Umgebungsvariablen des Scheduler-Prozesses
                    dem neuen Prozess übergeben.
                    Erste überschreiben letztere gleichen Namens.
                </p>
            </description>
        </xml_child_element>
    </xml_child_elements>


    <description>
        <p>
            Beim Start des Jobs, also zu Beginn einer Task, wird ein Prozess eingerichtet.
            Der Spooler überwacht den Prozess und beendet die Task nachdem der Prozess sich beendet hat.
        </p>
        
        <h3>Exit-Code</h3>
        <ul>
            <li>
                Ein Exit-Code verschieden von 0 wird als Fehler (<scheduler_message code="SCHEDULER-280"/>) interpretiert.
            </li>
            <li>
                Unter Unix setzt der Scheduler den Exit-Codes eines mit Signal abgebrochenen Prozesses auf den negativen Wert des Signals.
            </li>
            <li>
                Der Exit-Code wird in <scheduler_method class="Task" property="exit_code"/> bereitgestellt
                und entscheidet über die anschließend auszuführenden Kommandos.
                Siehe hierzu <code>&lt;job></code><scheduler_element name="commands" attribute="on_exit_code"/>.
                <!--Der Exit code ist das Ergebnis der Task und steht in <code>task.result</code> bereit.-->
            </li>
        </ul>

        
        <h3>Umgebungsvariablen</h3>
        <scheduler_keyword keyword="Umgebungsvariablen"/>

        <p>
            Der Scheduler übergibt eine Umgebungsvariable:
        </p>
        
        <dl>
            <dt>
                <scheduler_keyword keyword="SCHEDULER_TASK_TRIGGER_FILES"/>
                <code>SCHEDULER_TASK_TRIGGER_FILES</code>
            </dt>
            <dd>
                Dasselbe wie <scheduler_method class="Task" object="spooler_task" property="trigger_files"/>.
            </dd>
        </dl>
        
    </description>

    <messages>
        <message level="info" code="SCHEDULER-987"/>
    </messages>

    <behavior_with_xml_element element="base" allowed="no"/>
</xml_element>
