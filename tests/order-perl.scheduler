<?xml version="1.0"?>
<spooler
    xmlns:xsi                     = "http://www.w3.org/2001/XMLSchema-instance" 
    xsi:noNamespaceSchemaLocation = "s:/prod/scheduler/scheduler.xsd"
>
    <config>

        <base file="base.scheduler"/>
        

        <jobs>
            <job name="start">
                <script language="perl">
                    <include file="expect.pl"/>
                    <![CDATA[
use strict;
use warnings FATAL => "all";

my $order;
my $x;
my $v;
my $undef;
undef $undef;

my $job_chain = $spooler->create_job_chain();
$job_chain->LetProperty( 'name', 'Kette_A' );
$job_chain->add_job( 'job_a', 'aaa', 'bbb' , 'ccc' );
$job_chain->add_job( 'job_b', 'bbb', 'ccc' , 'fehler' );
$job_chain->add_job( 'check', 'ccc', 'ende', 'fehler' );
$job_chain->add_end_state( 'ende' );
$job_chain->add_end_state( 'fehler' );
$spooler->add_job_chain( $job_chain );

if( $job_chain->order_count > 0 )
{
    $spooler_log->info( "\$job_chain->order_count=" . $job_chain->order_count . ", kein neuer Auftrag wird hinzugefügt" );
}
else
{
    $order = $spooler->create_order();
    $order->LetProperty( 'id', 1111 );
    $order->LetProperty( 'title', 'Wir haben einen Auftrag!' );
    $order->LetProperty( 'state_text', 'STATE_TEXT' );
    #$order->run_time->LetProperty( "xml", "<run_time><at at='2006-05-24 15:47:59'/></run_time>" );    

    my $params = $spooler->create_variable_set();
    $params->set_var( 'a', 'AA' );
    $params->set_var( 'b', 'BB' );
    $order->LetProperty( 'params', $params );

    $spooler->job_chain( 'Kette_A' )->add_order( $order );


    $order = $spooler->create_order();
    $order->LetProperty( 'id', 2222 );
    $order->LetProperty( 'title', 'Wir haben einen Auftrag!' );
    $order->LetProperty( 'state_text', 'STATE_TEXT' );
    #$order->run_time->LetProperty( 'xml', '<run_time><period repeat="10"/></run_time>' );

    $params = $spooler->create_variable_set();
    $params->set_var( 'a', 'AA' );
    $params->set_var( 'b', 'BB' );
    $order->LetProperty( 'params', $params );

    $spooler->job_chain( 'Kette_A' )->add_order( $order );
}

#--------------------------------------------------------------------------------------------------

# Prüfen, ob Perl-Schnittstelle undefined für ein Objekt annimmt
$order = $spooler->create_order();
if( defined $order->payload )  { $spooler_log->error( '$order->payload is defined: ' . $order->payload . ", xml=" . $order->xml ); }

# PerlScript liefert Win32::OLE::Variant=SCALAR(0xab0cc8)
$order->LetProperty( 'payload', $undef );
if( defined $order->payload )  { $spooler_log->warn( '$order->payload is defined: ' . $order->payload . ", xml=" . $order->xml ); }

#--------------------------------------------------------------------------------------------------
# Variable_set

# PerlScript liefert "Win32::OLE::Variant=SCALAR(0xacba70)"
my $variable_set = $spooler->create_variable_set();
$variable_set->LetProperty( "value", "undefined", $undef );
if( defined $variable_set->value( "undefined" ) )  { $spooler_log->warn( '$variable_set->{undefined} is defined: ' . $variable_set->{undefined} ); }

$variable_set->LetProperty( "value", "a", "a" );
$x = '$variable_set->value( "a" )';
$v = "a";
expect( $x, eval( $x ), $v );

$variable_set->LetProperty( "value", "1", 1 );
$x = '$variable_set->value( "1" )';
$v = 1;
expect( $x, eval( $x ), $v );

#--------------------------------------------------------------------------------------------------

if( defined $spooler_job->order_queue )  { $spooler_log->error( '$spooler_job->order_queue is defined: ' . $spooler_job->order_queue ); }

#--------------------------------------------------------------------------------------------------

        ]]>
                </script>
                <run_time once="yes"/>
            </job>

            <job name="job_a" order="yes">
                <script language="perl">
                    <![CDATA[
use strict;
use warnings FATAL => "all";

sub spooler_process()
{
    my $order = $spooler_task->order;
    my $params = $order->params;
    $params->LetProperty( "value", "A", $params->value( 'A' ) . " " . $spooler_job->name );
    return $order->id == 2222;
}

                ]]>
                </script>

            </job>

            
            <job name="job_b" order="yes">
                <script language="perl">
                    <![CDATA[
use strict;
use warnings FATAL => "all";

sub spooler_process()
{
    my $order = $spooler_task->order;
    my $params = $order->params;
    $params->LetProperty( "value", "A", $params->value( 'A' ) . " " . $spooler_job->name );
    return 1;
}

                ]]>
                </script>

            </job>


            <job name="check" order="yes">
                <script language="perl">
                    <include file="expect.pl"/>
                    <![CDATA[
use strict;
use warnings FATAL => "all";

 
sub spooler_process()
{
    my $x;
    my $v;
    my $order = $spooler_task->order;
    my $params = $order->params;

    if( $order->id == 1111 )
    {
        $x = '$params->value( "A" )';
        $v = "AA job_a";
        expect( $x, eval( $x ), $v );
    }
    elsif( $order->id == 2222 )
    {
        $x = '$params->value( "A" )';
        $v = "AA job_a job_b";
        expect( $x, eval( $x ), $v );
    }
    else { $spooler_log->error( '$order->id != 1111 oder 2222' ); }    


    $x = '$order->title';  
    $v = "Wir haben einen Auftrag!";  
    expect( $x, eval( $x ), $v );
    
    $x = '$order->state';
    $v = "ccc"; 
    expect( $x, eval( $x ), $v );
    
    $x = '$order->state_text'; 
    $v = "STATE_TEXT";
    expect( $x, eval( $x ), $v );
    
    if( $order->job_chain->order_count == 1 ) { $spooler->terminate(); }
    return 1;
}

                ]]></script>

            </job>
            
        </jobs>
    </config>
</spooler>
