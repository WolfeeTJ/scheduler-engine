<?xml version="1.0"?>

<spooler
    xmlns:xsi                     = "http://www.w3.org/2001/XMLSchema-instance" 
    xsi:noNamespaceSchemaLocation = "s:/prod/scheduler/scheduler.xsd"
>
    <config main_scheduler="lillerud:6310" tcp_port="4444" mail_xslt_stylesheet="$SCHEDULER_TEST/mail.xsl">

        <security ignore_unknown_hosts="yes">
            <allowed_host host="0.0.0.0" level="all"/>
        </security>

        <process_classes/>

        <http_server>
            <http_directory url_path="/test/" path="s:/tmp/test"/>
            <http_directory url_path="/test2" path="s:/tmp/test"/>
            <http_directory url_path="/doc/" path="s:/prod/scheduler/doc"/>

            <web_service 
                name                     = "mein_webdienst" 
                url_path                 = "/webdienst"
                job_chain                = "web_service" 
                timeout                  = "3"
                debug="yes"
            >
                <params>
                    <param name="param1" value="$TEST"/>
                    <param name="job_chain" value="meine_jobkette"/>
                </params>
            </web_service>

            <web_service 
                name                     = "mein_webdienst_xslt" 
                url_path                 = "/webdienst_xslt"
                request_xslt_stylesheet  = "$SCHEDULER_TEST/web_service_request.xsl"
                response_xslt_stylesheet = "$SCHEDULER_TEST/web_service_response.xsl"
                forward_xslt_stylesheet  = "$SCHEDULER_TEST/web_service_forward.xsl"
                debug                    = "yes"
            >
                <params>
                    <param name="job_chain" value="meine_jobkette"/>
                    <param name="parameter" value="PARAMETER ÄÖÜäöü´ßÅå"/>
                    <param name="parameter2" value="PARA'METER ÄÖÜäöü´ßÅå"/>
                    <param name="parameter3" value="PARA&quot;METER ÄÖÜäöü´ßÅå"/>
                    <param name="parameter4" value="PARA'M&quot;ETER ÄÖÜäöü´ßÅå"/>
                </params>
            </web_service>
        </http_server>


        <jobs>

            <job name="start">
                <script language="JavaScript">
                    <![CDATA[

var forwarding_job_chain = spooler.job_chain( "scheduler_service_forwarding" );
if( forwarding_job_chain.order_count() == 0 )
{
    //spooler.job( "order" ).execute_command( "stop" );

    for( var i = 0; i < 100; i++ )  
    {
        var order = spooler.create_order();
        order.payload = 
            "<?xml version='1.0'?>" + 
            "<service_request url='http://" + spooler.hostname() + ":" + spooler.tcp_port() + "/webdienst'>" +
                "<content>" +
                    "<test/>" +
                "</content>" +
            "</service_request>";

        forwarding_job_chain.add_order( order );
    }
    
    spooler_log.info( "*******************************" );
}

        ]]>
                </script>
                <run_time once="yes"/>
            </job>

            <job name="job">
                <script language="JavaScript">
                    <![CDATA[

spooler_log.info( "äöü var1=" + spooler_task.params.value( "var1" ) );
spooler_task.params.value( "neu" ) = "NEU";

                ]]>
                </script>

                <run_time/>
            </job>


            <job name="web_service" order="yes">
                <script language="JavaScript">
                    <![CDATA[

function spooler_process()
{
    var order = spooler_task.order;
    var web_service_operation = order.web_service_operation;
    var request  = web_service_operation.request;
    var response = web_service_operation.response;

    spooler_log.info( "web_service.params=" + order.web_service.params.xml );
    spooler_log.info( "request.url=" + request.url );
    spooler_log.info( "request.peer_ip=" + web_service_operation.peer_ip );
    spooler_log.info( "request.peer_hostname=" + web_service_operation.peer_hostname );
    spooler_log.info( "request.Content-Type=" + request.header( "Content-Type" ) );
    spooler_log.info( "request.content_type=" + request.content_type );
    spooler_log.info( "request.charset_name=" + request.charset_name );
    spooler_log.info( "request.string_content=" + request.string_content );

    //response.set_header( "Content-Type", "text/plain; charset=ISO-8859-1" );
    response.content_type = "text/plain";
    response.charset_name = "UTF-8";
    //response.charset_name = "ISO-8859-1";
    response.string_content = "Meine Antwort mit Ümläüten zu 1€";
    response.send();

    spooler_log.mail_it = true;
    
    return true;
}

                ]]>
                </script>

                <run_time>
                    <period begin="00:00"/>
                </run_time>
            </job>


            <job name="java_web_service" order="yes">
                <script java_class="spooler_job.Test" recompile="yes">

                    <![CDATA[

package spooler_job;

import java.io.*;
import sos.spooler.*;

public class Test extends sos.spooler.Job_impl
{
    public boolean spooler_process()  throws Exception
    {
        Order                 order                 = spooler_task.order();
        Web_service_operation web_service_operation = order.web_service_operation();
        Web_service_request   request               = web_service_operation.request();

        spooler_log.info( "request.url="            + request.url() );
        spooler_log.info( "request.content_type="   + request.header( "Content-Type" ) );
        spooler_log.info( "request.binary_content=" + new String( request.binary_content(), request.charset_name() ) );

        // Decode request data
        String request_string = new String( request.binary_content(), request.charset_name() );
        
        // process( request_string );
        
        String               text         = "This is my response with umlauts: ÄÖÜäöüß€";
        String               charset_name = "UTF-8";
        Web_service_response response     = web_service_operation.response();

        response.set_content_type( "text/plain" );
        response.set_charset_name( charset_name );

        ByteArrayOutputStream byos = new ByteArrayOutputStream();
        Writer writer = new OutputStreamWriter( byos, charset_name );
        writer.write( text );
        writer.close();

        response.set_binary_content( byos.toByteArray() );
        response.send();

        return true;
    }
}

]]>
                </script>
            </job>

            
            <job name="order" order="yes">
                <script language="JavaScript">
                    <![CDATA[

function spooler_process()
{
    spooler_log.debug( "spooler_process payload=" + spooler_task.order.payload );
    spooler_log.debug( "var1=" + spooler_task.order.payload.value( 'var1' ) );
    return true;
}

                ]]>
                </script>

                <run_time/>
            </job>

            <job name="scheduler_service_forwarder">
                <run_time/>
            </job>

        </jobs>

        <job_chains>
            <job_chain name="web_service" orders_recoverable="no">
                <job_chain_node state="eins" job="java_web_service"/>
                <job_chain_node state="fertig"/>
            </job_chain>

            <job_chain name="meine_jobkette">
                <job_chain_node state="eins" job="order"/>
                <job_chain_node state="fertig"/>
            </job_chain>
        </job_chains>
    </config>
</spooler>
