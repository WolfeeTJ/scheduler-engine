<?xml version="1.0"?>
<spooler
    xmlns:xsi                     = "http://www.w3.org/2001/XMLSchema-instance" 
    xsi:noNamespaceSchemaLocation = "s:/prod/scheduler/scheduler.xsd"
>
    <config>

        <base file="$SCHEDULER_TEST/base.scheduler"/>


        <jobs>
            <job name="start">
                <script language="perl">
                    <include file="${SCHEDULER_TEST}/expect.pl"/>
                    <![CDATA[
package main;
use vars qw($spooler $spooler_log $spooler_job $spooler_task);
use strict;
use warnings FATAL => "all";


eval
{
    $spooler->job( "gibsnich" );
    $spooler_log->error( '$spooler->job( "gibsnich" )  liefert keinen Fehler' );
};
if( $@ ) { $spooler_log->info( '$spooler->job( "gibsnich" )' . " ==> $@, gut." ); }

#{
#    eval
#    {
#        my $subprocess = $spooler_task->create_subprocess();
#        $subprocess->start( "gibsnich" );
#        $spooler_log->error( '$subprocess->start( "gibsnich" )  liefert keinen Fehler' );
#        my $signal = $subprocess->termination_signal;
#        $spooler_log->info( '$subprocess->termination_signal  liefert keinen Fehler' );
#        
#        eval
#        {
#            $spooler_log->error( '$subprocess->termination_signal=' . $signal );
#        };
#        if( $@ ) { $spooler_log->error( $@ ); }
#        
#        my $exit_code = $subprocess->exit_code;
#        $spooler_log->error( '$subprocess->exit_code  liefert keinen Fehler' );
#
#        eval
#        {
#            $spooler_log->error( '$subprocess->exit_code=' . $exit_code );
#        };
#        if( $@ ) { $spooler_log->error( $@ ); }
#        
#    };
#    if( $@ ) { $spooler_log->info( '$subprocess->start( "gibsnich" )' . " ==> $@, gut." ); }
#}


my @subprocess_args = [ "echo", "-mit", "array-" ];
my $subprocess_string = "echo -als Kommandozeile-";

{
    my $subprocess = $spooler_task->create_subprocess( @subprocess_args );
    $subprocess->wait_for_termination();
}

{
    my $subprocess = $spooler_task->create_subprocess();
    $subprocess->start( @subprocess_args );
    $subprocess->wait_for_termination();
}

{
    my $subprocess = $spooler_task->create_subprocess( $subprocess_string );
    $subprocess->wait_for_termination();
}

{
    my $subprocess = $spooler_task->create_subprocess();
    $subprocess->start( $subprocess_string );
    $subprocess->wait_for_termination();
}

{
    my $subprocess = $spooler_task->create_subprocess();

    $subprocess->LetProperty( "environment", "SCHEDULER_EINS", "eins" );
    $subprocess->LetProperty( "environment", "SCHEDULER_ZWEI", "zwei" );
    $subprocess->start( "env" );
}

{
    my $subprocess = $spooler_task->create_subprocess();

    $subprocess->LetProperty( "ignore_error", 1 );
    $subprocess->start( "sleep 30" );

    $spooler_log->info( "pid=" . $subprocess->pid );
    $subprocess->LetProperty( "timeout", 20 );

    sleep( 1 );
    $spooler_log->info( "wait_for_termination ..." );
    my $ok = $subprocess->wait_for_termination( 5 );
    $spooler_log->info( "wait_for_termination ok=$ok" );

    if( ! $subprocess->terminated ) 
    {
        $subprocess->kill();
        $subprocess->wait_for_termination();
    }

    $spooler_log->info( "exit code=" . $subprocess->exit_code );
    $spooler_log->info( "termination signal=" . $subprocess->termination_signal );
}

my $stdout = $spooler_task->stdout_text;

if( !( $stdout =~ /-mit array-/ ) )             { $spooler_log->error( "'-als Kommandozeile-' erwartet" ); }
if( !( $stdout =~ /-als Kommandozeile-/ ) )     { $spooler_log->error( "'-als Kommandozeile-' erwartet" ); } 
if( !( $stdout =~ /SCHEDULER_EINS=eins/ ) )     { $spooler_log->error( "'scheduler_eins=eins' erwartet" ); }
if( !( $stdout =~ /SCHEDULER_ZWEI=zwei/ ) )     { $spooler_log->error( "'scheduler_zwei=zwei' erwartet" ); }

if( my_system( "exit 3" ) != 3 )  { $spooler_log->error( "exit_code != 3" ); }
#if( my_system( "sleep 5", 3 ) != 99 )  { $spooler_log->error( "exit_code != 99" ); }

$spooler->terminate();


#my $cmd = "sleep 6";
#my $exit_code = my_system( $cmd, 5 );
my $cmd = "ls | grep mp3";
my $exit_code = shell( $cmd, 5 );
$spooler_log->info( "$cmd ==> $exit_code" );
#
sub my_system
{
    my $cmd     = shift;
    my $timeout = shift;
    
    my $subprocess = $spooler_task->create_subprocess();
    
    $subprocess->LetProperty( "timeout", $timeout )  if defined $timeout;
    $subprocess->start( $cmd );
    $subprocess->wait_for_termination();            
    return $subprocess->exit_code;
}

sub shell
{
    my $cmd     = shift;
    my $timeout = shift;
    my $subprocess = $spooler_task->create_subprocess();
    
    $subprocess->LetProperty( "timeout", $timeout )  if defined $timeout;
    $subprocess->start( [ "/bin/sh", "-c", $cmd ] );
    $subprocess->wait_for_termination();            
    return $subprocess->exit_code;
}

                    ]]></script>
                <run_time once="yes"/>
            </job>
        </jobs>
    </config>
</spooler>
