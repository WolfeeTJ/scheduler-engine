// $Id: spooler.odl,v 1.46 2002/09/27 10:48:55 jz Exp $

// Anweisung: midl /nologo /error all /out $(OutDir) $(InputPath)

[
    uuid        ( ED57B226-CD4F-490a-B47E-E7D44A895273 ),
    helpstring  ( "SOS GmbH Berlin, www.sos-berlin.com" ),
    lcid        ( 0x0000 ),
    version     ( 1.0 )
]
library spooler
{
    importlib("STDOLE32.TLB");
    importlib("msxml3.dll");

    interface Ivariable_set;
    interface Ilog;
    interface Itask;
    interface Ithread;
    interface Imail;
    interface Ijob_chain;
    interface Iorder_queue;
    interface Iorder;

    //----------------------------------------------------------------------------------------Error

    [
        uuid       ( 5BF4BD80-A437-46df-86AB-05E5E9E1C4E2 ),
        odl,
        dual
    ]
    interface Ierror : IDispatch
    {
        [id(0),propget]
        HRESULT                 is_error                    ( [out,retval] VARIANT_BOOL* result );

        [propget]
        HRESULT                 code                        ( [out,retval] BSTR* code );

        [propget]
        HRESULT                 text                        ( [out,retval] BSTR* text );
    }

    [
        uuid       ( 5B4463E8-4DAE-4198-91C2-160411369DF1 )
    ]
    coclass Error
    {
        interface Ierror;
    }

    //------------------------------------------------------------------------------------Ivariable

    [
        uuid       ( 2B9F8928-6722-40a3-B6EC-2455F0A253F7 ),
        odl,
        dual
    ]
    interface Ivariable : IDispatch
    {
        [id(0),propput]
        HRESULT                 value                       ( [in] VARIANT* value );

        [id(0),propget]
        HRESULT                 value                       ( [out,retval] VARIANT* value );

      //HRESULT                 dim                         ( [in] int size );

        [propget]
        HRESULT                 name                        ( [out,retval] BSTR* name );

        HRESULT                 Clone                       ( [out,retval] Ivariable** );
    }

    [
        uuid       ( E5F145CE-7AB6-4204-9306-FECD4BF7A619 )
    ]
    coclass Variable
    {
        interface Ivariable;
    }

    //---------------------------------------------------------------------------------Variable_set

    [
        uuid       ( 5F028EDD-2195-4bcc-B63F-FC88B73A4712 ),
        odl,
        dual
    ]
    interface Ivariable_set : IDispatch
    {
        HRESULT                 set_var                     ( [in] BSTR name, [in] VARIANT* value );

        [id(0),propput]
        HRESULT                 var                         ( [in] BSTR name, [in] VARIANT* value );

        [id(0),propget]
        HRESULT                 var                         ( [in] BSTR name, [out,retval] VARIANT* value );

        [propget]
        HRESULT                 count                       ( [out,retval] int* value );

        [propget]
        HRESULT                 dom                         ( [out,retval] IXMLDOMDocument** xml_document );

        HRESULT                 Clone                       ( [out,retval] Ivariable_set** result );

        HRESULT                 merge                       ( [in] Ivariable_set* other);

        [id(DISPID_NEWENUM),propget,restricted]
        HRESULT                 _NewEnum                    ( [out,retval] IUnknown** enumerator );    
    }

    [
        uuid       ( 818150DA-CD01-4db3-972B-433A9D6237F3 )
    ]
    coclass Variable_set
    {
        interface Ivariable_set;
    }

    //----------------------------------------------------------------------Variable_set_enumerator

    [
        uuid       ( 4FA28F03-7970-43cf-BAFF-5F2F0AF8B1B6 ),
        odl,
        dual
    ]
    interface Ivariable_set_enumerator : IEnumVARIANT
    { 
        HRESULT                 Next                    ( unsigned long celt, VARIANT* rgvar, unsigned long* pceltFetched );
        HRESULT                 Skip                    ( unsigned long celt );
        HRESULT                 Reset                   ();
        HRESULT                 Clone                   ( IEnumVARIANT** ppenum );
    }

    [
        uuid       ( EFAC6F36-563F-42a7-86D7-170A1A18D1D5 )
    ]
    coclass Variable_set_enumerator
    {
        interface Ivariable_set_enumerator;
    }

    //-----------------------------------------------------------------------------------Object_set

    [
        uuid       ( FB6288E5-3391-4c9d-A10E-04E1CC162900 ),
        odl,
        dual
    ]
    interface Iobject_set : IDispatch
    {
        [propget]
        HRESULT                 low_level                   ( [out,retval] int* level );

        [propget]
        HRESULT                 high_level                  ( [out,retval] int* level );
    }

    [
        uuid       ( 9A38442F-9816-49b9-AB67-6B352CF84F66 )
    ]
    coclass Object_set
    {
        interface Iobject_set;
    }

    //------------------------------------------------------------------------------------------Job

    [
        uuid       ( 4DF2E8E8-52DA-454f-8ADE-3B5D4FE7F73B ),
        odl,
        dual
    ]
    interface Ijob : IDispatch
    {
        HRESULT                 start_when_directory_changed( [in] BSTR directory_name, [in,defaultvalue("")] BSTR filename_pattern );

        HRESULT                 clear_when_directory_changed();

      //HRESULT                 start_on_signal             ();

      //HRESULT                 start_after_timeout         ( [in,optional] VARIANT* variables, [out,retval] Itask** );

        HRESULT                 start                       ( [in,optional] VARIANT* variables, [out,retval] Itask** );

        [propget]
        HRESULT                 thread                      ( [out,retval] Ithread** result );

      //[propput]
      //HRESULT                 include_path                ( [in] BSTR include_path );

        [propget]
        HRESULT                 include_path                ( [out,retval] BSTR* include_path );

        [propget]
        HRESULT                 name                        ( [out,retval] BSTR* name );

        HRESULT                 wake                        ();

        [propput]
        HRESULT                 state_text                  ( [in] BSTR state_text );

        [propget]
        HRESULT                 title                       ( [out,retval] BSTR* title );

        [propput]
        HRESULT                 delay_after_error           ( [in] int error_steps, [in] VARIANT* time );

        [propget]
        HRESULT                 order_queue                 ( [out,retval] Iorder_queue** result );
    }

    [
        uuid       ( 15ECAE84-4142-43e6-A38C-C90A299097B4 )
    ]
    coclass Job
    {
        interface Ijob;
    }

    //-----------------------------------------------------------------------------------------Task

    [
        uuid       ( 65E311F1-04BF-4e34-A847-BBF0B0AC6DC6 ),
        odl,
        dual
    ]
    interface Itask : IDispatch
    {
        [propget]
        HRESULT                 object_set                  ( [out,retval] Iobject_set** result );

        [propput]
        HRESULT                 error                       ( [in] VARIANT* error_text );       // Für PerlScript, das einen Fehlertext nicht durchreicht

        [propget]
        HRESULT                 error                       ( [out,retval] Ierror** result );

        [propget]
        HRESULT                 job                         ( [out,retval] Ijob** job );

        [propget]
        HRESULT                 params                      ( [out,retval] Ivariable_set** parameters );

        [propput]
        HRESULT                 result                      ( [in] VARIANT* value );

        [propget]
        HRESULT                 result                      ( [out,retval] VARIANT* value );

        HRESULT                 wait_until_terminated       ( [in,defaultvalue(999999999)] double wait_time, [out,retval] VARIANT_BOOL* ok );

        [propput,helpstring("Task nach der Anzahl Sekunden erneut starten")]
        HRESULT                 repeat                      ( [in] double seconds );

      //[propget]
      //HRESULT                 thread                      ( [out,retval] Ithread** result );

        HRESULT                 end                         ();

        [propput]
        HRESULT                 history_field               ( [in] BSTR name, [in] VARIANT* value );

        [propget]
        HRESULT                 id                          ( [out,retval] int* result );

        [propput]
        HRESULT                 delay_spooler_process       ( [in] VARIANT* seconds );

        [propput]
        HRESULT                 close_engine                ( [in] VARIANT_BOOL close_after_task );

        [propget]
        HRESULT                 order                       ( [out,retval] Iorder** result );
    }

    [
        uuid       ( 00BB25C8-812A-4200-A6F9-1AE8E2650474 )
    ]
    coclass Task
    {
        interface Itask;
    }

    //---------------------------------------------------------------------------------------Thread

    [
        uuid       ( 0FA3AC14-01EC-4c8f-81D9-7CABF8A76B43 ),
        odl,
        dual
    ]
    interface Ithread : IDispatch
    {
        [propget]
        HRESULT                 log                     ( [out,retval] Ilog** log );

        [propget]
        HRESULT                 script                  ( [out,retval] IDispatch** script_object );

      //[propput]
      //HRESULT                 include_path            ( [in] BSTR include_path );

        [propget]
        HRESULT                 include_path            ( [out,retval] BSTR* include_path );

        [propget]
        HRESULT                 name                        ( [out,retval] BSTR* name );
    }

    [
        uuid       ( 4E70F30E-D446-42b1-B4F0-7A53113D87C7 )
    ]
    coclass Thread
    {
        interface Ithread;
    }

    //--------------------------------------------------------------------------------------Spooler

    [
        uuid       ( 3D8FF20C-5CFD-4b70-9A2D-B51AB3DCB98D ),
        odl,
        dual
    ]
    interface Ispooler : IDispatch
    {
        [propget]
        HRESULT                 log                     ( [out,retval] Ilog** log );

        [propget]
        HRESULT                 id                      ( [out,retval] BSTR* spooler_id );

        [propget]
        HRESULT                 param                   ( [out,retval] BSTR* spooler_param );

        [propget]
        HRESULT                 script                  ( [out,retval] IDispatch** script_object );

        [propget]
        HRESULT                 job                     ( [in] BSTR job_name, [out,retval] Ijob** job );

        HRESULT                 create_variable_set     ( [out,retval] Ivariable_set** result );

      //[propput]
      //HRESULT                 include_path            ( [in] BSTR include_path );

        [propget]
        HRESULT                 include_path            ( [out,retval] BSTR* include_path );

        [propget]
        HRESULT                 log_dir                 ( [out,retval] BSTR* directory );

        HRESULT                 let_run_terminate_and_restart();

        [propget]
        HRESULT                 variables               ( [out,retval] Ivariable_set** );

        [id(0),propput]
        HRESULT                 var                     ( [in] BSTR name, [in] VARIANT* value );

        [id(0),propget]
        HRESULT                 var                     ( [in] BSTR name, [out,retval] VARIANT* value );

        [propget]
        HRESULT                 db_name                 ( [out,retval] BSTR* filename );

        HRESULT                 create_job_chain        ( [out,retval] Ijob_chain** result );

        HRESULT                 add_job_chain           ( [in] Ijob_chain* job_chain );

        [propget]
        HRESULT                 job_chain               ( [in] BSTR name, [out,retval] Ijob_chain** result );

        HRESULT                 create_order            ( [out,retval] Iorder** result );
    }

    [
        uuid       ( 87605BDB-42C7-43e7-B311-D568F86D78B5 )
    ]
    coclass Spooler
    {
        interface Ispooler;
    }

    //------------------------------------------------------------------------------------Log_level

    enum Log_level
    {
        log_debug9 = -9,
        log_debug8 = -8,
        log_debug7 = -7,
        log_debug6 = -6,
        log_debug5 = -5,
        log_debug4 = -4,
        log_debug3 = -3,
        log_debug2 = -2,
        log_debug1 = -1,
        log_debug  = -1,
        log_info   =  0, 
        log_warn   =  1, 
        log_error  =  2,
      //log_fatal  =  3
    };

    //------------------------------------------------------------------------------------------Log

    [
        uuid       ( 3B6C8A62-B511-445d-A2A2-E852BC2E05A0 ),
        odl,
        dual
    ]
    interface Ilog : IDispatch
    {
        HRESULT                 debug9                  ( [in] BSTR line );
        HRESULT                 debug8                  ( [in] BSTR line );
        HRESULT                 debug7                  ( [in] BSTR line );
        HRESULT                 debug6                  ( [in] BSTR line );
        HRESULT                 debug5                  ( [in] BSTR line );
        HRESULT                 debug4                  ( [in] BSTR line );
        HRESULT                 debug3                  ( [in] BSTR line );
        HRESULT                 debug2                  ( [in] BSTR line );
        HRESULT                 debug1                  ( [in] BSTR line );
        
        HRESULT                 debug                   ( [in] BSTR line );
        
        [id(0)]
        HRESULT                 info                    ( [in] BSTR line );
        
        HRESULT                 msg                     ( [in] BSTR line );     // Zur Kompatibilität, wie info()
        
        HRESULT                 warn                    ( [in] BSTR line );
        
        HRESULT                 error                   ( [in] BSTR line );

        HRESULT                 log                     ( [in] enum Log_level, [in] BSTR line );

        [propget]
        HRESULT                 mail                    ( [out,retval] Imail** mail );

        [propput]
        HRESULT                 mail_on_error           ( [in] VARIANT_BOOL mail_on_error );

        [propget]
        HRESULT                 mail_on_error           ( [out,retval] VARIANT_BOOL* mail_on_error );

        [propput]
        HRESULT                 mail_on_success         ( [in] VARIANT_BOOL mail_on_success );

        [propget]
        HRESULT                 mail_on_success         ( [out,retval] VARIANT_BOOL* mail_on_success );

        [propput]
        HRESULT                 mail_on_process         ( [in] int level );

        [propget]
        HRESULT                 mail_on_process         ( [out,retval] int* level );

        [propput]
        HRESULT                 level                   ( [in] int level );

        [propget]
        HRESULT                 level                   ( [out,retval] int* level );

        [propget]
        HRESULT                 filename                ( [out,retval] BSTR* filename );

        [propput]
        HRESULT                 new_filename            ( [in] BSTR filename );

        [propget]
        HRESULT                 new_filename            ( [out,retval] BSTR* filename );

        [propput]
        HRESULT                 collect_within          ( [in] VARIANT* time );

        [propget]
        HRESULT                 collect_within          ( [out,retval] double* time );

        [propput]
        HRESULT                 collect_max             ( [in] VARIANT* time );

        [propget]
        HRESULT                 collect_max             ( [out,retval] double* time );
    }

    [
        uuid       ( 032974D7-8668-41c4-A204-3E893E06846F )
    ]
    coclass Log
    {
        interface Ilog;
    }

    //--------------------------------------------------------------------------------------Context

    [
        uuid       ( 51905432-B068-4124-B972-260EED6CAD16 ),
        odl,
        dual
    ]
    interface Icontext : IDispatch
    {
        [propget]
        HRESULT                 log                     ( [out,retval] Ilog** log );

        [propget]
        HRESULT                 spooler                 ( [out,retval] Ispooler** spooler );

        [propget]
        HRESULT                 thread                  ( [out,retval] Ithread** thread );

        [propget]
        HRESULT                 job                     ( [out,retval] Ijob** job );

        [propget]
        HRESULT                 task                    ( [out,retval] Itask** task );
    }

    [
        uuid       ( 47399CB4-B7A4-40f9-A9AE-7AE4CBAE90F5 )
    ]
    coclass Context
    {
        interface Icontext;
    }

    //-----------------------------------------------------------------------------------------Mail

    [
        uuid       ( 736AD9FC-350B-4ee0-BF82-B5CB2CFA0E3B ),
        odl,
        dual
    ]
    interface Imail : IDispatch
    {
        [hidden]
        void                    init                    ();

        [propput]
        HRESULT                 to                      ( [in] BSTR receipient );

        [propget]
        HRESULT                 to                      ( [out,retval] BSTR* receipient );

        [propput]
        HRESULT                 from                    ( [in] BSTR from );

        [propget]
        HRESULT                 from                    ( [out,retval] BSTR* from );

      //[propput]
      //HRESULT                 reply_to                ( [in] BSTR receipient );

        [propput]
        HRESULT                 cc                      ( [in] BSTR receipients );

        [propget]
        HRESULT                 cc                      ( [out,retval] BSTR* receipients );

        [propput]
        HRESULT                 bcc                     ( [in] BSTR receipients );

        [propget]
        HRESULT                 bcc                     ( [out,retval] BSTR* receipients );

        [propput]
        HRESULT                 subject                 ( [in] BSTR subject );

        [propget]
        HRESULT                 subject                 ( [out,retval] BSTR* subject );

        [propput]
        HRESULT                 body                    ( [in] BSTR body );

        [propget]
        HRESULT                 body                    ( [out,retval] BSTR* body );

        HRESULT                 add_file                ( [in] BSTR real_filename, [in,defaultvalue("")] BSTR mail_filename, [in,defaultvalue("")] BSTR content_type, [in,defaultvalue("")] BSTR encoding );

        [propput]
        HRESULT                 smtp                    ( [in] BSTR hostname );

        [propget]
        HRESULT                 smtp                    ( [out,retval] BSTR* host );

        [propput]
        HRESULT                 queue_dir               ( [in] BSTR directory );

        [propget]
        HRESULT                 queue_dir               ( [out,retval] BSTR* directory );

        HRESULT                 add_header_field        ( [in] BSTR field_name, [in] BSTR value );

        HRESULT                 dequeue                 ( [out,retval] int* count );

        [hidden]
        int                     send                    ();
    }

    [
        uuid       ( D5F4C5B5-4CF7-4ca7-84C0-E1696DA56D1D )
    ]
    coclass Mail
    {
        interface Imail;
    }

    //-------------------------------------------------------------------------------------Job_chain

    [
        uuid       ( E76C561D-FFD7-4680-AC4F-9CE1B8EEE4FE ),
        odl,
        dual
    ]
    interface Ijob_chain : IDispatch
    {
        [propput]
        HRESULT                 name                    ( [in] BSTR name );

        [propget]
        HRESULT                 name                    ( [out,retval] BSTR* result );

        [propget]
        HRESULT                 order_count             ( [out,retval] int* result );

        HRESULT                 add_job                 ( [in]          VARIANT* jobname, 
                                                          [in,optional] VARIANT* input_state,
                                                          [in,optional] VARIANT* output_state,
                                                          [in,optional] VARIANT* error_state );

        HRESULT                 add_end_state           ( [in] VARIANT* state );

        HRESULT                 add_order               ( [in] VARIANT* order_or_payload, [out,retval] Iorder** order );

        [propget]
        HRESULT                 order_queue             ( [in] VARIANT* state, [out,retval] Iorder_queue** result );
    }

    [
        uuid       ( 70EC6128-F7FF-44e6-B352-56CF123F7827 )
    ]
    coclass Job_chain
    {
        interface Ijob_chain;
    }

    //----------------------------------------------------------------------------------Order_queue

    [
        uuid       ( 497E0166-26FF-4ea6-B846-34F4BB97021D ),
        odl,
        dual
    ]
    interface Iorder_queue : IDispatch
    {
        [propget]
        HRESULT                 length                  ( [out,retval] int* result );

        HRESULT                 add_order               ( [in] VARIANT* order_or_payload, [out,retval] Iorder** );
    }

    [
        uuid       ( 65426DA4-5907-4630-85F1-2201B07253BB )
    ]
    coclass Order_queue
    {
        interface Iorder_queue;
    }

    //----------------------------------------------------------------------------------------Order

    [
        uuid       ( A1B7B832-519C-495b-A1D9-83AAA0165C6D ),
        odl,
        dual
    ]
    interface Iorder : IDispatch
    {
        [propput]
        HRESULT                 id                      ( [in] VARIANT* value );

        [propget]
        HRESULT                 id                      ( [out,retval] VARIANT* result );

        [propput]
        HRESULT                 title                   ( [in] BSTR value );

        [propget]
        HRESULT                 title                   ( [out,retval] BSTR* result );

        [propput]
        HRESULT                 priority                ( [in] int value );

        [propget]
        HRESULT                 priority                ( [out,retval] int* result );

        [propget]
        HRESULT                 job_chain               ( [out,retval] Ijob_chain** result );

        [propput]
        HRESULT                 job                     ( [in] VARIANT* job_or_jobname );

        [propputref]
        HRESULT                 job                     ( [in] Ijob* job );

        [propget]
        HRESULT                 job                     ( [out,retval] Ijob** result );

        [propput]
        HRESULT                 state                   ( [in] VARIANT* value );

        [propget]
        HRESULT                 state                   ( [out,retval] VARIANT* result );

        [propput]
        HRESULT                 state_text              ( [in] BSTR value );

        [propget]
        HRESULT                 state_text              ( [out,retval] BSTR* result );

        [propget]
        HRESULT                 error                   ( [out,retval] Ierror** result );

        [propput]
        HRESULT                 payload                 ( [in] VARIANT* value );

        [propputref]
        HRESULT                 payload                 ( [in] IUnknown* value );

        [propget]
        HRESULT                 payload                 ( [out,retval] VARIANT* result );

        HRESULT                 payload_is_type         ( [in] BSTR typenam, [out,retval] VARIANT_BOOL* result );
    }

    [
        uuid       ( 8D3FAB02-6DD5-4831-916C-465E15E08F35 )
    ]
    coclass Order
    {
        interface Iorder;
    }

};
