#! /bin/bash
set -e

# Unter Windows muss Umgebungsvariable WINDOWS_NET_SDK_HOME den Installationpfad des Micosoft Windows SDK (.Net-SDK) enthalten,
# zum Beispiel: set WINDOWS_NET_SDK_HOME=%windir%\Microsoft.NET\Framework\v4.0.30319

function fail() {
    echo $*
    exit 1
}

cmd="$1"
[ -n "$cmd" ] || fail "Missing first command argument: clean or compile"

cpuArchitecture="$2"
[ -n "$cpuArchitecture" ] || fail "Missing second command argument: x86 or x64"

configurations="$3 $4"
[ -n "$3" ] || fail "Missing third command argument: Debug or Release"

os=$(if [ `uname` == "AIX" -o `uname` == "SunOS" -o `uname` == "Solaris" ]; then echo linux; else echo `uname -o`; fi)
[ "$os" == 'Cygwin' ] && os="windows"
[ "$os" == 'GNU/Linux' ] && os="linux"
echo Build for operating system $os

inWindows=$(if [ "$os" == "windows" ]; then echo 1; else echo ""; fi)
vcbuild=""
msbuild=""
visualStudioPlatform=$(if [ "$cpuArchitecture" == "x86" ]; then echo "Win32"; else echo "$cpuArchitecture"; fi)

[ "${PWD/ /_}" == "$PWD" ] || fail "Directory path is not allowed to include space (possibly a Jenkins job name includes a space?)"

if [ -z "$MAKE_JOBS" ]; then :
    MAKE_JOBS=1
    if [ -e /proc/cpuinfo ]; then :
      MAKE_JOBS=`cat /proc/cpuinfo | grep -w '^processor'|wc -l`
      [ $MAKE_JOBS -le 0 ]  &&  MAKE_JOBS=1
      [ $MAKE_JOBS -gt 8 ]  &&  MAKE_JOBS=8
    fi
    export MAKE_JOBS
fi

if [ $inWindows ]; then \
	programPath=$(if [ "$visualStudioPlatform" == "Win32" ]; then echo "C:\\Program Files"; else echo "C:\\Program Files (x86)"; fi)
    [ -n "${WINDOWS_NET_SDK_HOME}" ] || fail 'ERROR: Missing environment variable WINDOWS_NET_SDK_HOME with installation directory of Windows SDK and msbuild.exe (for example "%windir%\Microsoft.NET\Framework\v4.0.30319")'
    msbuild=$(cygpath "${WINDOWS_NET_SDK_HOME}")/msbuild.exe
    [ -f "$msbuild" ] || fail "Missing msbuild.exe: $msbuild"
fi

#--------------------------------------------------------------------------------------------------

function main() {
    cmd_generic_${cmd}
    cmd_${os}_${cmd}
}

#-------------------------------------------------------------------------------------------Generic

function cmd_generic_clean() {
    :
}

function cmd_generic_compile() {
    :
}

#-------------------------------------------------------------------------------------------Windows

function cmd_windows_clean() {
    cmd_windows_cleanWithRm
    visualStudio_clean scheduler
    if [ "$cpuArchitecture" == "x86" ]; then :
        visualStudio_clean spidermonkey
    fi
    cmd_windows_cleanWithRm
}

function cmd_windows_cleanWithRm() {
    # Weil "vcbuild.exe /clean" nicht immer löschen kann (Fehlermeldung PRJ0008), siehe http://msdn.microsoft.com/en-us/library/hk8k8k4h%28v=vs.80%29.aspx
    for c in $configurations; do :
        PATH=/bin find -type d -ipath "*/$visualStudioPlatform/$c" -execdir sh -c "rm -rf {}" \; -prune
		# Wir löschen auch übriggebliebende Kompilate von Versionen bis v1.7:
        PATH=/bin find -type d -ipath "*/$c" -execdir sh -c "rm -rf {}" \; -prune
    done
    rm -rf {bin,bind,ipch}/*
}

function cmd_windows_compile() {
    visualStudio_compile scheduler
    if [ "$cpuArchitecture" == "x86" ]; then :
        visualStudio_compile spidermonkey
    fi
}

function visualStudio_clean() {
    package=$1
    msbuild /target:clean $package-vs2010.sln /verbosity:minimal
}

function visualStudio_compile() {
    package=$1
    msbuild $package-vs2010.sln /verbosity:minimal
}

function msbuild() {
    for c in $configurations; do :
        echo $msbuild /nologo /m:$NUMBER_OF_PROCESSORS /property:Configuration="$c" /property:Platform="$visualStudioPlatform" /property:VCTargetsPath="$programPath\\MSBuild\\Microsoft.Cpp\\v4.0\\V120\\" $*
        "$msbuild" /nologo /m:$NUMBER_OF_PROCESSORS /property:Configuration="$c" /property:Platform="$visualStudioPlatform" /property:VCTargetsPath="$programPath\\MSBuild\\Microsoft.Cpp\\v4.0\\V120\\" $*
    done
}

#---------------------------------------------------------------------------------------------Linux

function cmd_linux_clean() {
    rm -f */*.h.gch */*.h.d
    rm -fr */{Debug,Release} */*/{Debug,Release} */*/{Debug,Release} */*/*/{Debug,Release}
    rm -fr `find .  -name "*.class"  -o -name "*.o"  -o -name "lib*.a"  -o -name "*.d"  -print`
    BUILD_OPT=1 JS_LIVECONNECT=1 make -C js/src  -f Makefile.ref  clean || true
    if [ "$cpuArchitecture" == "x86" ]; then
        make  -C scripting_engine/Release  -f ../Makefile  clean || true
    fi
}

function cmd_linux_compile() {(
    export O_DIR=Release
    export BIN_DIR="`pwd`/$cpuArchitecture/$O_DIR"
    if [ ! -d "$BIN_DIR" ]; then mkdir -p "$BIN_DIR"; fi
    export CDPATH=
    export WITH_PERL=1
    export WITH_JAVA=1
    export SCHEDULER_DEPENDENTS=
    export cpuArchitecture

    make/make zschimmer
    make/make kram
    make/make file
    make/make javaproxy

    if [ "$cpuArchitecture" == "x86" ]; then
        CFLAGS=-fPIC BUILD_OPT=1 JS_LIVECONNECT=1  JDK="$JAVA_HOME" make -C js/src/fdlibm  -f Makefile.ref
        CFLAGS=-fPIC BUILD_OPT=1 JS_LIVECONNECT=1  JDK="$JAVA_HOME" make -C js/src         -f Makefile.ref
        mkdir -p scripting_engine/Release
        make -C scripting_engine/Release -f ../Makefile
    fi

    make/make scheduler
)}

function searchAndDestroySubDirectory() {
    subDirName="$1"
    PATH=/bin find -type d -and -name "$subDirName" -execdir sh -c "rm -rf {}" \;
}

#--------------------------------------------------------------------------------------------------

main
