// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "spooler.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Proxy_class> has_proxy< ::sos::scheduler::Task_subsystem >::proxy_class_factory("com.sos.scheduler.engine.kernel.cppproxy.Task_subsystemCImpl");

}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jobject JNICALL get_1task_1or_1null__I(JNIEnv* jenv, jobject, jlong cppReference, jint p0)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Task_subsystem* o_ = has_proxy< ::sos::scheduler::Task_subsystem >::of_cpp_reference(cppReference,"::sos::scheduler::Task_subsystem::get_task_or_null()");
        return Has_proxy::jobject_of(o_->get_task_or_null(p0));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jobject();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL task_1log__I(JNIEnv* jenv, jobject, jlong cppReference, jint p0)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Task_subsystem* o_ = has_proxy< ::sos::scheduler::Task_subsystem >::of_cpp_reference(cppReference,"::sos::scheduler::Task_subsystem::task_log()");
        return env.jstring_from_string(o_->task_log(p0));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

const static JNINativeMethod native_methods[] = {
    { (char*)"get_task_or_null__native", (char*)"(JI)Lcom/sos/scheduler/engine/kernel/cppproxy/TaskC;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::get_1task_1or_1null__I },
    { (char*)"task_log__native", (char*)"(JI)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::task_1log__I }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_proxy< ::sos::scheduler::Task_subsystem >::register_cpp_proxy_class_in_java() {
        Env env;
        Class* cls = has_proxy< ::sos::scheduler::Task_subsystem >::proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, sizeof native_methods / sizeof native_methods[0]);
        if (ret < 0)  env.throw_java("RegisterNatives", "com.sos.scheduler.engine.kernel.cppproxy.Task_subsystemCImpl");
    }

}}
