Vorgehen
a) Konfigurationsdatei modifizieren (enable=yes")
- Attribut enable setzen
- Job-Status intern setzen

b)Zusätzliches Kommando enable/disable (s. Wiki) => Neuer Jira-Eintrag (Konfigurationsdatei muß synchronisiert werden)
- Stop-Kommando ausführen
- Job Attribut enable modifizieren auf "no", Konfigurationsdatei synchronisieren (erst bei nächster Änderung der Datei ??)

- GUI wertet aus gestoppt und enable=no => disabled (gelb statt rot)

Implementierung
- XSD, enable-Attribut, enable/disable Kommando

- Job::set_dom
- Job::dom_element

- Job::set_state_cmd() - Signal an Spooler-Objekt "senden"
- Job::execute_state_cmd() - Signal auswerten 





Test
http://localhost:6360/<show_job job="job-js-551"/>

<modify_job cmd="disable" job="job-js-551"  />
<modify_job cmd="stop" job="job-js-551"  />


Dokumentation Ablauf (Stop-)Kommando


Spooler::initialize_subsystems
  Web_services::subsystem_initialize()
    New Command_processor
      Command_processor::execute_job ("add job ..." )
        _spooler->cmd_job()
******    Spooler::signal()  *********************************
            Spooler::_event.signal( signal_name );
            
            Event::signal()
                    Z_MUTEX( _mutex )
                    {
                        _signaled = true;
                        _signal_name = name;
                
                        if( current_thread_id() != _waiting_thread_id )
                        {
                            //Z_LOG2( "event", "Event(" << _name << "," << _signal_name << ").signal()  SetEvent()\n" );
                
                            BOOL ok = SetEvent( _handle );  
                            if( !ok )  throw_mswin( "SetEvent", _name.c_str() );
                        }
                    }
                    

sos::scheduler::Event : System_event (spooler_wait.h)

sos::scheduler::Event : zschimmer:windows:Event (Alias System_event)
       
       
Event_manager::add_event_operation             