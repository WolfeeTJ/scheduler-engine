// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "spooler.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Proxy_class> has_proxy< ::sos::scheduler::order::job_chain::End_node >::proxy_class_factory("com.sos.scheduler.engine.kernel.cppproxy.End_nodeCImpl");

}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jint JNICALL action(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::order::job_chain::End_node* o_ = has_proxy< ::sos::scheduler::order::job_chain::End_node >::of_cpp_reference(cppReference,"::sos::scheduler::order::job_chain::End_node::action()");
        return (o_->action());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jint();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jlong JNICALL delay(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::order::job_chain::End_node* o_ = has_proxy< ::sos::scheduler::order::job_chain::End_node >::of_cpp_reference(cppReference,"::sos::scheduler::order::job_chain::End_node::delay()");
        return (o_->delay().millis());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jlong();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL job_1chain_1path(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::order::job_chain::End_node* o_ = has_proxy< ::sos::scheduler::order::job_chain::End_node >::of_cpp_reference(cppReference,"::sos::scheduler::order::job_chain::End_node::job_chain_path()");
        return env.jstring_from_string(o_->job_chain_path());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static void JNICALL set_1action_1string__Ljava_lang_String_2(JNIEnv* jenv, jobject, jlong cppReference, jstring p0)
{
    Env env = jenv;
    try {
        ::sos::scheduler::order::job_chain::End_node* o_ = has_proxy< ::sos::scheduler::order::job_chain::End_node >::of_cpp_reference(cppReference,"::sos::scheduler::order::job_chain::End_node::set_action_string()");
        (o_->set_action_string(env.string_from_jstring(p0)));
    }
    catch(const exception& x) {
        env.set_java_exception(x);
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL string_1error_1state(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::order::job_chain::End_node* o_ = has_proxy< ::sos::scheduler::order::job_chain::End_node >::of_cpp_reference(cppReference,"::sos::scheduler::order::job_chain::End_node::string_error_state()");
        return env.jstring_from_string(o_->string_error_state());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL string_1next_1state(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::order::job_chain::End_node* o_ = has_proxy< ::sos::scheduler::order::job_chain::End_node >::of_cpp_reference(cppReference,"::sos::scheduler::order::job_chain::End_node::string_next_state()");
        return env.jstring_from_string(o_->string_next_state());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL string_1order_1state(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::order::job_chain::End_node* o_ = has_proxy< ::sos::scheduler::order::job_chain::End_node >::of_cpp_reference(cppReference,"::sos::scheduler::order::job_chain::End_node::string_order_state()");
        return env.jstring_from_string(o_->string_order_state());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

const static JNINativeMethod native_methods[] = {
    { (char*)"action__native", (char*)"(J)I", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::action },
    { (char*)"delay__native", (char*)"(J)J", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::delay },
    { (char*)"job_chain_path__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::job_1chain_1path },
    { (char*)"set_action_string__native", (char*)"(JLjava/lang/String;)V", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::set_1action_1string__Ljava_lang_String_2 },
    { (char*)"string_error_state__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::string_1error_1state },
    { (char*)"string_next_state__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::string_1next_1state },
    { (char*)"string_order_state__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::string_1order_1state }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_proxy< ::sos::scheduler::order::job_chain::End_node >::register_cpp_proxy_class_in_java() {
        Env env;
        Class* cls = has_proxy< ::sos::scheduler::order::job_chain::End_node >::proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, sizeof native_methods / sizeof native_methods[0]);
        if (ret < 0)  env.throw_java("RegisterNatives", "com.sos.scheduler.engine.kernel.cppproxy.End_nodeCImpl");
    }

}}
