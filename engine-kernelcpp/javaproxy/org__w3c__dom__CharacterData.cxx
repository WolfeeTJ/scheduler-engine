// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "org__w3c__dom__CharacterData.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "org__w3c__dom__Node.h"

namespace javaproxy { namespace org { namespace w3c { namespace dom { 

struct CharacterData__class : ::zschimmer::javabridge::Class
{
    CharacterData__class(const string& class_name);
   ~CharacterData__class();

    ::zschimmer::javabridge::Method const _appendData__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _deleteData__II__method;
    ::zschimmer::javabridge::Method const _getData____method;
    ::zschimmer::javabridge::Method const _getLength____method;
    ::zschimmer::javabridge::Method const _insertData__ILjava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _replaceData__IILjava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _setData__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _substringData__II__method;

    static const ::zschimmer::javabridge::class_factory< CharacterData__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< CharacterData__class > CharacterData__class::class_factory ("org.w3c.dom.CharacterData");

CharacterData__class::CharacterData__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_appendData__Ljava_lang_String_2__method(this, "appendData", "(Ljava/lang/String;)V")
    ,_deleteData__II__method(this, "deleteData", "(II)V")
    ,_getData____method(this, "getData", "()Ljava/lang/String;")
    ,_getLength____method(this, "getLength", "()I")
    ,_insertData__ILjava_lang_String_2__method(this, "insertData", "(ILjava/lang/String;)V")
    ,_replaceData__IILjava_lang_String_2__method(this, "replaceData", "(IILjava/lang/String;)V")
    ,_setData__Ljava_lang_String_2__method(this, "setData", "(Ljava/lang/String;)V")
    ,_substringData__II__method(this, "substringData", "(II)Ljava/lang/String;"){}

CharacterData__class::~CharacterData__class() {}




CharacterData::CharacterData(jobject jo) { if (jo) assign_(jo); }

CharacterData::CharacterData(const CharacterData& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    CharacterData::CharacterData(CharacterData&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

CharacterData::~CharacterData() { assign_(NULL); }




void CharacterData::appendData(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    CharacterData__class* cls = _class.get();
    cls->_appendData__Ljava_lang_String_2__method.call(get_jobject(), parameter_list);
}

void CharacterData::deleteData(jint p0, jint p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    CharacterData__class* cls = _class.get();
    cls->_deleteData__II__method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String CharacterData::getData() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    CharacterData__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_getData____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint CharacterData::getLength() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    CharacterData__class* cls = _class.get();
    return cls->_getLength____method.int_call(get_jobject(), parameter_list);
}

void CharacterData::insertData(jint p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].l = p1.get_jobject();
    CharacterData__class* cls = _class.get();
    cls->_insertData__ILjava_lang_String_2__method.call(get_jobject(), parameter_list);
}

void CharacterData::replaceData(jint p0, jint p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2) const {
    ::zschimmer::javabridge::raw_parameter_list<3> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    parameter_list._jvalues[2].l = p2.get_jobject();
    CharacterData__class* cls = _class.get();
    cls->_replaceData__IILjava_lang_String_2__method.call(get_jobject(), parameter_list);
}

void CharacterData::setData(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    CharacterData__class* cls = _class.get();
    cls->_setData__Ljava_lang_String_2__method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String CharacterData::substringData(jint p0, jint p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    CharacterData__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_substringData__II__method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* CharacterData::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* CharacterData::java_class_() { return CharacterData__class::class_factory.clas(); }


void CharacterData::Lazy_class::initialize() const {
    _value = CharacterData__class::class_factory.clas();
}


}}}}
