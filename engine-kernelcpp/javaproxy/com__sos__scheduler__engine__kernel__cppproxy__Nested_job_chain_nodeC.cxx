// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__cppproxy__Nested_job_chain_nodeC.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

struct Nested_job_chain_nodeC__class : ::zschimmer::javabridge::Class
{
    Nested_job_chain_nodeC__class(const string& class_name);
   ~Nested_job_chain_nodeC__class();


    static const ::zschimmer::javabridge::class_factory< Nested_job_chain_nodeC__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Nested_job_chain_nodeC__class > Nested_job_chain_nodeC__class::class_factory ("com.sos.scheduler.engine.kernel.cppproxy.Nested_job_chain_nodeC");

Nested_job_chain_nodeC__class::Nested_job_chain_nodeC__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
{}

Nested_job_chain_nodeC__class::~Nested_job_chain_nodeC__class() {}




Nested_job_chain_nodeC::Nested_job_chain_nodeC(jobject jo) { if (jo) assign_(jo); }

Nested_job_chain_nodeC::Nested_job_chain_nodeC(const Nested_job_chain_nodeC& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Nested_job_chain_nodeC::Nested_job_chain_nodeC(Nested_job_chain_nodeC&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Nested_job_chain_nodeC::~Nested_job_chain_nodeC() { assign_(NULL); }





::zschimmer::javabridge::Class* Nested_job_chain_nodeC::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Nested_job_chain_nodeC::java_class_() { return Nested_job_chain_nodeC__class::class_factory.clas(); }


void Nested_job_chain_nodeC::Lazy_class::initialize() const {
    _value = Nested_job_chain_nodeC__class::class_factory.clas();
}


}}}}}}}
