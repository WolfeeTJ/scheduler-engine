// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__http__SchedulerHttpRequest.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace http { 

struct SchedulerHttpRequest__class : ::zschimmer::javabridge::Class
{
    SchedulerHttpRequest__class(const string& class_name);
   ~SchedulerHttpRequest__class();

    ::zschimmer::javabridge::Method const _body____method;
    ::zschimmer::javabridge::Method const _charsetName____method;
    ::zschimmer::javabridge::Method const _hasParameter__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _header__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _httpMethod____method;
    ::zschimmer::javabridge::Method const _parameter__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _protocol____method;
    ::zschimmer::javabridge::Method const _urlPath____method;

    static const ::zschimmer::javabridge::class_factory< SchedulerHttpRequest__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< SchedulerHttpRequest__class > SchedulerHttpRequest__class::class_factory ("com.sos.scheduler.engine.kernel.http.SchedulerHttpRequest");

SchedulerHttpRequest__class::SchedulerHttpRequest__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_body____method(this, "body", "()Ljava/lang/String;")
    ,_charsetName____method(this, "charsetName", "()Ljava/lang/String;")
    ,_hasParameter__Ljava_lang_String_2__method(this, "hasParameter", "(Ljava/lang/String;)Z")
    ,_header__Ljava_lang_String_2__method(this, "header", "(Ljava/lang/String;)Ljava/lang/String;")
    ,_httpMethod____method(this, "httpMethod", "()Ljava/lang/String;")
    ,_parameter__Ljava_lang_String_2__method(this, "parameter", "(Ljava/lang/String;)Ljava/lang/String;")
    ,_protocol____method(this, "protocol", "()Ljava/lang/String;")
    ,_urlPath____method(this, "urlPath", "()Ljava/lang/String;"){}

SchedulerHttpRequest__class::~SchedulerHttpRequest__class() {}




SchedulerHttpRequest::SchedulerHttpRequest(jobject jo) { if (jo) assign_(jo); }

SchedulerHttpRequest::SchedulerHttpRequest(const SchedulerHttpRequest& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    SchedulerHttpRequest::SchedulerHttpRequest(SchedulerHttpRequest&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

SchedulerHttpRequest::~SchedulerHttpRequest() { assign_(NULL); }




::javaproxy::java::lang::String SchedulerHttpRequest::body() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    SchedulerHttpRequest__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_body____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String SchedulerHttpRequest::charsetName() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    SchedulerHttpRequest__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_charsetName____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool SchedulerHttpRequest::hasParameter(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    SchedulerHttpRequest__class* cls = _class.get();
    return 0 != cls->_hasParameter__Ljava_lang_String_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String SchedulerHttpRequest::header(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    SchedulerHttpRequest__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_header__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String SchedulerHttpRequest::httpMethod() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    SchedulerHttpRequest__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_httpMethod____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String SchedulerHttpRequest::parameter(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    SchedulerHttpRequest__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_parameter__Ljava_lang_String_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String SchedulerHttpRequest::protocol() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    SchedulerHttpRequest__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_protocol____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String SchedulerHttpRequest::urlPath() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    SchedulerHttpRequest__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_urlPath____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* SchedulerHttpRequest::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* SchedulerHttpRequest::java_class_() { return SchedulerHttpRequest__class::class_factory.clas(); }


void SchedulerHttpRequest::Lazy_class::initialize() const {
    _value = SchedulerHttpRequest__class::class_factory.clas();
}


}}}}}}}
