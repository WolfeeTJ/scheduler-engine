// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__lang__Boolean.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace java { namespace lang { 

struct Boolean__class : ::zschimmer::javabridge::Class
{
    Boolean__class(const string& class_name);
   ~Boolean__class();

    ::zschimmer::javabridge::Method const __constructor__Z__method;
    ::zschimmer::javabridge::Method const __constructor__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _booleanValue____method;
    ::zschimmer::javabridge::Static_method const _compare__ZZ__method;
    ::zschimmer::javabridge::Method const _compareTo__Ljava_lang_Boolean_2__method;
    ::zschimmer::javabridge::Method const _compareTo__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Static_method const _getBoolean__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Static_method const _hashCode__Z__method;
    ::zschimmer::javabridge::Static_method const _logicalAnd__ZZ__method;
    ::zschimmer::javabridge::Static_method const _logicalOr__ZZ__method;
    ::zschimmer::javabridge::Static_method const _logicalXor__ZZ__method;
    ::zschimmer::javabridge::Static_method const _parseBoolean__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Method const _toString____method;
    ::zschimmer::javabridge::Static_method const _toString__Z__method;
    ::zschimmer::javabridge::Static_method const _valueOf__Z__method;
    ::zschimmer::javabridge::Static_method const _valueOf__Ljava_lang_String_2__method;

    static const ::zschimmer::javabridge::class_factory< Boolean__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Boolean__class > Boolean__class::class_factory ("java.lang.Boolean");

Boolean__class::Boolean__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor__Z__method(this, "<init>", "(Z)V")
    ,__constructor__Ljava_lang_String_2__method(this, "<init>", "(Ljava/lang/String;)V")
    ,_booleanValue____method(this, "booleanValue", "()Z")
    ,_compare__ZZ__method(this, "compare", "(ZZ)I")
    ,_compareTo__Ljava_lang_Boolean_2__method(this, "compareTo", "(Ljava/lang/Boolean;)I")
    ,_compareTo__Ljava_lang_Object_2__method(this, "compareTo", "(Ljava/lang/Object;)I")
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_getBoolean__Ljava_lang_String_2__method(this, "getBoolean", "(Ljava/lang/String;)Z")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_hashCode__Z__method(this, "hashCode", "(Z)I")
    ,_logicalAnd__ZZ__method(this, "logicalAnd", "(ZZ)Z")
    ,_logicalOr__ZZ__method(this, "logicalOr", "(ZZ)Z")
    ,_logicalXor__ZZ__method(this, "logicalXor", "(ZZ)Z")
    ,_parseBoolean__Ljava_lang_String_2__method(this, "parseBoolean", "(Ljava/lang/String;)Z")
    ,_toString____method(this, "toString", "()Ljava/lang/String;")
    ,_toString__Z__method(this, "toString", "(Z)Ljava/lang/String;")
    ,_valueOf__Z__method(this, "valueOf", "(Z)Ljava/lang/Boolean;")
    ,_valueOf__Ljava_lang_String_2__method(this, "valueOf", "(Ljava/lang/String;)Ljava/lang/Boolean;"){}

Boolean__class::~Boolean__class() {}



Boolean Boolean::new_instance(jboolean p0) {
    Boolean result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].z = p0;
    Boolean__class* cls = result._class.get();
    cls->__constructor__Z__method.call(result.get_jobject(), parameter_list);
    return result;
}

Boolean Boolean::new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    Boolean result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Boolean__class* cls = result._class.get();
    cls->__constructor__Ljava_lang_String_2__method.call(result.get_jobject(), parameter_list);
    return result;
}


Boolean::Boolean(jobject jo) { if (jo) assign_(jo); }

Boolean::Boolean(const Boolean& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Boolean::Boolean(Boolean&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Boolean::~Boolean() { assign_(NULL); }




bool Boolean::booleanValue() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Boolean__class* cls = _class.get();
    return 0 != cls->_booleanValue____method.bool_call(get_jobject(), parameter_list);
}

jint Boolean::compare(jboolean p0, jboolean p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].z = p0;
    parameter_list._jvalues[1].z = p1;
    Boolean__class* cls = Boolean__class::class_factory.clas();
    return cls->_compare__ZZ__method.int_call(cls->get_jclass(), parameter_list);
}

jint Boolean::compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Boolean >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Boolean__class* cls = _class.get();
    return cls->_compareTo__Ljava_lang_Boolean_2__method.int_call(get_jobject(), parameter_list);
}

jint Boolean::compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Boolean__class* cls = _class.get();
    return cls->_compareTo__Ljava_lang_Object_2__method.int_call(get_jobject(), parameter_list);
}

bool Boolean::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Boolean__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

bool Boolean::getBoolean(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Boolean__class* cls = Boolean__class::class_factory.clas();
    return 0 != cls->_getBoolean__Ljava_lang_String_2__method.bool_call(cls->get_jclass(), parameter_list);
}

jint Boolean::hashCode() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Boolean__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

jint Boolean::hashCode(jboolean p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].z = p0;
    Boolean__class* cls = Boolean__class::class_factory.clas();
    return cls->_hashCode__Z__method.int_call(cls->get_jclass(), parameter_list);
}

bool Boolean::logicalAnd(jboolean p0, jboolean p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].z = p0;
    parameter_list._jvalues[1].z = p1;
    Boolean__class* cls = Boolean__class::class_factory.clas();
    return 0 != cls->_logicalAnd__ZZ__method.bool_call(cls->get_jclass(), parameter_list);
}

bool Boolean::logicalOr(jboolean p0, jboolean p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].z = p0;
    parameter_list._jvalues[1].z = p1;
    Boolean__class* cls = Boolean__class::class_factory.clas();
    return 0 != cls->_logicalOr__ZZ__method.bool_call(cls->get_jclass(), parameter_list);
}

bool Boolean::logicalXor(jboolean p0, jboolean p1) {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].z = p0;
    parameter_list._jvalues[1].z = p1;
    Boolean__class* cls = Boolean__class::class_factory.clas();
    return 0 != cls->_logicalXor__ZZ__method.bool_call(cls->get_jclass(), parameter_list);
}

bool Boolean::parseBoolean(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Boolean__class* cls = Boolean__class::class_factory.clas();
    return 0 != cls->_parseBoolean__Ljava_lang_String_2__method.bool_call(cls->get_jclass(), parameter_list);
}

::javaproxy::java::lang::String Boolean::toString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    Boolean__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String Boolean::toString(jboolean p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].z = p0;
    Boolean__class* cls = Boolean__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString__Z__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::lang::Boolean Boolean::valueOf(jboolean p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].z = p0;
    Boolean__class* cls = Boolean__class::class_factory.clas();
    ::javaproxy::java::lang::Boolean result;
    result.steal_local_ref(cls->_valueOf__Z__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::lang::Boolean Boolean::valueOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    Boolean__class* cls = Boolean__class::class_factory.clas();
    ::javaproxy::java::lang::Boolean result;
    result.steal_local_ref(cls->_valueOf__Ljava_lang_String_2__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* Boolean::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Boolean::java_class_() { return Boolean__class::class_factory.clas(); }


void Boolean::Lazy_class::initialize() const {
    _value = Boolean__class::class_factory.clas();
}


}}}
