// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__cppproxy__Folder_subsystemC.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

struct Folder_subsystemC__class : ::zschimmer::javabridge::Class
{
    Folder_subsystemC__class(const string& class_name);
   ~Folder_subsystemC__class();


    static const ::zschimmer::javabridge::class_factory< Folder_subsystemC__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< Folder_subsystemC__class > Folder_subsystemC__class::class_factory ("com.sos.scheduler.engine.kernel.cppproxy.Folder_subsystemC");

Folder_subsystemC__class::Folder_subsystemC__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
{}

Folder_subsystemC__class::~Folder_subsystemC__class() {}




Folder_subsystemC::Folder_subsystemC(jobject jo) { if (jo) assign_(jo); }

Folder_subsystemC::Folder_subsystemC(const Folder_subsystemC& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    Folder_subsystemC::Folder_subsystemC(Folder_subsystemC&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

Folder_subsystemC::~Folder_subsystemC() { assign_(NULL); }





::zschimmer::javabridge::Class* Folder_subsystemC::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* Folder_subsystemC::java_class_() { return Folder_subsystemC__class::class_factory.clas(); }


void Folder_subsystemC::Lazy_class::initialize() const {
    _value = Folder_subsystemC__class::class_factory.clas();
}


}}}}}}}
