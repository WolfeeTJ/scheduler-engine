// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__cppproxy__TaskC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__JobC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__OrderC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Prefix_logC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Variable_setC.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

struct TaskC__class : ::zschimmer::javabridge::Class
{
    TaskC__class(const string& class_name);
   ~TaskC__class();


    static const ::zschimmer::javabridge::class_factory< TaskC__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< TaskC__class > TaskC__class::class_factory ("com.sos.scheduler.engine.kernel.cppproxy.TaskC");

TaskC__class::TaskC__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
{}

TaskC__class::~TaskC__class() {}




TaskC::TaskC(jobject jo) { if (jo) assign_(jo); }

TaskC::TaskC(const TaskC& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    TaskC::TaskC(TaskC&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

TaskC::~TaskC() { assign_(NULL); }





::zschimmer::javabridge::Class* TaskC::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* TaskC::java_class_() { return TaskC__class::class_factory.clas(); }


void TaskC::Lazy_class::initialize() const {
    _value = TaskC__class::class_factory.clas();
}


}}}}}}}
