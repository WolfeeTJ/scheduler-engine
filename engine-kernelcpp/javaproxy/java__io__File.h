// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#ifndef _JAVAPROXY_JAVA_IO_FILE_H_
#define _JAVAPROXY_JAVA_IO_FILE_H_

#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"
#include "java__lang__Object.h"

namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}
namespace javaproxy { namespace java { namespace net { struct URI; }}}
namespace javaproxy { namespace java { namespace net { struct URL; }}}


namespace javaproxy { namespace java { namespace io { 


struct File__class;

struct File : ::zschimmer::javabridge::proxy_jobject< File >, ::javaproxy::java::lang::Object {
    static File new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::io::File >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1);
    static File new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0);
    static File new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1);
    static File new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::net::URI >& p0);

    File(jobject = NULL);

    File(const File&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        File(File&&);
    #endif

    ~File();

    File& operator=(jobject jo) { assign_(jo); return *this; }
    File& operator=(const File& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        File& operator=(File&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< File >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< File >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    bool canExecute() const;
    bool canRead() const;
    bool canWrite() const;
    jint compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::io::File >& p0) const;
    jint compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;
    bool createNewFile() const;
    static ::javaproxy::java::io::File createTempFile(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1);
    static ::javaproxy::java::io::File createTempFile(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::io::File >& p2);
    bool delete_() const;
    void deleteOnExit() const;
    bool equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;
    bool exists() const;
    ::javaproxy::java::io::File getAbsoluteFile() const;
    ::javaproxy::java::lang::String getAbsolutePath() const;
    ::javaproxy::java::io::File getCanonicalFile() const;
    ::javaproxy::java::lang::String getCanonicalPath() const;
    jlong getFreeSpace() const;
    ::javaproxy::java::lang::String getName() const;
    ::javaproxy::java::lang::String getParent() const;
    ::javaproxy::java::io::File getParentFile() const;
    ::javaproxy::java::lang::String getPath() const;
    jlong getTotalSpace() const;
    jlong getUsableSpace() const;
    jint hashCode() const;
    bool isAbsolute() const;
    bool isDirectory() const;
    bool isFile() const;
    bool isHidden() const;
    jlong lastModified() const;
    jlong length() const;
    bool mkdir() const;
    bool mkdirs() const;
    bool renameTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::io::File >& p0) const;
    bool setExecutable(jboolean p0) const;
    bool setExecutable(jboolean p0, jboolean p1) const;
    bool setLastModified(jlong p0) const;
    bool setReadOnly() const;
    bool setReadable(jboolean p0) const;
    bool setReadable(jboolean p0, jboolean p1) const;
    bool setWritable(jboolean p0) const;
    bool setWritable(jboolean p0, jboolean p1) const;
    ::javaproxy::java::lang::String toString() const;
    ::javaproxy::java::net::URI toURI() const;
    ::javaproxy::java::net::URL toURL() const;

    ::zschimmer::javabridge::Class* java_object_class_() const;

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<File__class*> {
        void initialize() const;
    };

    Lazy_class _class;
};


}}}

#endif
