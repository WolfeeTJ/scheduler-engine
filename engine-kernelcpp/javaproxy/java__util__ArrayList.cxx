// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__util__ArrayList.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "java__util__AbstractList.h"
#include "java__util__List.h"

namespace javaproxy { namespace java { namespace util { 

struct ArrayList__class : ::zschimmer::javabridge::Class
{
    ArrayList__class(const string& class_name);
   ~ArrayList__class();

    ::zschimmer::javabridge::Method const __constructor____method;
    ::zschimmer::javabridge::Method const __constructor__I__method;
    ::zschimmer::javabridge::Method const _add__ILjava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _add__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _clear____method;
    ::zschimmer::javabridge::Method const _clone____method;
    ::zschimmer::javabridge::Method const _contains__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _ensureCapacity__I__method;
    ::zschimmer::javabridge::Method const _get__I__method;
    ::zschimmer::javabridge::Method const _indexOf__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _isEmpty____method;
    ::zschimmer::javabridge::Method const _lastIndexOf__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _remove__I__method;
    ::zschimmer::javabridge::Method const _remove__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _set__ILjava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _size____method;
    ::zschimmer::javabridge::Method const _subList__II__method;
    ::zschimmer::javabridge::Method const _trimToSize____method;

    static const ::zschimmer::javabridge::class_factory< ArrayList__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< ArrayList__class > ArrayList__class::class_factory ("java.util.ArrayList");

ArrayList__class::ArrayList__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor____method(this, "<init>", "()V")
    ,__constructor__I__method(this, "<init>", "(I)V")
    ,_add__ILjava_lang_Object_2__method(this, "add", "(ILjava/lang/Object;)V")
    ,_add__Ljava_lang_Object_2__method(this, "add", "(Ljava/lang/Object;)Z")
    ,_clear____method(this, "clear", "()V")
    ,_clone____method(this, "clone", "()Ljava/lang/Object;")
    ,_contains__Ljava_lang_Object_2__method(this, "contains", "(Ljava/lang/Object;)Z")
    ,_ensureCapacity__I__method(this, "ensureCapacity", "(I)V")
    ,_get__I__method(this, "get", "(I)Ljava/lang/Object;")
    ,_indexOf__Ljava_lang_Object_2__method(this, "indexOf", "(Ljava/lang/Object;)I")
    ,_isEmpty____method(this, "isEmpty", "()Z")
    ,_lastIndexOf__Ljava_lang_Object_2__method(this, "lastIndexOf", "(Ljava/lang/Object;)I")
    ,_remove__I__method(this, "remove", "(I)Ljava/lang/Object;")
    ,_remove__Ljava_lang_Object_2__method(this, "remove", "(Ljava/lang/Object;)Z")
    ,_set__ILjava_lang_Object_2__method(this, "set", "(ILjava/lang/Object;)Ljava/lang/Object;")
    ,_size____method(this, "size", "()I")
    ,_subList__II__method(this, "subList", "(II)Ljava/util/List;")
    ,_trimToSize____method(this, "trimToSize", "()V"){}

ArrayList__class::~ArrayList__class() {}



ArrayList ArrayList::new_instance() {
    ArrayList result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ArrayList__class* cls = result._class.get();
    cls->__constructor____method.call(result.get_jobject(), parameter_list);
    return result;
}

ArrayList ArrayList::new_instance(jint p0) {
    ArrayList result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    ArrayList__class* cls = result._class.get();
    cls->__constructor__I__method.call(result.get_jobject(), parameter_list);
    return result;
}


ArrayList::ArrayList(jobject jo) { if (jo) assign_(jo); }

ArrayList::ArrayList(const ArrayList& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    ArrayList::ArrayList(ArrayList&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

ArrayList::~ArrayList() { assign_(NULL); }




void ArrayList::add(jint p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].l = p1.get_jobject();
    ArrayList__class* cls = _class.get();
    cls->_add__ILjava_lang_Object_2__method.call(get_jobject(), parameter_list);
}

bool ArrayList::add(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ArrayList__class* cls = _class.get();
    return 0 != cls->_add__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

void ArrayList::clear() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ArrayList__class* cls = _class.get();
    cls->_clear____method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object ArrayList::clone() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ArrayList__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_clone____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool ArrayList::contains(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ArrayList__class* cls = _class.get();
    return 0 != cls->_contains__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

void ArrayList::ensureCapacity(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    ArrayList__class* cls = _class.get();
    cls->_ensureCapacity__I__method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object ArrayList::get(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    ArrayList__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_get__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint ArrayList::indexOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ArrayList__class* cls = _class.get();
    return cls->_indexOf__Ljava_lang_Object_2__method.int_call(get_jobject(), parameter_list);
}

bool ArrayList::isEmpty() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ArrayList__class* cls = _class.get();
    return 0 != cls->_isEmpty____method.bool_call(get_jobject(), parameter_list);
}

jint ArrayList::lastIndexOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ArrayList__class* cls = _class.get();
    return cls->_lastIndexOf__Ljava_lang_Object_2__method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object ArrayList::remove(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    ArrayList__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_remove__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool ArrayList::remove(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ArrayList__class* cls = _class.get();
    return 0 != cls->_remove__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object ArrayList::set(jint p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].l = p1.get_jobject();
    ArrayList__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_set__ILjava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint ArrayList::size() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ArrayList__class* cls = _class.get();
    return cls->_size____method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::util::List ArrayList::subList(jint p0, jint p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    ArrayList__class* cls = _class.get();
    ::javaproxy::java::util::List result;
    result.steal_local_ref(cls->_subList__II__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

void ArrayList::trimToSize() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ArrayList__class* cls = _class.get();
    cls->_trimToSize____method.call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* ArrayList::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* ArrayList::java_class_() { return ArrayList__class::class_factory.clas(); }


void ArrayList::Lazy_class::initialize() const {
    _value = ArrayList__class::class_factory.clas();
}


}}}
