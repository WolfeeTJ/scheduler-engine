// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__plugin__PluginSubsystem.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace plugin { 

struct PluginSubsystem__class : ::zschimmer::javabridge::Class
{
    PluginSubsystem__class(const string& class_name);
   ~PluginSubsystem__class();

    ::zschimmer::javabridge::Method const _changeObjectXmlBytes__Ljava_lang_String_2Ljava_lang_String_2_3B__method;

    static const ::zschimmer::javabridge::class_factory< PluginSubsystem__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< PluginSubsystem__class > PluginSubsystem__class::class_factory ("com.sos.scheduler.engine.kernel.plugin.PluginSubsystem");

PluginSubsystem__class::PluginSubsystem__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_changeObjectXmlBytes__Ljava_lang_String_2Ljava_lang_String_2_3B__method(this, "changeObjectXmlBytes", "(Ljava/lang/String;Ljava/lang/String;[B)[B"){}

PluginSubsystem__class::~PluginSubsystem__class() {}




PluginSubsystem::PluginSubsystem(jobject jo) { if (jo) assign_(jo); }

PluginSubsystem::PluginSubsystem(const PluginSubsystem& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    PluginSubsystem::PluginSubsystem(PluginSubsystem&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

PluginSubsystem::~PluginSubsystem() { assign_(NULL); }




string PluginSubsystem::changeObjectXmlBytes(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::Local_java_byte_array& p2) const {
    ::zschimmer::javabridge::raw_parameter_list<3> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].l = p2.get_jbyteArray();
    PluginSubsystem__class* cls = _class.get();
    jbyteArray resultJ = (jbyteArray)cls->_changeObjectXmlBytes__Ljava_lang_String_2Ljava_lang_String_2_3B__method.jobject_call(get_jobject(), parameter_list);
    string result = ::zschimmer::javabridge::string_from_java_byte_array(resultJ);
    ::zschimmer::javabridge::Env()->DeleteLocalRef(resultJ);
    return result;
}


::zschimmer::javabridge::Class* PluginSubsystem::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* PluginSubsystem::java_class_() { return PluginSubsystem__class::class_factory.clas(); }


void PluginSubsystem::Lazy_class::initialize() const {
    _value = PluginSubsystem__class::class_factory.clas();
}


}}}}}}}
