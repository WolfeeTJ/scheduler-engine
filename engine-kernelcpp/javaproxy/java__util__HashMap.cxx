// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__util__HashMap.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "java__util__AbstractMap.h"

namespace javaproxy { namespace java { namespace util { 

struct HashMap__class : ::zschimmer::javabridge::Class
{
    HashMap__class(const string& class_name);
   ~HashMap__class();

    ::zschimmer::javabridge::Method const __constructor____method;
    ::zschimmer::javabridge::Method const __constructor__I__method;
    ::zschimmer::javabridge::Method const __constructor__IF__method;
    ::zschimmer::javabridge::Method const _clear____method;
    ::zschimmer::javabridge::Method const _clone____method;
    ::zschimmer::javabridge::Method const _containsKey__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _containsValue__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _get__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _getOrDefault__Ljava_lang_Object_2Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _isEmpty____method;
    ::zschimmer::javabridge::Method const _put__Ljava_lang_Object_2Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _putIfAbsent__Ljava_lang_Object_2Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _remove__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _remove__Ljava_lang_Object_2Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _replace__Ljava_lang_Object_2Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _replace__Ljava_lang_Object_2Ljava_lang_Object_2Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _size____method;

    static const ::zschimmer::javabridge::class_factory< HashMap__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< HashMap__class > HashMap__class::class_factory ("java.util.HashMap");

HashMap__class::HashMap__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,__constructor____method(this, "<init>", "()V")
    ,__constructor__I__method(this, "<init>", "(I)V")
    ,__constructor__IF__method(this, "<init>", "(IF)V")
    ,_clear____method(this, "clear", "()V")
    ,_clone____method(this, "clone", "()Ljava/lang/Object;")
    ,_containsKey__Ljava_lang_Object_2__method(this, "containsKey", "(Ljava/lang/Object;)Z")
    ,_containsValue__Ljava_lang_Object_2__method(this, "containsValue", "(Ljava/lang/Object;)Z")
    ,_get__Ljava_lang_Object_2__method(this, "get", "(Ljava/lang/Object;)Ljava/lang/Object;")
    ,_getOrDefault__Ljava_lang_Object_2Ljava_lang_Object_2__method(this, "getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
    ,_isEmpty____method(this, "isEmpty", "()Z")
    ,_put__Ljava_lang_Object_2Ljava_lang_Object_2__method(this, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
    ,_putIfAbsent__Ljava_lang_Object_2Ljava_lang_Object_2__method(this, "putIfAbsent", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
    ,_remove__Ljava_lang_Object_2__method(this, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;")
    ,_remove__Ljava_lang_Object_2Ljava_lang_Object_2__method(this, "remove", "(Ljava/lang/Object;Ljava/lang/Object;)Z")
    ,_replace__Ljava_lang_Object_2Ljava_lang_Object_2__method(this, "replace", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
    ,_replace__Ljava_lang_Object_2Ljava_lang_Object_2Ljava_lang_Object_2__method(this, "replace", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z")
    ,_size____method(this, "size", "()I"){}

HashMap__class::~HashMap__class() {}



HashMap HashMap::new_instance() {
    HashMap result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    HashMap__class* cls = result._class.get();
    cls->__constructor____method.call(result.get_jobject(), parameter_list);
    return result;
}

HashMap HashMap::new_instance(jint p0) {
    HashMap result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    HashMap__class* cls = result._class.get();
    cls->__constructor__I__method.call(result.get_jobject(), parameter_list);
    return result;
}

HashMap HashMap::new_instance(jint p0, jfloat p1) {
    HashMap result;
    result.java_object_allocate_();
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].f = p1;
    HashMap__class* cls = result._class.get();
    cls->__constructor__IF__method.call(result.get_jobject(), parameter_list);
    return result;
}


HashMap::HashMap(jobject jo) { if (jo) assign_(jo); }

HashMap::HashMap(const HashMap& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    HashMap::HashMap(HashMap&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

HashMap::~HashMap() { assign_(NULL); }




void HashMap::clear() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    HashMap__class* cls = _class.get();
    cls->_clear____method.call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object HashMap::clone() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    HashMap__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_clone____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool HashMap::containsKey(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    HashMap__class* cls = _class.get();
    return 0 != cls->_containsKey__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

bool HashMap::containsValue(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    HashMap__class* cls = _class.get();
    return 0 != cls->_containsValue__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object HashMap::get(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    HashMap__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_get__Ljava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object HashMap::getOrDefault(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    HashMap__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_getOrDefault__Ljava_lang_Object_2Ljava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool HashMap::isEmpty() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    HashMap__class* cls = _class.get();
    return 0 != cls->_isEmpty____method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object HashMap::put(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    HashMap__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_put__Ljava_lang_Object_2Ljava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object HashMap::putIfAbsent(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    HashMap__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_putIfAbsent__Ljava_lang_Object_2Ljava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::Object HashMap::remove(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    HashMap__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_remove__Ljava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool HashMap::remove(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    HashMap__class* cls = _class.get();
    return 0 != cls->_remove__Ljava_lang_Object_2Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object HashMap::replace(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    HashMap__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_replace__Ljava_lang_Object_2Ljava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool HashMap::replace(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p2) const {
    ::zschimmer::javabridge::raw_parameter_list<3> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    parameter_list._jvalues[1].l = p1.get_jobject();
    parameter_list._jvalues[2].l = p2.get_jobject();
    HashMap__class* cls = _class.get();
    return 0 != cls->_replace__Ljava_lang_Object_2Ljava_lang_Object_2Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

jint HashMap::size() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    HashMap__class* cls = _class.get();
    return cls->_size____method.int_call(get_jobject(), parameter_list);
}


::zschimmer::javabridge::Class* HashMap::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* HashMap::java_class_() { return HashMap__class::class_factory.clas(); }


void HashMap::Lazy_class::initialize() const {
    _value = HashMap__class::class_factory.clas();
}


}}}
