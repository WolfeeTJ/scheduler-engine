// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__data__job__TaskPersistentState.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "org__joda__time__ReadableInstant.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace data { namespace job { 

struct TaskPersistentState__class : ::zschimmer::javabridge::Class
{
    TaskPersistentState__class(const string& class_name);
   ~TaskPersistentState__class();

    ::zschimmer::javabridge::Method const _enqueueTime____method;
    ::zschimmer::javabridge::Method const _enqueueTimeMillis____method;
    ::zschimmer::javabridge::Method const _parametersXml____method;
    ::zschimmer::javabridge::Method const _startTimeMillis____method;
    ::zschimmer::javabridge::Method const _taskIdNumber____method;
    ::zschimmer::javabridge::Method const _xml____method;

    static const ::zschimmer::javabridge::class_factory< TaskPersistentState__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< TaskPersistentState__class > TaskPersistentState__class::class_factory ("com.sos.scheduler.engine.data.job.TaskPersistentState");

TaskPersistentState__class::TaskPersistentState__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_enqueueTime____method(this, "enqueueTime", "()Lorg/joda/time/ReadableInstant;")
    ,_enqueueTimeMillis____method(this, "enqueueTimeMillis", "()J")
    ,_parametersXml____method(this, "parametersXml", "()Ljava/lang/String;")
    ,_startTimeMillis____method(this, "startTimeMillis", "()J")
    ,_taskIdNumber____method(this, "taskIdNumber", "()I")
    ,_xml____method(this, "xml", "()Ljava/lang/String;"){}

TaskPersistentState__class::~TaskPersistentState__class() {}




TaskPersistentState::TaskPersistentState(jobject jo) { if (jo) assign_(jo); }

TaskPersistentState::TaskPersistentState(const TaskPersistentState& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    TaskPersistentState::TaskPersistentState(TaskPersistentState&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

TaskPersistentState::~TaskPersistentState() { assign_(NULL); }




::javaproxy::org::joda::time::ReadableInstant TaskPersistentState::enqueueTime() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskPersistentState__class* cls = _class.get();
    ::javaproxy::org::joda::time::ReadableInstant result;
    result.steal_local_ref(cls->_enqueueTime____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jlong TaskPersistentState::enqueueTimeMillis() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskPersistentState__class* cls = _class.get();
    return cls->_enqueueTimeMillis____method.long_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String TaskPersistentState::parametersXml() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskPersistentState__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_parametersXml____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jlong TaskPersistentState::startTimeMillis() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskPersistentState__class* cls = _class.get();
    return cls->_startTimeMillis____method.long_call(get_jobject(), parameter_list);
}

jint TaskPersistentState::taskIdNumber() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskPersistentState__class* cls = _class.get();
    return cls->_taskIdNumber____method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String TaskPersistentState::xml() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    TaskPersistentState__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_xml____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* TaskPersistentState::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* TaskPersistentState::java_class_() { return TaskPersistentState__class::class_factory.clas(); }


void TaskPersistentState::Lazy_class::initialize() const {
    _value = TaskPersistentState__class::class_factory.clas();
}


}}}}}}}
