// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "org__joda__time__ReadableInstant.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace org { namespace joda { namespace time { 

struct ReadableInstant__class : ::zschimmer::javabridge::Class
{
    ReadableInstant__class(const string& class_name);
   ~ReadableInstant__class();

    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _getMillis____method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Method const _isAfter__Lorg_joda_time_ReadableInstant_2__method;
    ::zschimmer::javabridge::Method const _isBefore__Lorg_joda_time_ReadableInstant_2__method;
    ::zschimmer::javabridge::Method const _isEqual__Lorg_joda_time_ReadableInstant_2__method;
    ::zschimmer::javabridge::Method const _toString____method;

    static const ::zschimmer::javabridge::class_factory< ReadableInstant__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< ReadableInstant__class > ReadableInstant__class::class_factory ("org.joda.time.ReadableInstant");

ReadableInstant__class::ReadableInstant__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_getMillis____method(this, "getMillis", "()J")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_isAfter__Lorg_joda_time_ReadableInstant_2__method(this, "isAfter", "(Lorg/joda/time/ReadableInstant;)Z")
    ,_isBefore__Lorg_joda_time_ReadableInstant_2__method(this, "isBefore", "(Lorg/joda/time/ReadableInstant;)Z")
    ,_isEqual__Lorg_joda_time_ReadableInstant_2__method(this, "isEqual", "(Lorg/joda/time/ReadableInstant;)Z")
    ,_toString____method(this, "toString", "()Ljava/lang/String;"){}

ReadableInstant__class::~ReadableInstant__class() {}




ReadableInstant::ReadableInstant(jobject jo) { if (jo) assign_(jo); }

ReadableInstant::ReadableInstant(const ReadableInstant& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    ReadableInstant::ReadableInstant(ReadableInstant&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

ReadableInstant::~ReadableInstant() { assign_(NULL); }




bool ReadableInstant::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ReadableInstant__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

jlong ReadableInstant::getMillis() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ReadableInstant__class* cls = _class.get();
    return cls->_getMillis____method.long_call(get_jobject(), parameter_list);
}

jint ReadableInstant::hashCode() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ReadableInstant__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

bool ReadableInstant::isAfter(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::joda::time::ReadableInstant >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ReadableInstant__class* cls = _class.get();
    return 0 != cls->_isAfter__Lorg_joda_time_ReadableInstant_2__method.bool_call(get_jobject(), parameter_list);
}

bool ReadableInstant::isBefore(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::joda::time::ReadableInstant >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ReadableInstant__class* cls = _class.get();
    return 0 != cls->_isBefore__Lorg_joda_time_ReadableInstant_2__method.bool_call(get_jobject(), parameter_list);
}

bool ReadableInstant::isEqual(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::joda::time::ReadableInstant >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    ReadableInstant__class* cls = _class.get();
    return 0 != cls->_isEqual__Lorg_joda_time_ReadableInstant_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::String ReadableInstant::toString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    ReadableInstant__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* ReadableInstant::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* ReadableInstant::java_class_() { return ReadableInstant__class::class_factory.clas(); }


void ReadableInstant::Lazy_class::initialize() const {
    _value = ReadableInstant__class::class_factory.clas();
}


}}}}
