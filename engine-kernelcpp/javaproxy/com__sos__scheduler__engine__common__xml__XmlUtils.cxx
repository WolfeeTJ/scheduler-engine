// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__common__xml__XmlUtils.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace common { namespace xml { 

struct XmlUtils__class : ::zschimmer::javabridge::Class
{
    XmlUtils__class(const string& class_name);
   ~XmlUtils__class();

    ::zschimmer::javabridge::Static_method const _removeXmlProlog__Ljava_lang_String_2__method;
    ::zschimmer::javabridge::Static_method const _xmlBytesToString___3B__method;
    ::zschimmer::javabridge::Static_method const _xmlStringToBoolean__Ljava_lang_String_2__method;

    static const ::zschimmer::javabridge::class_factory< XmlUtils__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< XmlUtils__class > XmlUtils__class::class_factory ("com.sos.scheduler.engine.common.xml.XmlUtils");

XmlUtils__class::XmlUtils__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_removeXmlProlog__Ljava_lang_String_2__method(this, "removeXmlProlog", "(Ljava/lang/String;)Ljava/lang/String;")
    ,_xmlBytesToString___3B__method(this, "xmlBytesToString", "([B)Ljava/lang/String;")
    ,_xmlStringToBoolean__Ljava_lang_String_2__method(this, "xmlStringToBoolean", "(Ljava/lang/String;)Z"){}

XmlUtils__class::~XmlUtils__class() {}




XmlUtils::XmlUtils(jobject jo) { if (jo) assign_(jo); }

XmlUtils::XmlUtils(const XmlUtils& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    XmlUtils::XmlUtils(XmlUtils&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

XmlUtils::~XmlUtils() { assign_(NULL); }




::javaproxy::java::lang::String XmlUtils::removeXmlProlog(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    XmlUtils__class* cls = XmlUtils__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_removeXmlProlog__Ljava_lang_String_2__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

::javaproxy::java::lang::String XmlUtils::xmlBytesToString(const ::zschimmer::javabridge::Local_java_byte_array& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jbyteArray();
    XmlUtils__class* cls = XmlUtils__class::class_factory.clas();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_xmlBytesToString___3B__method.jobject_call(cls->get_jclass(), parameter_list));
    return result;
}

bool XmlUtils::xmlStringToBoolean(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    XmlUtils__class* cls = XmlUtils__class::class_factory.clas();
    return 0 != cls->_xmlStringToBoolean__Ljava_lang_String_2__method.bool_call(cls->get_jclass(), parameter_list);
}


::zschimmer::javabridge::Class* XmlUtils::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* XmlUtils::java_class_() { return XmlUtils__class::class_factory.clas(); }


void XmlUtils::Lazy_class::initialize() const {
    _value = XmlUtils__class::class_factory.clas();
}


}}}}}}}
