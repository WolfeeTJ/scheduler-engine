// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#ifndef _JAVAPROXY_JAVA_LANG_CLASS_H_
#define _JAVAPROXY_JAVA_LANG_CLASS_H_

#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"
#include "java__lang__Object.h"

namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}
namespace javaproxy { namespace java { namespace net { struct URL; }}}


namespace javaproxy { namespace java { namespace lang { 


struct Class__class;

struct Class : ::zschimmer::javabridge::proxy_jobject< Class >, ::javaproxy::java::lang::Object {
  private:
    static Class new_instance();  // Not implemented
  public:

    Class(jobject = NULL);

    Class(const Class&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Class(Class&&);
    #endif

    ~Class();

    Class& operator=(jobject jo) { assign_(jo); return *this; }
    Class& operator=(const Class& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        Class& operator=(Class&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< Class >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< Class >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    ::javaproxy::java::lang::Class asSubclass(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Class >& p0) const;
    ::javaproxy::java::lang::Object cast(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;
    bool desiredAssertionStatus() const;
    static ::javaproxy::java::lang::Class forName(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0);
    ::javaproxy::java::lang::String getCanonicalName() const;
    ::javaproxy::java::lang::Class getComponentType() const;
    ::javaproxy::java::lang::Class getDeclaringClass() const;
    ::javaproxy::java::lang::Class getEnclosingClass() const;
    jint getModifiers() const;
    ::javaproxy::java::lang::String getName() const;
    ::javaproxy::java::net::URL getResource(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const;
    ::javaproxy::java::lang::String getSimpleName() const;
    ::javaproxy::java::lang::Class getSuperclass() const;
    ::javaproxy::java::lang::String getTypeName() const;
    bool isAnnotation() const;
    bool isAnnotationPresent(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Class >& p0) const;
    bool isAnonymousClass() const;
    bool isArray() const;
    bool isAssignableFrom(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Class >& p0) const;
    bool isEnum() const;
    bool isInstance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const;
    bool isInterface() const;
    bool isLocalClass() const;
    bool isMemberClass() const;
    bool isPrimitive() const;
    bool isSynthetic() const;
    ::javaproxy::java::lang::Object newInstance() const;
    ::javaproxy::java::lang::String toGenericString() const;
    ::javaproxy::java::lang::String toString() const;

    ::zschimmer::javabridge::Class* java_object_class_() const;

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<Class__class*> {
        void initialize() const;
    };

    Lazy_class _class;
};


}}}

#endif
