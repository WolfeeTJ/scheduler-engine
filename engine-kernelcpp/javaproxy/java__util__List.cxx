// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "java__util__List.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"

namespace javaproxy { namespace java { namespace util { 

struct List__class : ::zschimmer::javabridge::Class
{
    List__class(const string& class_name);
   ~List__class();

    ::zschimmer::javabridge::Method const _add__ILjava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _add__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _clear____method;
    ::zschimmer::javabridge::Method const _contains__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _get__I__method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Method const _indexOf__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _isEmpty____method;
    ::zschimmer::javabridge::Method const _lastIndexOf__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _remove__I__method;
    ::zschimmer::javabridge::Method const _remove__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _set__ILjava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _size____method;
    ::zschimmer::javabridge::Method const _subList__II__method;

    static const ::zschimmer::javabridge::class_factory< List__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< List__class > List__class::class_factory ("java.util.List");

List__class::List__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_add__ILjava_lang_Object_2__method(this, "add", "(ILjava/lang/Object;)V")
    ,_add__Ljava_lang_Object_2__method(this, "add", "(Ljava/lang/Object;)Z")
    ,_clear____method(this, "clear", "()V")
    ,_contains__Ljava_lang_Object_2__method(this, "contains", "(Ljava/lang/Object;)Z")
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_get__I__method(this, "get", "(I)Ljava/lang/Object;")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_indexOf__Ljava_lang_Object_2__method(this, "indexOf", "(Ljava/lang/Object;)I")
    ,_isEmpty____method(this, "isEmpty", "()Z")
    ,_lastIndexOf__Ljava_lang_Object_2__method(this, "lastIndexOf", "(Ljava/lang/Object;)I")
    ,_remove__I__method(this, "remove", "(I)Ljava/lang/Object;")
    ,_remove__Ljava_lang_Object_2__method(this, "remove", "(Ljava/lang/Object;)Z")
    ,_set__ILjava_lang_Object_2__method(this, "set", "(ILjava/lang/Object;)Ljava/lang/Object;")
    ,_size____method(this, "size", "()I")
    ,_subList__II__method(this, "subList", "(II)Ljava/util/List;"){}

List__class::~List__class() {}




List::List(jobject jo) { if (jo) assign_(jo); }

List::List(const List& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    List::List(List&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

List::~List() { assign_(NULL); }




void List::add(jint p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].l = p1.get_jobject();
    List__class* cls = _class.get();
    cls->_add__ILjava_lang_Object_2__method.call(get_jobject(), parameter_list);
}

bool List::add(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    List__class* cls = _class.get();
    return 0 != cls->_add__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

void List::clear() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    List__class* cls = _class.get();
    cls->_clear____method.call(get_jobject(), parameter_list);
}

bool List::contains(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    List__class* cls = _class.get();
    return 0 != cls->_contains__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

bool List::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    List__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object List::get(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    List__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_get__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint List::hashCode() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    List__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

jint List::indexOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    List__class* cls = _class.get();
    return cls->_indexOf__Ljava_lang_Object_2__method.int_call(get_jobject(), parameter_list);
}

bool List::isEmpty() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    List__class* cls = _class.get();
    return 0 != cls->_isEmpty____method.bool_call(get_jobject(), parameter_list);
}

jint List::lastIndexOf(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    List__class* cls = _class.get();
    return cls->_lastIndexOf__Ljava_lang_Object_2__method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object List::remove(jint p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].i = p0;
    List__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_remove__I__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

bool List::remove(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    List__class* cls = _class.get();
    return 0 != cls->_remove__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

::javaproxy::java::lang::Object List::set(jint p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].l = p1.get_jobject();
    List__class* cls = _class.get();
    ::javaproxy::java::lang::Object result;
    result.steal_local_ref(cls->_set__ILjava_lang_Object_2__method.jobject_call(get_jobject(), parameter_list));
    return result;
}

jint List::size() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    List__class* cls = _class.get();
    return cls->_size____method.int_call(get_jobject(), parameter_list);
}

::javaproxy::java::util::List List::subList(jint p0, jint p1) const {
    ::zschimmer::javabridge::raw_parameter_list<2> parameter_list;
    parameter_list._jvalues[0].i = p0;
    parameter_list._jvalues[1].i = p1;
    List__class* cls = _class.get();
    ::javaproxy::java::util::List result;
    result.steal_local_ref(cls->_subList__II__method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* List::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* List::java_class_() { return List__class::class_factory.clas(); }


void List::Lazy_class::initialize() const {
    _value = List__class::class_factory.clas();
}


}}}
