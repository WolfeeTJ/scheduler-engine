// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#ifndef _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_NEWKERNEL_JOB_CPPNEWJOB_H_
#define _JAVAPROXY_COM_SOS_SCHEDULER_ENGINE_NEWKERNEL_JOB_CPPNEWJOB_H_

#include "../zschimmer/zschimmer.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"
#include "java__lang__Object.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace cplusplus { namespace runtime { struct Sister; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace data { namespace job { struct TaskPersistentState; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { struct Job_nodeC; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { struct SpoolerC; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { struct Variable_setC; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace job { struct Job; }}}}}}}
namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace order { namespace jobchain { struct JobChain; }}}}}}}}
namespace javaproxy { namespace java { namespace lang { struct Object; }}}
namespace javaproxy { namespace java { namespace lang { struct String; }}}
namespace javaproxy { namespace org { namespace w3c { namespace dom { struct Document; }}}}
namespace javaproxy { namespace org { namespace w3c { namespace dom { struct Element; }}}}


namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace newkernel { namespace job { 


struct CppNewJob__class;

struct CppNewJob : ::zschimmer::javabridge::proxy_jobject< CppNewJob >, ::javaproxy::java::lang::Object {
    static CppNewJob new_instance(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::SpoolerC >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::job::Job >& p1);

    CppNewJob(jobject = NULL);

    CppNewJob(const CppNewJob&);

    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        CppNewJob(CppNewJob&&);
    #endif

    ~CppNewJob();

    CppNewJob& operator=(jobject jo) { assign_(jo); return *this; }
    CppNewJob& operator=(const CppNewJob& o) { assign_(o.get_jobject()); return *this; }
    #ifdef Z_HAS_MOVE_CONSTRUCTOR
        CppNewJob& operator=(CppNewJob&& o) { set_jobject(o.get_jobject()); o.set_jobject(NULL); return *this; }
    #endif

    jobject get_jobject() const { return ::zschimmer::javabridge::proxy_jobject< CppNewJob >::get_jobject(); }

  protected:
    void set_jobject(jobject jo) {
        ::zschimmer::javabridge::proxy_jobject< CppNewJob >::set_jobject(jo);
        ::javaproxy::java::lang::Object::set_jobject(jo);
    }
  public:

    ::javaproxy::org::w3c::dom::Element appendCalendarDOMElements(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Document >& p0) const;
    bool canBeRemovedNow() const;
    void close() const;
    bool connectJobNode(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::Job_nodeC >& p0) const;
    ::javaproxy::java::lang::String description() const;
    void disconnectJobNode(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::Job_nodeC >& p0) const;
    ::javaproxy::org::w3c::dom::Element domElement(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Document >& p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::kernel::order::jobchain::JobChain >& p1) const;
    void enqueueTask(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::com::sos::scheduler::engine::data::job::TaskPersistentState >& p0) const;
    void executeStateCommand(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const;
    bool hasTask() const;
    bool isInJobChain() const;
    bool isPermanentlyStopped() const;
    bool isWaitingForProcess() const;
    void killTask(jint p0, jboolean p1) const;
    bool onActivate() const;
    bool onInitialize() const;
    bool onLoad() const;
    void onOrderPossiblyAvailable() const;
    void onPrepareToRemove() const;
    void onProcessIsIdle() const;
    void onReferencedScheduleLoaded() const;
    void onReferencedScheduleModified() const;
    bool onReferencedScheduleToBeRemoved() const;
    void onRemoveNow() const;
    jint orderSetbackMaximum() const;
    ::javaproxy::java::lang::String processClassPath() const;
    ::javaproxy::org::w3c::dom::Element readHistory(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Document >& p0, jint p1, jint p2) const;
    ::javaproxy::java::lang::String removalError() const;
    void removeRunningTask(jint p0) const;
    void setIdleTimeout(jlong p0) const;
    void setOrderControlled() const;
    void setScheduleDOM(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::org::w3c::dom::Element >& p0) const;
    void setStateText(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p0) const;
    void setXmlBytes(const ::zschimmer::javabridge::Local_java_byte_array& p0) const;
    void signalEarlierOrder(jlong p0, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p1, const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::String >& p2) const;
    ::javaproxy::java::lang::String stateString() const;
    void stop() const;
    void stopSimply() const;
    ::javaproxy::java::lang::String title() const;
    bool tryToEndATask() const;

    ::zschimmer::javabridge::Class* java_object_class_() const;

    static ::zschimmer::javabridge::Class* java_class_();


  private:
    struct Lazy_class : ::zschimmer::abstract_lazy<CppNewJob__class*> {
        void initialize() const;
    };

    Lazy_class _class;
};


}}}}}}}

#endif
