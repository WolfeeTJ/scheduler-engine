// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "org__joda__time__base__AbstractDuration.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "org__joda__time__Duration.h"

namespace javaproxy { namespace org { namespace joda { namespace time { namespace base { 

struct AbstractDuration__class : ::zschimmer::javabridge::Class
{
    AbstractDuration__class(const string& class_name);
   ~AbstractDuration__class();

    ::zschimmer::javabridge::Method const _compareTo__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _equals__Ljava_lang_Object_2__method;
    ::zschimmer::javabridge::Method const _hashCode____method;
    ::zschimmer::javabridge::Method const _toDuration____method;
    ::zschimmer::javabridge::Method const _toString____method;

    static const ::zschimmer::javabridge::class_factory< AbstractDuration__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< AbstractDuration__class > AbstractDuration__class::class_factory ("org.joda.time.base.AbstractDuration");

AbstractDuration__class::AbstractDuration__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
    ,_compareTo__Ljava_lang_Object_2__method(this, "compareTo", "(Ljava/lang/Object;)I")
    ,_equals__Ljava_lang_Object_2__method(this, "equals", "(Ljava/lang/Object;)Z")
    ,_hashCode____method(this, "hashCode", "()I")
    ,_toDuration____method(this, "toDuration", "()Lorg/joda/time/Duration;")
    ,_toString____method(this, "toString", "()Ljava/lang/String;"){}

AbstractDuration__class::~AbstractDuration__class() {}




AbstractDuration::AbstractDuration(jobject jo) { if (jo) assign_(jo); }

AbstractDuration::AbstractDuration(const AbstractDuration& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    AbstractDuration::AbstractDuration(AbstractDuration&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

AbstractDuration::~AbstractDuration() { assign_(NULL); }




jint AbstractDuration::compareTo(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractDuration__class* cls = _class.get();
    return cls->_compareTo__Ljava_lang_Object_2__method.int_call(get_jobject(), parameter_list);
}

bool AbstractDuration::equals(const ::zschimmer::javabridge::proxy_jobject< ::javaproxy::java::lang::Object >& p0) const {
    ::zschimmer::javabridge::raw_parameter_list<1> parameter_list;
    parameter_list._jvalues[0].l = p0.get_jobject();
    AbstractDuration__class* cls = _class.get();
    return 0 != cls->_equals__Ljava_lang_Object_2__method.bool_call(get_jobject(), parameter_list);
}

jint AbstractDuration::hashCode() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDuration__class* cls = _class.get();
    return cls->_hashCode____method.int_call(get_jobject(), parameter_list);
}

::javaproxy::org::joda::time::Duration AbstractDuration::toDuration() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDuration__class* cls = _class.get();
    ::javaproxy::org::joda::time::Duration result;
    result.steal_local_ref(cls->_toDuration____method.jobject_call(get_jobject(), parameter_list));
    return result;
}

::javaproxy::java::lang::String AbstractDuration::toString() const {
    ::zschimmer::javabridge::raw_parameter_list<0> parameter_list;
    AbstractDuration__class* cls = _class.get();
    ::javaproxy::java::lang::String result;
    result.steal_local_ref(cls->_toString____method.jobject_call(get_jobject(), parameter_list));
    return result;
}


::zschimmer::javabridge::Class* AbstractDuration::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* AbstractDuration::java_class_() { return AbstractDuration__class::class_factory.clas(); }


void AbstractDuration::Lazy_class::initialize() const {
    _value = AbstractDuration__class::class_factory.clas();
}


}}}}}
